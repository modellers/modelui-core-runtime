{"version":3,"file":"XMLParser.js","sources":["../../../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../../../node_modules/fast-xml-parser/src/fxp.js","../../../../src/components/Data/XMLParser.js"],"sourcesContent":["const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","/* eslint-disable no-unused-vars */\n// event handler\nimport { XMLParser as XMLFastParser, XMLBuilder } from 'fast-xml-parser' // https://www.npmjs.com/package/fast-xml-parser\nimport Event from '../../event/Event'\nimport { StateLess } from '../../event/StateBase'\n\nexport const triggers = {\n  read: {\n    alias: [],\n    info: {\n      name: 'Read',\n      description: 'Read XML returning JSON'\n    },\n    schema: {}\n  },\n  convert: {\n    alias: [],\n    info: {\n      name: 'Convert',\n      description: 'Converts JSON to XML'\n    },\n    schema: {}\n  }\n}\n\nexport const events = {\n  reading: {\n    alias: [],\n    info: {\n      name: 'reading',\n      description: 'Reading the XML and returning XML'\n    },\n    schema: {}\n  },\n  read: {\n    alias: [],\n    info: {\n      name: 'read',\n      description: 'Read the XML and returning XML'\n    },\n    schema: {}\n  },\n  failure_reading: {\n    alias: [],\n    info: {\n      name: 'Reading XML failed',\n      description: 'Parsing the XML faild'\n    },\n    schema: {}\n  },\n  converting: {\n    alias: [],\n    info: {\n      name: 'Converting',\n      description: 'Converting the JSON to XML'\n    },\n    schema: {}\n  },\n  converted: {\n    alias: [],\n    info: {\n      name: 'Converted',\n      description: 'Converted the JSON to XML'\n    },\n    schema: {}\n  },\n  failure_converting: {\n    alias: [],\n    info: {\n      name: 'Failure Converting',\n      description: 'Convertion the JSON to XML failed'\n    },\n    schema: {}\n  }\n}\n\nexport const options = {\n  id: 'xml',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'XML Parser options',\n  'x-layout': 'component',\n  type: 'object',\n  version: 0.1,\n  properties: {},\n  required: []\n}\n\nexport class StateWorker extends StateLess {\n  // NOTE: idea is that the StateWorker is a generic instance that can be reused running scripts\n\n  constructor(props) {\n    super(props)\n    this.props = props\n    // apply initial values\n    this.state = {}\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    // register componenet overiding or adding new event handlers\n\n    const dataActionHandlers = {\n      read: {\n        schema: {},\n        handler: (obj) => {\n          this.triggerEvent('reading', { id: obj.id, xml: obj.xml })\n          try {\n            const parser = new XMLFastParser({\n              ignoreAttributes: false\n            })\n            const result = parser.parse(obj.xml)\n            this.triggerEvent('read', { id: obj.id, json: result })\n          } catch (e) {\n            // notify event: missing - Failure\n            this.triggerEvent('failure_reading', {\n              id: obj.id,\n              xml: obj.xml,\n              error: e + '',\n              e\n            })\n          }\n        }\n      },\n      convert: {\n        schema: {},\n        handler: (obj) => {\n          this.triggerEvent('converting', { id: obj.id, json: obj.json })\n          try {\n            const options = {\n              ignoreAttributes: false,\n              attributeNamePrefix: '@_',\n              format: true\n            }\n            const builder = new XMLBuilder(options)\n            const xml = builder.build(obj.json)\n            // const xml = toXml(obj.json);\n            this.triggerEvent('converted', { id: obj.id, xml: xml })\n          } catch (e) {\n            // notify event: missing - Failure\n            this.triggerEvent('failure_converting', {\n              id: obj.id,\n              xml: obj.xml,\n              error: e + '',\n              e\n            })\n          }\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    this.ddEvent = Event.EventManager.getInstance().register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n\nexport const config = {\n  name: 'XML',\n  type: 'xml',\n  author: 'Kjartan JÃ³nsson',\n  description: 'XML Parser',\n  version: 0.1,\n  relation: {\n    contains: [],\n    within: 'component' // parent\n  },\n  options: options,\n  state: StateWorker\n}\n\nexport function XMLParser(props) {\n  const stateWorker = new StateWorker(props)\n  stateWorker.registerComponent({}, {}, config)\n  return stateWorker\n}\n"],"names":["require$$0","require$$1","require$$2","validator","require$$3","XMLParser","triggers","read","alias","info","name","description","schema","convert","events","reading","failure_reading","converting","converted","failure_converting","options","id","$schema","type","version","properties","required","StateWorker","_StateLess","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","actionHandlers","eventHandlers","component_info","dataActionHandlers","handler","obj","triggerEvent","xml","parser","XMLFastParser","ignoreAttributes","result","parse","json","e","error","attributeNamePrefix","format","builder","XMLBuilder","build","ddEvent","Event","EventManager","getInstance","register","_objectSpread","state","_createClass","StateLess","config","author","relation","contains","within","stateWorker","registerComponent"],"mappings":"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"}