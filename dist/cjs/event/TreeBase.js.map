{"version":3,"file":"TreeBase.js","sources":["../../../src/event/TreeBase.js"],"sourcesContent":["// utils\nimport { getFlatDataFromTree, getTreeFromFlatData } from '../util/TreeUtil'\n// base list\nimport {\n  StateList,\n  ListBase,\n  events as baseEvents,\n  triggers as baseTriggers\n} from './ListBase'\n\nconst treeTriggers = {\n  /*\n  expand: {\n    alias: [],\n    info: {\n      name: 'Expand',\n      description: 'Adds data at the end to component'\n    },\n    schema: {}\n  },\n  collapse: {\n    alias: [],\n    info: {\n      name: 'Collapse',\n      description: 'Adds data to the front of the component'\n    },\n    schema: {}\n  }\n  */\n}\n\nconst treeEvents = {\n  /*\n  expanded: {\n    alias: [],\n    info: {\n      name: 'Expanded',\n      description: 'Expanded item'\n    },\n    schema: {} \n  },\n  collapsed: {\n    alias: [],\n    info: {\n      name: 'Collapsed',\n      description: 'Collapsed item'\n    },\n    schema: {}\n  }\n  */\n}\n\nexport const events = {\n  ...baseEvents,\n  ...treeEvents\n}\nexport const triggers = {\n  ...baseTriggers,\n  ...treeTriggers\n}\n\nexport const StateTree = StateList\n\nexport class TreeBase extends ListBase {\n  constructor(props) {\n    super(props)\n    // add a separate tree state\n    this.state.tree = this.getTreeFromList()\n  }\n\n  getTreeFromList = (data) => {\n    let _data = data\n    if (!_data) {\n      _data = this.state.data\n    }\n    return getTreeFromFlatData({\n      flatData: _data,\n      getKey: (itm) => {\n        return itm.id\n      },\n      getParentKey: (itm) => {\n        return itm.parent\n      },\n      rootKey: this.props.config.options.rootId || null\n    })\n  }\n\n  getListFromTree = (tree) => {\n    let _tree = tree\n    if (!_tree) {\n      _tree = this.state.tree\n    }\n    const flatData = getFlatDataFromTree({\n      treeData: _tree,\n      getNodeKey: (itm) => {\n        return itm.id\n      },\n      ignoreCollapsed: false\n    })\n    const data = []\n    flatData.forEach((item) => {\n      const itm = { ...item.node }\n      if (item.parentNode === null) {\n        itm.parent = null // null;\n      } else {\n        itm.parent = item.parentNode.id\n      }\n      delete itm.children\n      data.push(itm)\n    })\n    return data\n  }\n\n  getPathToNodeById = (id) => {\n    const idx = this.findItemIndexById(id)\n    if (idx === null) {\n    } else {\n      const itm = this.state.data[idx]\n      if (itm.parent !== null) {\n        return this.getPathToNodeById(itm.parent)\n      }\n    }\n  }\n}\n\nexport const schema = {\n  $id: 'https://example.com/list.schema.json',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'List item',\n  type: 'array',\n  items: {\n    $ref: 'list.item.json'\n  }\n}\n\nexport const item = {\n  $id: 'https://example.com/list.schema.json',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'List item',\n  type: 'object',\n  required: ['text'],\n  properties: {\n    text: {\n      $ref: 'list.itemtext.json'\n    },\n    avatar: {\n      $ref: 'avatar.schema.json'\n    },\n    action: {\n      oneOf: [\n        { $ref: 'button.schema.json' },\n        { $ref: 'list.itemtext.json' }\n        // {'$ref': 'form.checkbox.json'}\n        // {'$ref': 'form.switch.json'}\n      ]\n    }\n  }\n}\n\nexport const itemtext = {\n  $id: 'https://example.com/list.itemtext.json',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'List item text',\n  type: 'object',\n  properties: {\n    title: {\n      type: 'string'\n    },\n    subtitle: {\n      type: 'string'\n    }\n  }\n}\n\nexport default { events, triggers, StateTree, TreeBase }\n"],"names":["treeTriggers","treeEvents","events","_objectSpread","baseEvents","triggers","baseTriggers","StateTree","StateList","TreeBase","_ListBase","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","data","_data","state","getTreeFromFlatData","flatData","getKey","itm","id","getParentKey","parent","rootKey","config","options","rootId","tree","_tree","getFlatDataFromTree","treeData","getNodeKey","ignoreCollapsed","forEach","item","node","parentNode","children","push","idx","findItemIndexById","getPathToNodeById","getTreeFromList","_createClass","ListBase","schema","$id","$schema","description","type","items","$ref","required","properties","text","avatar","action","oneOf","itemtext","title","subtitle"],"mappings":"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"}