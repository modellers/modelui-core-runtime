{"version":3,"file":"json2xml-ac73b7d0.js","sources":["../../node_modules/fast-xml-parser/src/util.js","../../node_modules/fast-xml-parser/src/validator.js","../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../../node_modules/strnum/strnum.js","../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"],"sourcesContent":["'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<') {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'A' &&\n                    xmlData[i+3] === 'T' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'L' &&\n                    xmlData[i+6] === 'I' &&\n                    xmlData[i+7] === 'S' &&\n                    xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'N' &&\n                    xmlData[i+3] === 'O' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'A' &&\n                    xmlData[i+6] === 'T' &&\n                    xmlData[i+7] === 'I' &&\n                    xmlData[i+8] === 'O' &&\n                    xmlData[i+9] === 'N'\n                ){\n                    //Not supported\n                    i += 9;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                    }else{\n                        throw new Error(`Invalid XML comment in DOCTYPE`);\n                    }\n                }else if(entity){\n                    parseEntityExp(exp, entities);\n                    entity = false;\n                }\n                angleBracketsCount--;\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      const aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath);\n          }\n          currentNode.addChild(childNode);\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this. options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n        }\n\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //boolean tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          currentNode.addChild(childNode);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n            currentNode.addChild(childNode);\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            currentNode.addChild(childNode);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options){\n    return arrToStr( jArray, options, \"\", 0);\n}\n\nfunction arrToStr(arr, options, jPath, level){\n    let xmlStr = \"\";\n\n    let indentation = \"\";\n    if(options.format && options.indentBy.length > 0){//TODO: this logic can be avoided for each call\n        indentation = EOL + \"\" + options.indentBy.repeat(level);\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if(jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if(tagName === options.textNodeName){\n            let tagText = tagObj[tagName];\n            if(!isStopNode(newJPath, options)){\n                tagText = options.tagValueProcessor( tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            xmlStr += indentation + tagText;\n            continue;\n        }else if( tagName === options.cdataPropName){\n            xmlStr += indentation + `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            continue;\n        }else if( tagName === options.commentPropName){\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            continue;\n        }else if( tagName[0] === \"?\"){\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            continue;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        let tagStart =  indentation + `<${tagName}${attStr}`;\n        let tagValue = arrToStr(tagObj[tagName], options, newJPath, level + 1);\n        if(options.unpairedTags.indexOf(tagName) !== -1){\n            if(options.suppressUnpairedNode)  xmlStr += tagStart + \">\"; \n            else xmlStr += tagStart + \"/>\"; \n        }else if( (!tagValue || tagValue.length === 0) && options.suppressEmptyNode){ \n            xmlStr += tagStart + \"/>\"; \n        }else{ \n            //TODO: node with only text value should not parse the text value in next line\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>` ;\n        }\n    }\n    \n    return xmlStr;\n}\n\nfunction propName(obj){\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if(key !== \":@\") return key;\n    }\n  }\n\nfunction attr_to_str(attrMap, options){\n    let attrStr = \"\";\n    if(attrMap && !options.ignoreAttributes){\n        for (let attr in attrMap){\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if(attrVal === true && options.suppressBooleanAttributes){\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            }else{\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options){\n    jPath = jPath.substr(0,jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for(let index in options.stopNodes){\n        if(options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\"+tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options){\n    if(textValue && textValue.length > 0 && options.processEntities){\n      for (let i=0; i< options.entities.length; i++) {\n        const entity = options.entities[i];\n        textValue = textValue.replace(entity.regex, entity.val);\n      }\n    }\n    return textValue;\n  }\nmodule.exports = toXml;","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  transformTagName: false,\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.suppressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n\n  this.replaceEntitiesValue = replaceEntitiesValue;\n  this.buildAttrPairStr = buildAttrPairStr;\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          val += this.processTextOrObjNode(item, key, level)\n        } else {\n          val += this.buildTextNode(item, key, '', level);\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction buildAttrPairStr(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  let tagEndExp = '</' + key + this.tagEndChar;\n  let piClosingChar = \"\";\n  \n  if(key[0] === \"?\") {\n    piClosingChar = \"?\";\n    tagEndExp = \"\";\n  }\n\n  if (attrStr && val.indexOf('<') === -1) {\n    return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n  } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n    return this.indentate(level) + `<!--${val}-->` + this.newLine;\n  }else {\n    return (\n      this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n      val +\n      this.indentate(level) + tagEndExp    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n      if(this.options.suppressUnpairedNode){\n        return this.indentate(level) + '<' + key + this.tagEndChar;\n      }else{\n        return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n      }\n    } else{\n      return (\n        this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar  );\n    }\n\n  }\n}\n\nfunction replaceEntitiesValue(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if( val === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(this.options.suppressUnpairedNode){\n      return this.indentate(level) + '<' + key + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n    }\n  }else if (val !== '') { //empty\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; //PI tag\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar; //normal\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n"],"names":["nameStartChar","nameRegexp","regexName","RegExp","exports","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","isName","string","match","exec","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","util","require$$0","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validator","validate","options","assign","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","msg","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","map","t","replace","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","preserveOrder","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","cdataPropName","numberParseOptions","hex","leadingZeros","tagValueProcessor","val","attributeValueProcessor","stopNodes","alwaysCreateTextNode","isArray","commentPropName","processEntities","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","OptionsBuilder","buildOptions","xmlNode","constructor","this","child","add","key","addChild","node","entityRegex","parseEntityExp","exp","entities","regx","DocTypeReader","Error","hasBody","entity","comment","hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","decimalPoint","eNotation","require$$1","readDocType","require$$2","toNumber","str","trimmedStr","skipLike","test","sign","numTrimmedByZeros","numStr","trimZeros","num","search","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","jPath","dontTrim","hasAttributes","isLeafNode","escapeEntities","replaceEntitiesValue","newval","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","attrs","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","lastIndexOf","tagsNodeStack","tagData","readTagExp","childNode","tagExp","attrExpPresent","endIndex","docTypeEntities","lastTag","isItStopNode","tagContent","readStopNodeData","entityName","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","openTagCount","shouldParse","OrderedObjParser_1","apos","gt","lt","quot","space","cent","pound","yen","euro","copyright","reg","inr","compress","arr","text","compressedObj","tagObj","property","propName","newJpath","isLeaf","isLeafTag","assignAttributes","Array","attrMap","jpath","atrrName","propCount","node2json","prettify","arrToStr","level","xmlStr","indentation","format","indentBy","repeat","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","tagStart","tagValue","suppressUnpairedNode","suppressEmptyNode","attr","attrVal","suppressBooleanAttributes","textValue","buildFromOrderedJs","jArray","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","buildTextNode","buildEmptyTextNode","buildObjNode","buildEmptyObjNode","buildTextValNode","buildObjectNode","buildAttrPairStr","object","j2x","tagEndExp","piClosingChar","name","startsWith","prototype","build","jObj","arrayNodeName","Date","arrLen","j","item","Ks","L","json2xml"],"mappings":"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"}