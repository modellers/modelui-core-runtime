{"version":3,"file":"XMLParser.js","sources":["../../../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../../../node_modules/fast-xml-parser/src/fxp.js","../../../../src/components/Data/XMLParser.js"],"sourcesContent":["const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","/* eslint-disable no-unused-vars */\n// event handler\nimport { XMLParser as XMLFastParser, XMLBuilder } from 'fast-xml-parser' // https://www.npmjs.com/package/fast-xml-parser\nimport Event from '../../event/Event'\nimport { StateLess } from '../../event/StateBase'\n\nexport const triggers = {\n  read: {\n    alias: [],\n    info: {\n      name: 'Read',\n      description: 'Read XML returning JSON'\n    },\n    schema: {}\n  },\n  convert: {\n    alias: [],\n    info: {\n      name: 'Convert',\n      description: 'Converts JSON to XML'\n    },\n    schema: {}\n  }\n}\n\nexport const events = {\n  reading: {\n    alias: [],\n    info: {\n      name: 'reading',\n      description: 'Reading the XML and returning XML'\n    },\n    schema: {}\n  },\n  read: {\n    alias: [],\n    info: {\n      name: 'read',\n      description: 'Read the XML and returning XML'\n    },\n    schema: {}\n  },\n  failure_reading: {\n    alias: [],\n    info: {\n      name: 'Reading XML failed',\n      description: 'Parsing the XML faild'\n    },\n    schema: {}\n  },\n  converting: {\n    alias: [],\n    info: {\n      name: 'Converting',\n      description: 'Converting the JSON to XML'\n    },\n    schema: {}\n  },\n  converted: {\n    alias: [],\n    info: {\n      name: 'Converted',\n      description: 'Converted the JSON to XML'\n    },\n    schema: {}\n  },\n  failure_converting: {\n    alias: [],\n    info: {\n      name: 'Failure Converting',\n      description: 'Convertion the JSON to XML failed'\n    },\n    schema: {}\n  }\n}\n\nexport const options = {\n  id: 'xml',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'XML Parser options',\n  'x-layout': 'component',\n  type: 'object',\n  version: 0.1,\n  properties: {},\n  required: []\n}\n\nexport class StateWorker extends StateLess {\n  // NOTE: idea is that the StateWorker is a generic instance that can be reused running scripts\n\n  constructor(props) {\n    super(props)\n    this.props = props\n    // apply initial values\n    this.state = {}\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    // register componenet overiding or adding new event handlers\n\n    const dataActionHandlers = {\n      read: {\n        schema: {},\n        handler: (obj) => {\n          this.triggerEvent('reading', { id: obj.id, xml: obj.xml })\n          try {\n            const parser = new XMLFastParser({\n              ignoreAttributes: false\n            })\n            const result = parser.parse(obj.xml)\n            this.triggerEvent('read', { id: obj.id, json: result })\n          } catch (e) {\n            // notify event: missing - Failure\n            this.triggerEvent('failure_reading', {\n              id: obj.id,\n              xml: obj.xml,\n              error: e + '',\n              e\n            })\n          }\n        }\n      },\n      convert: {\n        schema: {},\n        handler: (obj) => {\n          this.triggerEvent('converting', { id: obj.id, json: obj.json })\n          try {\n            const options = {\n              ignoreAttributes: false,\n              attributeNamePrefix: '@_',\n              format: true\n            }\n            const builder = new XMLBuilder(options)\n            const xml = builder.build(obj.json)\n            // const xml = toXml(obj.json);\n            this.triggerEvent('converted', { id: obj.id, xml: xml })\n          } catch (e) {\n            // notify event: missing - Failure\n            this.triggerEvent('failure_converting', {\n              id: obj.id,\n              xml: obj.xml,\n              error: e + '',\n              e\n            })\n          }\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    this.ddEvent = Event.EventManager.getInstance().register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n\nexport const config = {\n  name: 'XML',\n  type: 'xml',\n  author: 'Kjartan JÃ³nsson',\n  description: 'XML Parser',\n  version: 0.1,\n  relation: {\n    contains: [],\n    within: 'component' // parent\n  },\n  options: options,\n  state: StateWorker\n}\n\nexport function XMLParser(props) {\n  const stateWorker = new StateWorker(props)\n  stateWorker.registerComponent({}, {}, config)\n  return stateWorker\n}\n"],"names":["buildOptions","require$$0","OrderedObjParser","require$$1","prettify","require$$2","validator","require$$3","XMLParser_1","constructor","options","this","externalEntities","parse","xmlData","validationOption","toString","Error","result","validate","err","msg","line","col","orderedObjParser","addExternalEntities","orderedResult","parseXml","preserveOrder","undefined","addEntity","key","value","indexOf","fxp","XMLParser","XMLValidator","XMLBuilder","triggers","read","alias","info","name","description","schema","convert","events","reading","failure_reading","converting","converted","failure_converting","id","$schema","type","version","properties","required","StateWorker","_StateLess","_inherits","StateLess","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","actionHandlers","eventHandlers","component_info","dataActionHandlers","handler","obj","triggerEvent","xml","XMLFastParser","ignoreAttributes","json","e","error","attributeNamePrefix","format","build","ddEvent","Event","EventManager","getInstance","register","_objectSpread","state","_createClass","config","author","relation","contains","within","stateWorker","registerComponent"],"mappings":"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"}