{"version":3,"file":"ObjectCollection.test.js","sources":["../../../../src/components/Data/ObjectCollection.test.js"],"sourcesContent":["/**\n * MenuComponent tests\n * Testing DD events and actions integrety\n */\n\nimport { MemoryManager } from './MemoryManager'\nimport { ObjectCollection, events, triggers, config } from './ObjectCollection'\nimport {\n  createComponentClassTests,\n  createComponentRegisterTests,\n  testEventSequence\n} from '../../util/TestUtil'\nimport Manager from '../../layout/Manager'\nimport registerComponents from '../Components'\nimport Event from '../../event/Event'\n\ndescribe('ObjectCollection protocol', () => {\n  const tests = createComponentClassTests(\n    Manager.ComponentManager.getInstance(),\n    registerComponents,\n    null,\n    config,\n    ['insert', 'read', 'update', 'upsert', 'delete'],\n    [\n      'invalid',\n      'failure',\n      'inserting',\n      'inserted',\n      'reading',\n      'read',\n      'upserting',\n      'upserted',\n      'updating',\n      'updated',\n      'deleting',\n      'deleted',\n      'missing'\n    ],\n    {},\n    undefined,\n    { render: false }\n  )\n  tests.forEach((t) => {\n    test(t.title, t.test)\n  })\n})\n\ndescribe('ObjectCollection register', () => {\n  const tests = createComponentRegisterTests(\n    Manager.ComponentManager.getInstance(),\n    registerComponents,\n    'object',\n    ObjectCollection,\n    triggers,\n    events,\n    config,\n    {}\n  )\n  tests.forEach((t) => {\n    test(t.title, t.test)\n  })\n})\n\ndescribe('ObjectCollection memory test', () => {\n  beforeEach(() => {\n    Event.EventManager.getInstance().clearAll()\n    // eslint-disable-next-line no-unused-vars\n    const objectCollection = new ObjectCollection({\n      id: 'test_collection',\n      type: 'object',\n      schema: {},\n      data: {\n        1: { id: '1', ok: 1 },\n        '1d': { father: { daugther: 8, son: 5 } }\n      },\n      manager: Manager.ComponentManager.getInstance()\n    })\n  })\n\n  test('Initiated data exists', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'read',\n      '1',\n      'read',\n      (obj) => {\n        expect(obj.id).toEqual('1')\n        expect(obj.ok).toEqual(1)\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['1']).toEqual({ id: '1', ok: 1 })\n        expect(mm.docs['1d']).toEqual({ father: { daugther: 8, son: 5 } })\n        done()\n      }\n    )\n  })\n\n  test('Inserting data', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'insert',\n      { id: '2', ok: 2 },\n      'inserted',\n      (obj) => {\n        expect(obj.id).toEqual('2')\n        expect(obj.ok).toEqual(2)\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['2']).toEqual({ id: '2', ok: 2 })\n        done()\n      }\n    )\n  })\n\n  // TODO: add more of these tests for delete, get, read ...\n  test('Updating missing data results in missing', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'update',\n      { id: 'MISSING-ID', OK: 'Ok value 2' },\n      'missing',\n      (obj) => {\n        expect(obj.id).toEqual('MISSING-ID')\n        done()\n      }\n    )\n  })\n\n  test('Updating shallow object', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'update',\n      { id: '1', ok: 'FINE' },\n      'updated',\n      (obj) => {\n        expect(obj).toEqual({ id: '1', ok: 'FINE' })\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['1']).toEqual({ id: '1', ok: 'FINE' })\n        done()\n      }\n    )\n  })\n\n  test('Updating deep object', (done) => {\n    // increase age of daugther to 9\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'update',\n      { id: '1d', father: { daughter: 9 } },\n      'updated',\n      (obj) => {\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['1d']).toEqual({\n          father: { daugther: 8, son: 5, daughter: 9 },\n          id: '1d'\n        })\n        done()\n      }\n    )\n  })\n\n  /*\n  test('Upsert data', (done) => {\n\n    // \"insert\"  { \"id\": \"1\", \"ok\": 1 } -> \"inserted\" -> { \"id\": \"1\", \"ok\": 1 }\n    // \"read\"  { \"id\": \"1\" } -> \"read\" -> { \"id\": \"1\", \"ok\": 1 }\n    // \"update\"  { \"id\": \"1\", \"ok\": 2 } -> \"updated\" -> { \"id\": \"1\", \"ok\": 2 }\n    // \"read\"  { \"id\": \"1\" } -> \"updated\" -> { \"id\": \"1\", \"ok\": 2 }\n\n    EventManager.getInstance().register(\n      'test',\n      {\n        result: {\n          schema: {},\n          handler: (obj) => {\n            expect(obj.id).toEqual('1')\n            expect(obj.ok).toEqual(1)\n            // check global shared memeory\n            const mm = MemoryManager.getInstance()\n              .getMemory('test_collection')\n              .getData()\n            expect(mm.docs['1']).toEqual({ id: '1', ok: 1 })\n            done()\n          }\n        }\n      },\n      {},\n      {}\n    )\n    EventManager.getInstance().watch([\n      {\n        component: { id: 'test', event: 'result' },\n        trigger: { id: 'test_collection', action: 'upsert' },\n        transform: function (data) {\n          return data\n        }\n      },\n      {\n        component: { id: 'test_collection', event: 'upserted' },\n        trigger: { id: 'test', action: 'result' },\n        transform: function (data) {\n          return data\n        }\n      }\n    ])\n    EventManager.getInstance().addEvent(\n      'test',\n      'result',\n      { id: '1', ok: 1 },\n      {}\n    )\n  })\n  */\n})\n"],"names":["describe","tests","createComponentClassTests","Manager","ComponentManager","getInstance","registerComponents","config","undefined","render","forEach","t","test","title","createComponentRegisterTests","ObjectCollection","triggers","events","beforeEach","Event","EventManager","clearAll","id","type","schema","data","ok","father","daugther","son","manager","done","testEventSequence","obj","expect","toEqual","mm","MemoryManager","getMemory","getData","docs","OK","daughter"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAaAA,QAAQ,CAAC,2BAA2B,EAAE,YAAM;AAC1C,EAAA,IAAMC,KAAK,GAAGC,yBAAyB,CACrCC,OAAO,CAACC,gBAAgB,CAACC,WAAW,EAAE,EACtCC,kBAAkB,EAClB,IAAI,EACJC,MAAM,EACN,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAChD,CACE,SAAS,EACT,SAAS,EACT,WAAW,EACX,UAAU,EACV,SAAS,EACT,MAAM,EACN,WAAW,EACX,UAAU,EACV,UAAU,EACV,SAAS,EACT,UAAU,EACV,SAAS,EACT,SAAS,CACV,EACD,EAAE,EACFC,SAAS,EACT;AAAEC,IAAAA,MAAM,EAAE,KAAA;AAAM,GAAC,CAClB,CAAA;AACDR,EAAAA,KAAK,CAACS,OAAO,CAAC,UAACC,CAAC,EAAK;IACnBC,IAAI,CAACD,CAAC,CAACE,KAAK,EAAEF,CAAC,CAACC,IAAI,CAAC,CAAA;AACvB,GAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEFZ,QAAQ,CAAC,2BAA2B,EAAE,YAAM;EAC1C,IAAMC,KAAK,GAAGa,4BAA4B,CACxCX,OAAO,CAACC,gBAAgB,CAACC,WAAW,EAAE,EACtCC,kBAAkB,EAClB,QAAQ,EACRS,gBAAgB,EAChBC,QAAQ,EACRC,MAAM,EACNV,MAAM,EACN,EAAE,CACH,CAAA;AACDN,EAAAA,KAAK,CAACS,OAAO,CAAC,UAACC,CAAC,EAAK;IACnBC,IAAI,CAACD,CAAC,CAACE,KAAK,EAAEF,CAAC,CAACC,IAAI,CAAC,CAAA;AACvB,GAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEFZ,QAAQ,CAAC,8BAA8B,EAAE,YAAM;AAC7CkB,EAAAA,UAAU,CAAC,YAAM;AACfC,IAAAA,KAAK,CAACC,YAAY,CAACf,WAAW,EAAE,CAACgB,QAAQ,EAAE,CAAA;AAC3C;AACA,IAAyB,IAAIN,gBAAgB,CAAC;AAC5CO,MAAAA,EAAE,EAAE,iBAAiB;AACrBC,MAAAA,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJ,QAAA,CAAC,EAAE;AAAEH,UAAAA,EAAE,EAAE,GAAG;AAAEI,UAAAA,EAAE,EAAE,CAAA;SAAG;AACrB,QAAA,IAAI,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAEC,YAAAA,QAAQ,EAAE,CAAC;AAAEC,YAAAA,GAAG,EAAE,CAAA;AAAE,WAAA;AAAE,SAAA;OACzC;AACDC,MAAAA,OAAO,EAAE3B,OAAO,CAACC,gBAAgB,CAACC,WAAW,EAAA;AAC/C,KAAC,EAAC;AACJ,GAAC,CAAC,CAAA;AAEFO,EAAAA,IAAI,CAAC,uBAAuB,EAAE,UAACmB,IAAI,EAAK;AACtCC,IAAAA,iBAAiB,CACf7B,OAAO,CAACC,gBAAgB,CAACC,WAAW,EAAE,EACtC,iBAAiB,EACjB,MAAM,EACN,GAAG,EACH,MAAM,EACN,UAAC4B,GAAG,EAAK;MACPC,MAAM,CAACD,GAAG,CAACX,EAAE,CAAC,CAACa,OAAO,CAAC,GAAG,CAAC,CAAA;MAC3BD,MAAM,CAACD,GAAG,CAACP,EAAE,CAAC,CAACS,OAAO,CAAC,CAAC,CAAC,CAAA;AACzB;AACA,MAAA,IAAMC,EAAE,GAAGC,aAAa,CAAChC,WAAW,EAAE,CACnCiC,SAAS,CAAC,iBAAiB,CAAC,CAC5BC,OAAO,EAAE,CAAA;MACZL,MAAM,CAACE,EAAE,CAACI,IAAI,CAAC,GAAG,CAAC,CAAC,CAACL,OAAO,CAAC;AAAEb,QAAAA,EAAE,EAAE,GAAG;AAAEI,QAAAA,EAAE,EAAE,CAAA;AAAE,OAAC,CAAC,CAAA;MAChDQ,MAAM,CAACE,EAAE,CAACI,IAAI,CAAC,IAAI,CAAC,CAAC,CAACL,OAAO,CAAC;AAAER,QAAAA,MAAM,EAAE;AAAEC,UAAAA,QAAQ,EAAE,CAAC;AAAEC,UAAAA,GAAG,EAAE,CAAA;AAAE,SAAA;AAAE,OAAC,CAAC,CAAA;AAClEE,MAAAA,IAAI,EAAE,CAAA;AACR,KAAC,CACF,CAAA;AACH,GAAC,CAAC,CAAA;AAEFnB,EAAAA,IAAI,CAAC,gBAAgB,EAAE,UAACmB,IAAI,EAAK;IAC/BC,iBAAiB,CACf7B,OAAO,CAACC,gBAAgB,CAACC,WAAW,EAAE,EACtC,iBAAiB,EACjB,QAAQ,EACR;AAAEiB,MAAAA,EAAE,EAAE,GAAG;AAAEI,MAAAA,EAAE,EAAE,CAAA;AAAE,KAAC,EAClB,UAAU,EACV,UAACO,GAAG,EAAK;MACPC,MAAM,CAACD,GAAG,CAACX,EAAE,CAAC,CAACa,OAAO,CAAC,GAAG,CAAC,CAAA;MAC3BD,MAAM,CAACD,GAAG,CAACP,EAAE,CAAC,CAACS,OAAO,CAAC,CAAC,CAAC,CAAA;AACzB;AACA,MAAA,IAAMC,EAAE,GAAGC,aAAa,CAAChC,WAAW,EAAE,CACnCiC,SAAS,CAAC,iBAAiB,CAAC,CAC5BC,OAAO,EAAE,CAAA;MACZL,MAAM,CAACE,EAAE,CAACI,IAAI,CAAC,GAAG,CAAC,CAAC,CAACL,OAAO,CAAC;AAAEb,QAAAA,EAAE,EAAE,GAAG;AAAEI,QAAAA,EAAE,EAAE,CAAA;AAAE,OAAC,CAAC,CAAA;AAChDK,MAAAA,IAAI,EAAE,CAAA;AACR,KAAC,CACF,CAAA;AACH,GAAC,CAAC,CAAA;;AAEF;AACAnB,EAAAA,IAAI,CAAC,0CAA0C,EAAE,UAACmB,IAAI,EAAK;IACzDC,iBAAiB,CACf7B,OAAO,CAACC,gBAAgB,CAACC,WAAW,EAAE,EACtC,iBAAiB,EACjB,QAAQ,EACR;AAAEiB,MAAAA,EAAE,EAAE,YAAY;AAAEmB,MAAAA,EAAE,EAAE,YAAA;AAAa,KAAC,EACtC,SAAS,EACT,UAACR,GAAG,EAAK;MACPC,MAAM,CAACD,GAAG,CAACX,EAAE,CAAC,CAACa,OAAO,CAAC,YAAY,CAAC,CAAA;AACpCJ,MAAAA,IAAI,EAAE,CAAA;AACR,KAAC,CACF,CAAA;AACH,GAAC,CAAC,CAAA;AAEFnB,EAAAA,IAAI,CAAC,yBAAyB,EAAE,UAACmB,IAAI,EAAK;IACxCC,iBAAiB,CACf7B,OAAO,CAACC,gBAAgB,CAACC,WAAW,EAAE,EACtC,iBAAiB,EACjB,QAAQ,EACR;AAAEiB,MAAAA,EAAE,EAAE,GAAG;AAAEI,MAAAA,EAAE,EAAE,MAAA;AAAO,KAAC,EACvB,SAAS,EACT,UAACO,GAAG,EAAK;AACPC,MAAAA,MAAM,CAACD,GAAG,CAAC,CAACE,OAAO,CAAC;AAAEb,QAAAA,EAAE,EAAE,GAAG;AAAEI,QAAAA,EAAE,EAAE,MAAA;AAAO,OAAC,CAAC,CAAA;AAC5C;AACA,MAAA,IAAMU,EAAE,GAAGC,aAAa,CAAChC,WAAW,EAAE,CACnCiC,SAAS,CAAC,iBAAiB,CAAC,CAC5BC,OAAO,EAAE,CAAA;MACZL,MAAM,CAACE,EAAE,CAACI,IAAI,CAAC,GAAG,CAAC,CAAC,CAACL,OAAO,CAAC;AAAEb,QAAAA,EAAE,EAAE,GAAG;AAAEI,QAAAA,EAAE,EAAE,MAAA;AAAO,OAAC,CAAC,CAAA;AACrDK,MAAAA,IAAI,EAAE,CAAA;AACR,KAAC,CACF,CAAA;AACH,GAAC,CAAC,CAAA;AAEFnB,EAAAA,IAAI,CAAC,sBAAsB,EAAE,UAACmB,IAAI,EAAK;AACrC;IACAC,iBAAiB,CACf7B,OAAO,CAACC,gBAAgB,CAACC,WAAW,EAAE,EACtC,iBAAiB,EACjB,QAAQ,EACR;AAAEiB,MAAAA,EAAE,EAAE,IAAI;AAAEK,MAAAA,MAAM,EAAE;AAAEe,QAAAA,QAAQ,EAAE,CAAA;AAAE,OAAA;AAAE,KAAC,EACrC,SAAS,EACT,UAACT,GAAG,EAAK;AACP;AACA,MAAA,IAAMG,EAAE,GAAGC,aAAa,CAAChC,WAAW,EAAE,CACnCiC,SAAS,CAAC,iBAAiB,CAAC,CAC5BC,OAAO,EAAE,CAAA;MACZL,MAAM,CAACE,EAAE,CAACI,IAAI,CAAC,IAAI,CAAC,CAAC,CAACL,OAAO,CAAC;AAC5BR,QAAAA,MAAM,EAAE;AAAEC,UAAAA,QAAQ,EAAE,CAAC;AAAEC,UAAAA,GAAG,EAAE,CAAC;AAAEa,UAAAA,QAAQ,EAAE,CAAA;SAAG;AAC5CpB,QAAAA,EAAE,EAAE,IAAA;AACN,OAAC,CAAC,CAAA;AACFS,MAAAA,IAAI,EAAE,CAAA;AACR,KAAC,CACF,CAAA;AACH,GAAC,CAAC,CAAA;;AAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,CAAC,CAAC"}