{"version":3,"file":"RequestObject.js","sources":["../../../../src/components/Network/RequestObject.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n// event handler\nimport Event from '../../event/Event'\nimport { StateLess } from '../../event/StateBase'\n\nexport const triggers = {\n  read: {\n    alias: [],\n    info: {\n      name: 'Read',\n      description: 'Read XML returning JSON'\n    },\n    schema: {}\n  },\n  convert: {\n    alias: [],\n    info: {\n      name: 'Convert',\n      description: 'Converts JSON to XML'\n    },\n    schema: {}\n  }\n}\n\nexport const events = {\n  reading: {\n    alias: [],\n    info: {\n      name: 'reading',\n      description: 'Reading the XML and returning XML'\n    },\n    schema: {}\n  },\n  read: {\n    alias: [],\n    info: {\n      name: 'read',\n      description: 'Read the XML and returning XML'\n    },\n    schema: {}\n  },\n  failure_reading: {\n    alias: [],\n    info: {\n      name: 'Reading XML failed',\n      description: 'Parsing the XML faild'\n    },\n    schema: {}\n  },\n  converting: {\n    alias: [],\n    info: {\n      name: 'Converting',\n      description: 'Converting the JSON to XML'\n    },\n    schema: {}\n  },\n  converted: {\n    alias: [],\n    info: {\n      name: 'Converted',\n      description: 'Converted the JSON to XML'\n    },\n    schema: {}\n  },\n  failure_converting: {\n    alias: [],\n    info: {\n      name: 'Failure Converting',\n      description: 'Convertion the JSON to XML failed'\n    },\n    schema: {}\n  }\n}\n\nexport const options = {\n  id: 'object-request',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'XML Parser options',\n  'x-layout': 'component',\n  type: 'object',\n  version: 0.1,\n  properties: {},\n  required: []\n}\n\nexport class StateREST extends StateLess {\n  // NOTE: idea is that the StateREST is a generic instance that can be reused running scripts\n\n  constructor(props) {\n    super(props)\n    this.props = props\n    // apply initial values\n    this.state = {}\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    // register componenet overiding or adding new event handlers\n\n    const dataActionHandlers = {\n      read: {\n        schema: {},\n        handler: (obj) => {\n          this.triggerEvent('reading', { id: obj.id, xml: obj.xml })\n        }\n      },\n      convert: {\n        schema: {},\n        handler: (obj) => {\n          this.triggerEvent('converting', { id: obj.id, json: obj.json })\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    this.ddEvent = Event.EventManager.getInstance().register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n\nexport const config = {\n  name: 'Object Request',\n  type: 'object-request',\n  author: 'Kjartan JÃ³nsson',\n  description: 'JSON Web request',\n  version: 0.1,\n  relation: {\n    contains: [],\n    within: 'component' // parent\n  },\n  options: options,\n  state: StateREST\n}\n\nexport function RequestObject(props) {\n  const stateREST = new StateREST(props)\n  stateREST.registerComponent({}, {}, config)\n  return stateREST\n}\n"],"names":["triggers","read","alias","info","name","description","schema","convert","events","reading","failure_reading","converting","converted","failure_converting","options","id","$schema","type","version","properties","required","StateREST","_StateLess","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","actionHandlers","eventHandlers","component_info","dataActionHandlers","handler","obj","triggerEvent","xml","json","ddEvent","Event","EventManager","getInstance","register","_objectSpread","state","_createClass","StateLess","config","author","relation","contains","within","RequestObject","stateREST","registerComponent"],"mappings":"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"}