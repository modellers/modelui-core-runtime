{"version":3,"file":"RequestObject.js","sources":["../../../../src/components/Network/RequestObject.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n// event handler\nimport Event from '../../event/Event'\nimport { StateLess } from '../../event/StateBase'\n\nexport const triggers = {\n  read: {\n    alias: [],\n    info: {\n      name: 'Read',\n      description: 'Read XML returning JSON'\n    },\n    schema: {}\n  },\n  convert: {\n    alias: [],\n    info: {\n      name: 'Convert',\n      description: 'Converts JSON to XML'\n    },\n    schema: {}\n  }\n}\n\nexport const events = {\n  reading: {\n    alias: [],\n    info: {\n      name: 'reading',\n      description: 'Reading the XML and returning XML'\n    },\n    schema: {}\n  },\n  read: {\n    alias: [],\n    info: {\n      name: 'read',\n      description: 'Read the XML and returning XML'\n    },\n    schema: {}\n  },\n  failure_reading: {\n    alias: [],\n    info: {\n      name: 'Reading XML failed',\n      description: 'Parsing the XML faild'\n    },\n    schema: {}\n  },\n  converting: {\n    alias: [],\n    info: {\n      name: 'Converting',\n      description: 'Converting the JSON to XML'\n    },\n    schema: {}\n  },\n  converted: {\n    alias: [],\n    info: {\n      name: 'Converted',\n      description: 'Converted the JSON to XML'\n    },\n    schema: {}\n  },\n  failure_converting: {\n    alias: [],\n    info: {\n      name: 'Failure Converting',\n      description: 'Convertion the JSON to XML failed'\n    },\n    schema: {}\n  }\n}\n\nexport const options = {\n  id: 'object-request',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'XML Parser options',\n  'x-layout': 'component',\n  type: 'object',\n  version: 0.1,\n  properties: {},\n  required: []\n}\n\nexport class StateREST extends StateLess {\n  // NOTE: idea is that the StateREST is a generic instance that can be reused running scripts\n\n  constructor(props) {\n    super(props)\n    this.props = props\n    // apply initial values\n    this.state = {}\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    // register componenet overiding or adding new event handlers\n\n    const dataActionHandlers = {\n      read: {\n        schema: {},\n        handler: (obj) => {\n          this.triggerEvent('reading', { id: obj.id, xml: obj.xml })\n        }\n      },\n      convert: {\n        schema: {},\n        handler: (obj) => {\n          this.triggerEvent('converting', { id: obj.id, json: obj.json })\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    this.ddEvent = Event.EventManager.getInstance().register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n\nexport const config = {\n  name: 'Object Request',\n  type: 'object-request',\n  author: 'Kjartan JÃ³nsson',\n  description: 'JSON Web request',\n  version: 0.1,\n  relation: {\n    contains: [],\n    within: 'component' // parent\n  },\n  options: options,\n  state: StateREST\n}\n\nexport function RequestObject(props) {\n  const stateREST = new StateREST(props)\n  stateREST.registerComponent({}, {}, config)\n  return stateREST\n}\n"],"names":["triggers","read","alias","info","name","description","schema","convert","events","reading","failure_reading","converting","converted","failure_converting","options","id","$schema","type","version","properties","required","StateREST","_StateLess","_inherits","StateLess","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","actionHandlers","eventHandlers","component_info","dataActionHandlers","handler","obj","triggerEvent","xml","json","ddEvent","Event","EventManager","getInstance","register","_objectSpread","state","_createClass","config","author","relation","contains","within","RequestObject","stateREST","registerComponent"],"mappings":"mMAKO,IAAMA,EAAW,CACtBC,KAAM,CACJC,MAAO,GACPC,KAAM,CACJC,KAAM,OACNC,YAAa,2BAEfC,OAAQ,CAAC,GAEXC,QAAS,CACPL,MAAO,GACPC,KAAM,CACJC,KAAM,UACNC,YAAa,wBAEfC,OAAQ,CAAC,IAIAE,EAAS,CACpBC,QAAS,CACPP,MAAO,GACPC,KAAM,CACJC,KAAM,UACNC,YAAa,qCAEfC,OAAQ,CAAC,GAEXL,KAAM,CACJC,MAAO,GACPC,KAAM,CACJC,KAAM,OACNC,YAAa,kCAEfC,OAAQ,CAAC,GAEXI,gBAAiB,CACfR,MAAO,GACPC,KAAM,CACJC,KAAM,qBACNC,YAAa,yBAEfC,OAAQ,CAAC,GAEXK,WAAY,CACVT,MAAO,GACPC,KAAM,CACJC,KAAM,aACNC,YAAa,8BAEfC,OAAQ,CAAC,GAEXM,UAAW,CACTV,MAAO,GACPC,KAAM,CACJC,KAAM,YACNC,YAAa,6BAEfC,OAAQ,CAAC,GAEXO,mBAAoB,CAClBX,MAAO,GACPC,KAAM,CACJC,KAAM,qBACNC,YAAa,qCAEfC,OAAQ,CAAC,IAIAQ,EAAU,CACrBC,GAAI,iBACJC,QAAS,0CACTX,YAAa,qBACb,WAAY,YACZY,KAAM,SACNC,QAAS,GACTC,WAAY,CAAE,EACdC,SAAU,IAGCC,WAASC,GAAAC,EAAAF,EAASG,GAAT,IAAAC,EAAAC,EAAAL,GAGpB,SAAAA,EAAYM,GAAO,IAAAC,EAIF,OAJEC,OAAAR,GACjBO,EAAAH,EAAAK,UAAMH,GAAMI,EAAAC,EAAAJ,GAAA,qBAMM,SAACK,EAAgBC,EAAeC,GAClDF,EAAiBA,GAAkB,GACnCC,EAAgBA,GAAiB,GAIjC,IAAME,EAAqB,CACzBnC,KAAM,CACJK,OAAQ,CAAE,EACV+B,QAAS,SAACC,GACRV,EAAKW,aAAa,UAAW,CAAExB,GAAIuB,EAAIvB,GAAIyB,IAAKF,EAAIE,KACtD,GAEFjC,QAAS,CACPD,OAAQ,CAAE,EACV+B,QAAS,SAACC,GACRV,EAAKW,aAAa,aAAc,CAAExB,GAAIuB,EAAIvB,GAAI0B,KAAMH,EAAIG,MAC1D,IAWJ,OANAb,EAAKc,QAAUC,EAAMC,aAAaC,cAAcC,SAC9ClB,EAAKD,MAAMZ,GAAEgC,EAAAA,EAAA,CAAA,EACRX,GAAuBH,GAAcc,EAAAA,KACrCvC,GAAW0B,GAChBC,GAEKP,EAAKc,WAjCZd,EAAKD,MAAQA,EAEbC,EAAKoB,MAAQ,GAAEpB,CACjB,CAAC,OAAAqB,EAAA5B,EAAA,IAkCU6B,EAAS,CACpB9C,KAAM,iBACNa,KAAM,iBACNkC,OAAQ,kBACR9C,YAAa,mBACba,QAAS,GACTkC,SAAU,CACRC,SAAU,GACVC,OAAQ,aAEVxC,QAASA,EACTkC,MAAO3B,GAGF,SAASkC,EAAc5B,GAC5B,IAAM6B,EAAY,IAAInC,EAAUM,GAEhC,OADA6B,EAAUC,kBAAkB,CAAA,EAAI,CAAE,EAAEP,GAC7BM,CACT"}