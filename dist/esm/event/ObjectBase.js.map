{"version":3,"file":"ObjectBase.js","sources":["../../../src/event/ObjectBase.js"],"sourcesContent":["// event handler\n// TODO: create another version like this one -- https://github.com/dannyconnell/localbase\nimport { StateLess } from './StateBase'\nimport Event from './Event'\nimport { mergeDeep } from '../util/ObjUtil'\nimport { MemoryManager } from '../components/Data/MemoryManager'\n\nexport const triggers = {\n  insert: {\n    alias: [],\n    info: {\n      name: 'Insert',\n      description: 'Insert object'\n    },\n    schema: {}\n  },\n  read: {\n    alias: [],\n    info: {\n      name: 'Read',\n      description: 'Read object'\n    },\n    schema: {}\n  },\n  update: {\n    alias: [],\n    info: {\n      name: 'Update',\n      description: 'Update object'\n    },\n    schema: {}\n  },\n  upsert: {\n    alias: [],\n    info: {\n      name: 'Upsert',\n      description: 'Upsert object'\n    },\n    schema: {}\n  },\n  delete: {\n    alias: [],\n    info: {\n      name: 'Delete',\n      description: 'Delete object'\n    },\n    schema: {}\n  }\n}\n\nexport const events = {\n  invalid: {\n    alias: [],\n    info: {\n      name: 'invalid',\n      description: 'Insert was invalid'\n    },\n    schema: {}\n  },\n  failure: {\n    alias: [],\n    info: {\n      name: 'failure',\n      description: 'Insert was failed'\n    },\n    schema: {}\n  },\n  inserting: {\n    alias: [],\n    info: {\n      name: 'inserting',\n      description: 'Insterting item creates or replaces'\n    },\n    schema: {}\n  },\n  inserted: {\n    alias: [],\n    info: {\n      name: 'inserted',\n      description: 'Inserted item creates or replaces'\n    },\n    schema: {}\n  },\n  reading: {\n    alias: [],\n    info: {\n      name: 'Reading',\n      description: 'Reading identifer'\n    },\n    schema: {}\n  },\n  read: {\n    alias: [],\n    info: {\n      name: 'Read',\n      description: 'Read identifer'\n    },\n    schema: {}\n  },\n  upserting: {\n    alias: [],\n    info: {\n      name: 'upserting',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  upserted: {\n    alias: [],\n    info: {\n      name: 'upserted',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  updating: {\n    alias: [],\n    info: {\n      name: 'updating',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  updated: {\n    alias: [],\n    info: {\n      name: 'updated',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  deleting: {\n    alias: [],\n    info: {\n      name: 'deleting',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  deleted: {\n    alias: [],\n    info: {\n      name: 'deleted',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  missing: {\n    alias: [],\n    info: {\n      name: 'Missing',\n      description: 'Missing read identifer'\n    },\n    schema: {}\n  }\n}\n\n// FIXME: should have state\nexport class StateObject extends StateLess {\n  /*\n    docs = data || {};\n    this.props.id = props.id;\n    schema = props.schema;\n    data = props.data;\n    */\n  // regiser so this is accessible to all transforms\n  // TODO: do this in a nicer way\n\n  constructor(props) {\n    super(props)\n    this.props = props\n    // apply initial values\n    this.state = {\n      data: { docs: props.data, schema: props.data.schema || props.schema },\n      schema: props.schema\n    }\n    // add to globally shared memory (allowing transforms to read data)\n    MemoryManager.getInstance().registerMemory(props.id, this)\n  }\n\n  getData = () => {\n    // Used by memory manager when allowing transformations to read data\n    // Specifically implemented in ObjectCollection\n    return this.getState().data\n  }\n\n  deepMerge = (obj_target, obj_source) => {\n    return mergeDeep(obj_target, obj_source) // { ...obj_target, ...obj_source }\n  }\n\n  raiseSuccessEvent = (event_name, data, evt) => {\n    this.triggerEvent(event_name, data, evt)\n  }\n\n  raiseFailureEvent = (event_name, data, evt) => {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\n    this.triggerEvent(event_name, data, evt)\n  }\n\n  isValidDocumentSchema = (doc, schema) => {\n    // returns true if doc validates against schema\n    return true\n  }\n\n  isValidDocumentId = (document_id) => {\n    return document_id !== null && document_id !== undefined\n  }\n\n  getValidDocumentId = (obj) => {\n    if (typeof obj === 'string') {\n      return obj\n    } // this is a string id\n    const obj_id = obj.id || obj.identifier\n    if (this.isValidDocumentId(obj_id)) {\n      return obj_id\n    }\n    return null\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    // register componenet overiding or adding new event handlers\n    const dataActionHandlers = {\n      insert: {\n        schema: {},\n        handler: (objs) => {\n          const self = this\n          function insert_one(obj, docs, schema) {\n            // https://firebase.google.com/docs/firestore/manage-data/add-data\n            const schema_validation = self.isValidDocumentSchema(obj, schema)\n            if (schema_validation) {\n              // notify event: creating - Pending\n              self.raiseSuccessEvent('inserting', obj)\n              // create the id\n              const document_id = self.getValidDocumentId(obj)\n              docs[document_id] = obj\n              self.raiseSuccessEvent('inserted', obj)\n              // TODO: Event: created - Success\n              // TODO: Event: exists - Failure\n              // TODO: Event: failure - Failure\n            } else {\n              // notify event: invalid - Failure validating against schema\n              self.raiseFailureEvent('invalid', obj, {\n                message: 'Document structure is invalid against schema',\n                code: 501,\n                data: {\n                  document: obj,\n                  schema: schema,\n                  reason: schema_validation\n                }\n              })\n            }\n          }\n          if (Array.isArray(objs)) {\n            objs.forEach((obj) => {\n              insert_one(obj, self.state.data.docs, self.state.data.schema)\n            })\n          } // many\n          else {\n            insert_one(objs, self.state.data.docs)\n          } // one\n        }\n      },\n      read: {\n        schema: {},\n        handler: (document_ids) => {\n          // https://firebase.google.com/docs/firestore/query-data/get-data\n          // validate document id\n          const self = this\n          function read_one(document_id, docs) {\n            document_id = self.getValidDocumentId(document_id)\n            if (!document_id) {\n              self.raiseFailureEvent(\n                'invalid',\n                { id: document_id },\n                {\n                  message: 'Document identifier is invalid',\n                  code: 301,\n                  data: { id: document_id }\n                }\n              )\n            } else {\n              // notify event: reading - Pending\n              self.raiseSuccessEvent('reading', { id: document_id })\n              const obj = docs[document_id]\n              if (obj) {\n                // notify event: read - Success\n                try {\n                  self.raiseSuccessEvent('read', obj)\n                } catch (e) {\n                  self.raiseFailureEvent('failure', { id: document_id }, e)\n                }\n              } else {\n                // notify event: missing - Failure\n                self.raiseFailureEvent(\n                  'missing',\n                  { id: document_id },\n                  {\n                    message: 'Document identifier is invalid',\n                    code: 401,\n                    data: { id: document_id }\n                  }\n                )\n              }\n            }\n          }\n          if (Array.isArray(document_ids)) {\n            document_ids.forEach((document_id) => {\n              read_one(\n                document_id,\n                this.state.data.docs,\n                this.state.data.schema\n              )\n            })\n          } // many\n          else {\n            read_one(document_ids, this.state.data.docs)\n          } // one\n        }\n      },\n      update: {\n        schema: {},\n        handler: (objs) => {\n          const self = this\n          function update_one(obj, docs, schema) {\n            // validate obj against schema\n            const schema_validation = self.isValidDocumentSchema(obj, schema)\n            if (schema_validation) {\n              // TODO: Event: invalidated - Failure validating against schema\n              // notify event: updating - Pending\n              const document_id = self.getValidDocumentId(obj)\n              self.raiseSuccessEvent('updating', obj)\n              if (document_id) {\n                const doc = docs[document_id]\n                if (doc) {\n                  try {\n                    docs[document_id] = mergeDeep(doc || {}, obj)\n                    self.raiseSuccessEvent('updated', docs[document_id])\n                  } catch (e) {\n                    self.raiseFailureEvent('error', obj)\n                  }\n                } else {\n                  // notify event: missing - Failure\n                  self.raiseFailureEvent(\n                    'missing',\n                    { id: document_id, data: docs },\n                    {}\n                  )\n                  // TODO: Event: failure - Failure\n                }\n              } else {\n                self.raiseFailureEvent('invalid', obj, {\n                  message: 'Document identifier is invalid',\n                  code: 301,\n                  data: document_id\n                })\n              }\n            } else {\n            }\n          }\n          if (Array.isArray(objs)) {\n            objs.forEach((obj) => {\n              update_one(obj, this.state.data.docs, this.state.data.schema)\n            })\n          } // many\n          else {\n            update_one(objs, this.state.data.docs, this.state.data.schema)\n          } // one\n        }\n      },\n      upsert: {\n        schema: {},\n        handler: (objs) => {\n          const self = this\n          function upsert_one(obj, docs, schema) {\n            // validate document id\n            const schema_validation = self.isValidDocumentSchema(obj, schema)\n            if (schema_validation) {\n              // Event: upserting - Pending\n              self.raiseSuccessEvent('upserting', obj)\n              const document_id = self.getValidDocumentId(obj)\n              if (document_id) {\n                const doc = docs[document_id]\n                try {\n                  docs[document_id] = self.deepMerge(doc || {}, obj)\n                  self.raiseSuccessEvent('upserted', docs[document_id])\n                } catch (e) {\n                  self.raiseFailureEvent('failure', obj, e)\n                }\n              }\n            } else {\n              // notify event: invalid - Failure validating against schema\n              self.raiseFailureEvent('invalid', obj, {\n                message: 'Document structure is invalid against schema',\n                code: 501,\n                data: {\n                  document: obj,\n                  schema: schema,\n                  reason: schema_validation\n                }\n              })\n            }\n          }\n          if (Array.isArray(objs)) {\n            objs.forEach((obj) => {\n              upsert_one(obj, this.state.data.docs, this.state.data.schema)\n            })\n          } // many\n          else {\n            upsert_one(objs, this.state.data.docs, this.state.data.schema)\n          } // one\n        }\n      },\n      delete: {\n        schema: {},\n        handler: (document_ids) => {\n          const self = this\n          function delete_one(document_id, docs) {\n            // https://firebase.google.com/docs/firestore/manage-data/delete-data\n            // validate document id\n            document_id = self.getValidDocumentId(document_id)\n            if (document_id) {\n              // Event: deleting - Pending\n              self.raiseSuccessEvent('deleting', { id: document_id })\n              const doc = docs[document_id]\n              // Do the actuall deletion\n              if (doc) {\n                // TODO: check if this exist\n                delete docs[document_id]\n                self.raiseSuccessEvent('deleted', { id: document_id })\n                // Event: deleted - Success\n                // raiseSuccessEvent('deleted', obj);\n              } else {\n                self.raiseFailureEvent('missing', { id: document_id })\n              }\n            } else {\n              self.raiseFailureEvent(\n                'invalid',\n                { id: document_id },\n                {\n                  message: 'Document identifier is invalid',\n                  code: 301,\n                  data: { id: document_id }\n                }\n              )\n            }\n          }\n          if (Array.isArray(document_ids)) {\n            document_ids.forEach((document_id) => {\n              delete_one(document_id, this.state.data.docs)\n            })\n          } // many\n          else {\n            delete_one(document_ids, this.state.data.docs)\n          } // one\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    this.ddEvent = Event.EventManager.getInstance().register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n"],"names":["triggers","insert","alias","info","name","description","schema","read","update","upsert","events","invalid","failure","inserting","inserted","reading","upserting","upserted","updating","updated","deleting","deleted","missing","StateObject","_StateLess","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","getState","data","obj_target","obj_source","mergeDeep","event_name","evt","triggerEvent","doc","document_id","undefined","obj","obj_id","id","identifier","isValidDocumentId","actionHandlers","eventHandlers","component_info","dataActionHandlers","handler","objs","self","insert_one","docs","schema_validation","isValidDocumentSchema","raiseSuccessEvent","getValidDocumentId","raiseFailureEvent","message","code","document","reason","Array","isArray","forEach","state","document_ids","read_one","e","update_one","upsert_one","deepMerge","delete_one","ddEvent","Event","EventManager","getInstance","register","_objectSpread","MemoryManager","registerMemory","_createClass","StateLess"],"mappings":"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"}