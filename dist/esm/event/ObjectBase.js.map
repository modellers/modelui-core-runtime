{"version":3,"file":"ObjectBase.js","sources":["../../../src/event/ObjectBase.js"],"sourcesContent":["// event handler\n// TODO: create another version like this one -- https://github.com/dannyconnell/localbase\nimport { StateLess } from './StateBase'\nimport Event from './Event'\nimport { mergeDeep } from '../util/ObjUtil'\nimport { MemoryManager } from '../components/Data/MemoryManager'\n\nexport const triggers = {\n  insert: {\n    alias: [],\n    info: {\n      name: 'Insert',\n      description: 'Insert object'\n    },\n    schema: {}\n  },\n  read: {\n    alias: [],\n    info: {\n      name: 'Read',\n      description: 'Read object'\n    },\n    schema: {}\n  },\n  update: {\n    alias: [],\n    info: {\n      name: 'Update',\n      description: 'Update object'\n    },\n    schema: {}\n  },\n  upsert: {\n    alias: [],\n    info: {\n      name: 'Upsert',\n      description: 'Upsert object'\n    },\n    schema: {}\n  },\n  delete: {\n    alias: [],\n    info: {\n      name: 'Delete',\n      description: 'Delete object'\n    },\n    schema: {}\n  }\n}\n\nexport const events = {\n  invalid: {\n    alias: [],\n    info: {\n      name: 'invalid',\n      description: 'Insert was invalid'\n    },\n    schema: {}\n  },\n  failure: {\n    alias: [],\n    info: {\n      name: 'failure',\n      description: 'Insert was failed'\n    },\n    schema: {}\n  },\n  inserting: {\n    alias: [],\n    info: {\n      name: 'inserting',\n      description: 'Insterting item creates or replaces'\n    },\n    schema: {}\n  },\n  inserted: {\n    alias: [],\n    info: {\n      name: 'inserted',\n      description: 'Inserted item creates or replaces'\n    },\n    schema: {}\n  },\n  reading: {\n    alias: [],\n    info: {\n      name: 'Reading',\n      description: 'Reading identifer'\n    },\n    schema: {}\n  },\n  read: {\n    alias: [],\n    info: {\n      name: 'Read',\n      description: 'Read identifer'\n    },\n    schema: {}\n  },\n  upserting: {\n    alias: [],\n    info: {\n      name: 'upserting',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  upserted: {\n    alias: [],\n    info: {\n      name: 'upserted',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  updating: {\n    alias: [],\n    info: {\n      name: 'updating',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  updated: {\n    alias: [],\n    info: {\n      name: 'updated',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  deleting: {\n    alias: [],\n    info: {\n      name: 'deleting',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  deleted: {\n    alias: [],\n    info: {\n      name: 'deleted',\n      description: 'TBD'\n    },\n    schema: {}\n  },\n  missing: {\n    alias: [],\n    info: {\n      name: 'Missing',\n      description: 'Missing read identifer'\n    },\n    schema: {}\n  }\n}\n\n// FIXME: should have state\nexport class StateObject extends StateLess {\n  /*\n    docs = data || {};\n    this.props.id = props.id;\n    schema = props.schema;\n    data = props.data;\n    */\n  // regiser so this is accessible to all transforms\n  // TODO: do this in a nicer way\n\n  constructor(props) {\n    super(props)\n    this.props = props\n    // apply initial values\n    this.state = {\n      data: { docs: props.data, schema: props.data.schema || props.schema },\n      schema: props.schema\n    }\n    // add to globally shared memory (allowing transforms to read data)\n    MemoryManager.getInstance().registerMemory(props.id, this)\n  }\n\n  getData = () => {\n    // Used by memory manager when allowing transformations to read data\n    // Specifically implemented in ObjectCollection\n    return this.getState().data\n  }\n\n  deepMerge = (obj_target, obj_source) => {\n    return mergeDeep(obj_target, obj_source) // { ...obj_target, ...obj_source }\n  }\n\n  raiseSuccessEvent = (event_name, data, evt) => {\n    this.triggerEvent(event_name, data, evt)\n  }\n\n  raiseFailureEvent = (event_name, data, evt) => {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\n    this.triggerEvent(event_name, data, evt)\n  }\n\n  isValidDocumentSchema = (doc, schema) => {\n    // returns true if doc validates against schema\n    return true\n  }\n\n  isValidDocumentId = (document_id) => {\n    return document_id !== null && document_id !== undefined\n  }\n\n  getValidDocumentId = (obj) => {\n    if (typeof obj === 'string') {\n      return obj\n    } // this is a string id\n    const obj_id = obj.id || obj.identifier\n    if (this.isValidDocumentId(obj_id)) {\n      return obj_id\n    }\n    return null\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    // register componenet overiding or adding new event handlers\n    const dataActionHandlers = {\n      insert: {\n        schema: {},\n        handler: (objs) => {\n          const self = this\n          function insert_one(obj, docs, schema) {\n            // https://firebase.google.com/docs/firestore/manage-data/add-data\n            const schema_validation = self.isValidDocumentSchema(obj, schema)\n            if (schema_validation) {\n              // notify event: creating - Pending\n              self.raiseSuccessEvent('inserting', obj)\n              // create the id\n              const document_id = self.getValidDocumentId(obj)\n              docs[document_id] = obj\n              self.raiseSuccessEvent('inserted', obj)\n              // TODO: Event: created - Success\n              // TODO: Event: exists - Failure\n              // TODO: Event: failure - Failure\n            } else {\n              // notify event: invalid - Failure validating against schema\n              self.raiseFailureEvent('invalid', obj, {\n                message: 'Document structure is invalid against schema',\n                code: 501,\n                data: {\n                  document: obj,\n                  schema: schema,\n                  reason: schema_validation\n                }\n              })\n            }\n          }\n          if (Array.isArray(objs)) {\n            objs.forEach((obj) => {\n              insert_one(obj, self.state.data.docs, self.state.data.schema)\n            })\n          } // many\n          else {\n            insert_one(objs, self.state.data.docs)\n          } // one\n        }\n      },\n      read: {\n        schema: {},\n        handler: (document_ids) => {\n          // https://firebase.google.com/docs/firestore/query-data/get-data\n          // validate document id\n          const self = this\n          function read_one(document_id, docs) {\n            document_id = self.getValidDocumentId(document_id)\n            if (!document_id) {\n              self.raiseFailureEvent(\n                'invalid',\n                { id: document_id },\n                {\n                  message: 'Document identifier is invalid',\n                  code: 301,\n                  data: { id: document_id }\n                }\n              )\n            } else {\n              // notify event: reading - Pending\n              self.raiseSuccessEvent('reading', { id: document_id })\n              const obj = docs[document_id]\n              if (obj) {\n                // notify event: read - Success\n                try {\n                  self.raiseSuccessEvent('read', obj)\n                } catch (e) {\n                  self.raiseFailureEvent('failure', { id: document_id }, e)\n                }\n              } else {\n                // notify event: missing - Failure\n                self.raiseFailureEvent(\n                  'missing',\n                  { id: document_id },\n                  {\n                    message: 'Document identifier is invalid',\n                    code: 401,\n                    data: { id: document_id }\n                  }\n                )\n              }\n            }\n          }\n          if (Array.isArray(document_ids)) {\n            document_ids.forEach((document_id) => {\n              read_one(\n                document_id,\n                this.state.data.docs,\n                this.state.data.schema\n              )\n            })\n          } // many\n          else {\n            read_one(document_ids, this.state.data.docs)\n          } // one\n        }\n      },\n      update: {\n        schema: {},\n        handler: (objs) => {\n          const self = this\n          function update_one(obj, docs, schema) {\n            // validate obj against schema\n            const schema_validation = self.isValidDocumentSchema(obj, schema)\n            if (schema_validation) {\n              // TODO: Event: invalidated - Failure validating against schema\n              // notify event: updating - Pending\n              const document_id = self.getValidDocumentId(obj)\n              self.raiseSuccessEvent('updating', obj)\n              if (document_id) {\n                const doc = docs[document_id]\n                if (doc) {\n                  try {\n                    docs[document_id] = mergeDeep(doc || {}, obj)\n                    self.raiseSuccessEvent('updated', docs[document_id])\n                  } catch (e) {\n                    self.raiseFailureEvent('error', obj)\n                  }\n                } else {\n                  // notify event: missing - Failure\n                  self.raiseFailureEvent(\n                    'missing',\n                    { id: document_id, data: docs },\n                    {}\n                  )\n                  // TODO: Event: failure - Failure\n                }\n              } else {\n                self.raiseFailureEvent('invalid', obj, {\n                  message: 'Document identifier is invalid',\n                  code: 301,\n                  data: document_id\n                })\n              }\n            } else {\n            }\n          }\n          if (Array.isArray(objs)) {\n            objs.forEach((obj) => {\n              update_one(obj, this.state.data.docs, this.state.data.schema)\n            })\n          } // many\n          else {\n            update_one(objs, this.state.data.docs, this.state.data.schema)\n          } // one\n        }\n      },\n      upsert: {\n        schema: {},\n        handler: (objs) => {\n          const self = this\n          function upsert_one(obj, docs, schema) {\n            // validate document id\n            const schema_validation = self.isValidDocumentSchema(obj, schema)\n            if (schema_validation) {\n              // Event: upserting - Pending\n              self.raiseSuccessEvent('upserting', obj)\n              const document_id = self.getValidDocumentId(obj)\n              if (document_id) {\n                const doc = docs[document_id]\n                try {\n                  docs[document_id] = self.deepMerge(doc || {}, obj)\n                  self.raiseSuccessEvent('upserted', docs[document_id])\n                } catch (e) {\n                  self.raiseFailureEvent('failure', obj, e)\n                }\n              }\n            } else {\n              // notify event: invalid - Failure validating against schema\n              self.raiseFailureEvent('invalid', obj, {\n                message: 'Document structure is invalid against schema',\n                code: 501,\n                data: {\n                  document: obj,\n                  schema: schema,\n                  reason: schema_validation\n                }\n              })\n            }\n          }\n          if (Array.isArray(objs)) {\n            objs.forEach((obj) => {\n              upsert_one(obj, this.state.data.docs, this.state.data.schema)\n            })\n          } // many\n          else {\n            upsert_one(objs, this.state.data.docs, this.state.data.schema)\n          } // one\n        }\n      },\n      delete: {\n        schema: {},\n        handler: (document_ids) => {\n          const self = this\n          function delete_one(document_id, docs) {\n            // https://firebase.google.com/docs/firestore/manage-data/delete-data\n            // validate document id\n            document_id = self.getValidDocumentId(document_id)\n            if (document_id) {\n              // Event: deleting - Pending\n              self.raiseSuccessEvent('deleting', { id: document_id })\n              const doc = docs[document_id]\n              // Do the actuall deletion\n              if (doc) {\n                // TODO: check if this exist\n                delete docs[document_id]\n                self.raiseSuccessEvent('deleted', { id: document_id })\n                // Event: deleted - Success\n                // raiseSuccessEvent('deleted', obj);\n              } else {\n                self.raiseFailureEvent('missing', { id: document_id })\n              }\n            } else {\n              self.raiseFailureEvent(\n                'invalid',\n                { id: document_id },\n                {\n                  message: 'Document identifier is invalid',\n                  code: 301,\n                  data: { id: document_id }\n                }\n              )\n            }\n          }\n          if (Array.isArray(document_ids)) {\n            document_ids.forEach((document_id) => {\n              delete_one(document_id, this.state.data.docs)\n            })\n          } // many\n          else {\n            delete_one(document_ids, this.state.data.docs)\n          } // one\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    this.ddEvent = Event.EventManager.getInstance().register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n"],"names":["triggers","insert","alias","info","name","description","schema","read","update","upsert","delete","events","invalid","failure","inserting","inserted","reading","upserting","upserted","updating","updated","deleting","deleted","missing","StateObject","_StateLess","_inherits","StateLess","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","getState","data","obj_target","obj_source","mergeDeep","event_name","evt","triggerEvent","doc","document_id","obj","obj_id","id","identifier","isValidDocumentId","actionHandlers","eventHandlers","component_info","dataActionHandlers","handler","objs","self","insert_one","docs","schema_validation","isValidDocumentSchema","raiseSuccessEvent","getValidDocumentId","raiseFailureEvent","message","code","document","reason","Array","isArray","forEach","state","document_ids","read_one","e","update_one","upsert_one","deepMerge","delete_one","ddEvent","Event","EventManager","getInstance","register","_objectSpread","MemoryManager","registerMemory","_createClass"],"mappings":"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"}