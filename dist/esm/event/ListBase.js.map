{"version":3,"file":"ListBase.js","sources":["../../../src/event/ListBase.js"],"sourcesContent":["// common tools\nimport StateBase from './StateBase'\nimport StateBaseComponent from './StateBaseComponent'\nimport {\n  findItemIndexById,\n  removeItemIndexByIndex,\n  mergeDeep\n} from '../util/ObjUtil'\n// event handler\n// import Event from './Event'\n\nconst schema_only_id = {\n  // \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  $id: 'v1/listbase/..',\n  type: 'array',\n  items: {\n    $ref: '#/definitions/identifier'\n  },\n  definitions: {\n    identifier: {\n      type: 'object',\n      additionalProperties: true,\n      properties: {\n        id: {\n          type: 'string'\n        }\n      },\n      required: ['id'],\n      title: 'Identifier with additional properties'\n    }\n  }\n}\n\nexport const triggers = {\n  submit: {\n    alias: [],\n    info: {\n      name: 'Submit',\n      description: 'Submit entire list'\n    },\n    schema: {}\n  },\n  replace: {\n    alias: [],\n    info: {\n      name: 'Replace',\n      description: 'Replace data'\n    },\n    schema: {}\n  },\n  push: {\n    alias: [],\n    info: {\n      name: 'Push',\n      description: 'Adds data at the end to component'\n    },\n    schema: {}\n  },\n  push_front: {\n    alias: [],\n    info: {\n      name: 'Push front',\n      description: 'Adds data to the front of the component'\n    },\n    schema: {}\n  },\n  delete: {\n    alias: [],\n    info: {\n      name: 'Delete data instance',\n      description: 'Removes data from the component'\n    },\n    schema: { ...schema_only_id, $id: 'v1/listbase/delete' }\n  },\n  pop: {\n    alias: [],\n    info: {\n      name: 'Pop back item',\n      description: 'Deletes / removes back data item'\n    },\n    schema: {}\n  },\n  pop_front: {\n    alias: [],\n    info: {\n      name: 'Pop front item',\n      description: 'Deletes / removes front data item'\n    },\n    schema: {}\n  },\n  select: {\n    alias: [],\n    info: {\n      name: 'Select item',\n      description: 'Selects the data item'\n    },\n    schema: { ...schema_only_id, $id: 'v1/listbase/select' }\n  },\n  clear: {\n    alias: [],\n    info: {\n      name: 'Clear items',\n      description: 'Removes all items from list'\n    },\n    schema: {}\n  }\n}\n\nexport const events = {\n  changed: {\n    alias: [],\n    info: {\n      name: 'changed',\n      description: 'Changed size'\n    },\n    schema: {}\n  },\n  replacing: {\n    alias: [],\n    info: {\n      name: 'replacing',\n      description: 'Replacing content'\n    },\n    schema: {}\n  },\n  replaced: {\n    alias: [],\n    info: {\n      name: 'replaced',\n      description: 'Replace content'\n    },\n    schema: {}\n  },\n  submitted: {\n    alias: [],\n    info: {\n      name: 'Submitted',\n      description: 'Subbited all items in list'\n    },\n    schema: {}\n  },\n  deleted: {\n    alias: [],\n    info: {\n      name: 'Deleted',\n      description: 'Deleted specified items'\n    },\n    schema: {}\n  },\n  pushing: {\n    alias: [],\n    info: {\n      name: 'Pusing',\n      description: 'Pushing item in front of list'\n    },\n    schema: {}\n  },\n  pushed: {\n    alias: [],\n    info: {\n      name: 'Pushed',\n      description: 'Pushed item in front of list'\n    },\n    schema: {}\n  },\n  selected: {\n    alias: [],\n    info: {\n      name: 'Selected',\n      description: 'Selecting item'\n    },\n    schema: { ...schema_only_id, $id: 'v1/listbase/selected' }\n  },\n  deselected: {\n    alias: [],\n    info: {\n      name: 'De-Selected',\n      description: 'Unselecting item'\n    },\n    schema: {}\n  },\n  clearing: {\n    alias: [],\n    info: {\n      name: 'Clearing',\n      description: 'Removing all items'\n    },\n    schema: {}\n  },\n  cleared: {\n    alias: [],\n    info: {\n      name: 'Cleared',\n      description: 'Removed all items'\n    },\n    schema: {}\n  }\n}\n\nexport class StateList extends StateBase.StateInstance {\n  constructor(props) {\n    super(props)\n    this.props = props\n    // ensure array\n    let _data = []\n    if (props.data) {\n      if (Array.isArray(props.data)) {\n        _data = props.data\n      } else {\n        // check if this is an empty object\n        if (typeof props.data === 'object') {\n          // objects should not be empty\n          if (props.data.length) {\n            _data = [props.data]\n          }\n        } else {\n          _data = [props.data]\n        }\n      }\n    }\n    // apply default values\n    this.state = { data: _data || [], selectedIndex: 0, selectedId: null }\n\n    if (!this.props.manager) {\n      throw new Error('Manager was not passed through StateList props')\n    }\n\n    this.eventManager = this.props.manager.getEventManager()\n  }\n\n  findItemIndexById = (id, data) => {\n    return findItemIndexById(id, data)\n  }\n\n  updateItem = (id, props) => {\n    const idx = this.findItemIndexById(id, this.state.data)\n    const updated = [...this.state.data] // copy\n    // TODO: validate props against schema\n    if (idx >= 0) {\n      for (const [key, value] of Object.entries(props)) {\n        updated[idx][key] = value\n      }\n      this.setState({ ...this.state, data: updated })\n    }\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    const dataActionHandlers = {\n      submit: {\n        schema: {},\n        handler: (objs) => {\n          // submit\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'submitted',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n        }\n      },\n      replace: {\n        schema: {},\n        handler: (objs) => {\n          // append\n          const data_state = this.state.data || []\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replacing',\n            { count: data_state.length, old: data_state, new: objs },\n            {}\n          )\n          const data = objs\n          if (this.updateView('replace', [], [], data)) {\n            this.setState({ ...this.state, data: data })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replaced',\n            { count: data.length, items: data },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data },\n            {}\n          )\n        }\n      },\n      push: {\n        schema: {},\n        handler: (objs) => {\n          // append\n          const data_added = []\n          const data_updated = [] // contains ids\n          const data_state = this.state.data || []\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, data_state)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = mergeDeep(data_state[idx], obj) // TODO: fetch from utils\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = { selectedId: obj.id, selectedIndex: idx }\n            }\n          })\n          const data = [...data_state, ...data_added]\n          // notify parent class of push event\n          try {\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(this.props.id, 'pushing', data_added, {})\n            if (this.updateView('push', data_added, data_updated, data)) {\n              this.setState({ ...this.state, ...selected, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('push', e)\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'pushed',\n            { count: data.length, items: data, added: data_added },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            {\n              count: data.length,\n              items: data,\n              added: data_added,\n              updated: data_updated\n            },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      push_front: {\n        schema: {},\n        handler: (objs) => {\n          const data_added = []\n          const data_updated = []\n          const data_state = this.state.data || []\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, this.state.data)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = obj\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = {\n                selectedId: obj.id,\n                selectedIndex: idx || data_added.length - 1\n              }\n            }\n          })\n          const data = [...data_added, ...data_state]\n          if (this.updateView('push_front', [], data_updated, data)) {\n            this.setState({ ...this.state, ...selected, data: data })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      delete: {\n        schema: {},\n        handler: (objs) => {\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          let data = this.state.data\n          const data_updated = []\n          const deleting = []\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, data)\n              if (idx !== null) {\n                deleting.push(obj.id)\n                data = removeItemIndexByIndex(idx, data)\n                data_updated.push(idx)\n              }\n            }\n          })\n          try {\n            if (this.updateView('delete', [], data_updated, data)) {\n              this.setState({ ...this.state, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('delete', e)\n          }\n\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data, deleted: deleting },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'deleted',\n            { count: deleting.length, items: data, deleted: deleting },\n            {}\n          )\n        }\n      },\n      pop: {\n        schema: {},\n        handler: (obj) => {\n          if (this.state.data.length > 0) {\n            const data = this.state.data.slice()\n            const data_removed = data.splice(data.length - 1, 1) // remove item\n            if (this.updateView('pop', [], data_removed, data)) {\n              this.setState({ ...this.state, data: data })\n              // Event.EventManager.getInstance().addEvent(\n              this.ddEvent = this.eventManager.addEvent(\n                this.props.id,\n                'changed',\n                { count: this.state.data.length, items: this.state.data },\n                {}\n              )\n            }\n          }\n        }\n      },\n      pop_front: {\n        schema: {},\n        handler: (obj) => {\n          if (this.state.data.length > 0) {\n            const data = this.state.data.slice()\n            const data_removed = data.splice(0, 1)\n            if (this.updateView('pop_front', [], data_removed, data)) {\n              this.setState({ ...this.state, data: data })\n              // Event.EventManager.getInstance().addEvent(\n              this.ddEvent = this.eventManager.addEvent(\n                this.props.id,\n                'changed',\n                { count: this.state.data.length, items: this.state.data },\n                {}\n              )\n            }\n          }\n        }\n      },\n      select: {\n        schema: {},\n        handler: (objs) => {\n          const data_updated = []\n          const selected = []\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          // allow only one selection\n          for (let i = 0; i < this.state.data.length; i++) {\n            this.state.data[i].selected = false\n          }\n          // find selected\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, this.state.data)\n              if (idx !== null) {\n                this.state.data[idx].selected = !this.state.data[idx].selected\n                this.state.selectedId = this.state.data[idx].id\n                this.state.selectedIndex = idx\n                data_updated.push(idx)\n                selected.push(this.state.data[idx])\n              }\n            }\n          })\n          // for now we just replace the state\n          this.setState({ ...this.state, data: this.state.data })\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'selecting',\n            objs,\n            null\n          )\n          if (this.updateView('select', objs, data_updated, this.state)) {\n            // Event.EventManager.getInstance().addEvent(\n            this.ddEvent = this.eventManager.addEvent(\n              this.props.id,\n              'selected',\n              selected,\n              null\n            )\n          }\n        }\n      },\n      clear: {\n        schema: {},\n        handler: (obj) => {\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'clearing',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.setState({ ...this.state, data: [] })\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'cleared',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.updateView('clear', [], [], [])\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    // this.ddEvent = Event.EventManager.getInstance().register(\n    this.ddEvent = this.eventManager.register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n\nexport class ListBase extends StateBaseComponent.StateBaseComponent {\n  /**\n   * Used to manage internal state of avatars\n   */\n  constructor(props) {\n    if (!props.config.options) {\n      props.config.options = {}\n    }\n    super(props)\n    this.props = props\n  }\n\n  updateView = (action, arr, updated, data) => {\n    // extend by parent\n    return true\n  }\n\n  exceptionCatched = (action_name, event_object) => {\n    // console.info('ListBase: ' + action_name + ' --> ', event_object)\n  }\n\n  findItemIndexById = (id, data) => {\n    if (this.stateManager) {\n      return this.stateManager.findItemIndexById(id, data)\n    }\n  }\n\n  updateItem = (id, props, silent) => {\n    if (silent) {\n      return this.updateItemSilent(id, props)\n    } else {\n      return this.triggerAction('push', { ...props, id: id })\n    }\n  }\n\n  updateItemSilent = (id, props) => {\n    if (this.stateManager) {\n      return this.stateManager.updateItem(id, props)\n    }\n  }\n\n  getData = () => {\n    return this.state.data\n  }\n\n  showSelectedRow = (row) => {\n    if (this.props.config.options.select) {\n      return row.selected\n    }\n    return false\n  }\n\n  showSelected = (id, idx) => {\n    // parent implementation to update the visual representation\n    return true // returns true to update state. Else do not update state.\n  }\n\n  setSelectedId = (id, evt, selected) => {\n    // Event.EventManager.getInstance().addAction(this.props.id, 'select', { id: id });\n    this.triggerAction('select', { id: id })\n  }\n\n  getSelectedId = () => {\n    const selected = []\n    this.state.data.forEach((itm) => {\n      if (itm.selected) {\n        selected.push(itm.id)\n      }\n    })\n    return selected\n  }\n\n  getItemTreeState = () => {\n    const selected = []\n    const expanded = []\n    this.state.data.forEach((itm) => {\n      if (itm.selected) {\n        selected.push(itm.id)\n      }\n      if (itm.expanded) {\n        expanded.push(itm.id)\n      }\n    })\n    return {\n      selected: selected,\n      expanded: expanded,\n      focused: this.state.selectedId\n    }\n  }\n\n  handleSelect = (key, data, index, evt) => {\n    if (!evt) {\n      this.setSelectedId(data.id, evt)\n    }\n  }\n\n  render() {\n    return null\n  }\n}\n/*\nmodule.exports.triggers = triggers\nmodule.exports.events = events\nmodule.exports.StateList = StateList\nmodule.exports.ListBase = ListBase\n*/\nexport default { events, triggers, StateList, ListBase }\n"],"names":["schema_only_id","$id","type","items","$ref","definitions","identifier","additionalProperties","properties","id","required","title","triggers","submit","alias","info","name","description","schema","replace","push","push_front","delete","_objectSpread","pop","pop_front","select","clear","events","changed","replacing","replaced","submitted","deleted","pushing","pushed","selected","deselected","clearing","cleared","StateList","_StateBase$StateInsta","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","data","findItemIndexById","idx","state","updated","_toConsumableArray","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","key","value","setState","actionHandlers","eventHandlers","component_info","dataActionHandlers","handler","objs","eventManager","addEvent","count","data_state","Array","isArray","old","new","updateView","data_added","data_updated","forEach","obj","mergeDeep","selectedId","selectedIndex","concat","e","exceptionCatched","added","ddEvent","deleting","removeItemIndexByIndex","slice","data_removed","splice","i","register","_data","_typeof","manager","Error","getEventManager","_createClass","StateBase","StateInstance","ListBase","_StateBaseComponent$S","_super2","_this2","config","options","action","arr","action_name","event_object","stateManager","silent","updateItemSilent","triggerAction","updateItem","row","evt","itm","expanded","focused","index","setSelectedId","StateBaseComponent","ListBase$1"],"mappings":"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"}