{"version":3,"file":"ListBase.js","sources":["../../../src/event/ListBase.js"],"sourcesContent":["// common tools\nimport StateBase from './StateBase'\nimport StateBaseComponent from './StateBaseComponent'\nimport {\n  findItemIndexById,\n  removeItemIndexByIndex,\n  mergeDeep\n} from '../util/ObjUtil'\n// event handler\n// import Event from './Event'\n\nconst schema_only_id = {\n  // \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  $id: 'v1/listbase/..',\n  type: 'array',\n  items: {\n    $ref: '#/definitions/identifier'\n  },\n  definitions: {\n    identifier: {\n      type: 'object',\n      additionalProperties: true,\n      properties: {\n        id: {\n          type: 'string'\n        }\n      },\n      required: ['id'],\n      title: 'Identifier with additional properties'\n    }\n  }\n}\n\nexport const triggers = {\n  submit: {\n    alias: [],\n    info: {\n      name: 'Submit',\n      description: 'Submit entire list'\n    },\n    schema: {}\n  },\n  replace: {\n    alias: [],\n    info: {\n      name: 'Replace',\n      description: 'Replace data'\n    },\n    schema: {}\n  },\n  push: {\n    alias: [],\n    info: {\n      name: 'Push',\n      description: 'Adds data at the end to component'\n    },\n    schema: {}\n  },\n  push_front: {\n    alias: [],\n    info: {\n      name: 'Push front',\n      description: 'Adds data to the front of the component'\n    },\n    schema: {}\n  },\n  delete: {\n    alias: [],\n    info: {\n      name: 'Delete data instance',\n      description: 'Removes data from the component'\n    },\n    schema: { ...schema_only_id, $id: 'v1/listbase/delete' }\n  },\n  pop: {\n    alias: [],\n    info: {\n      name: 'Pop back item',\n      description: 'Deletes / removes back data item'\n    },\n    schema: {}\n  },\n  pop_front: {\n    alias: [],\n    info: {\n      name: 'Pop front item',\n      description: 'Deletes / removes front data item'\n    },\n    schema: {}\n  },\n  select: {\n    alias: [],\n    info: {\n      name: 'Select item',\n      description: 'Selects the data item'\n    },\n    schema: { ...schema_only_id, $id: 'v1/listbase/select' }\n  },\n  clear: {\n    alias: [],\n    info: {\n      name: 'Clear items',\n      description: 'Removes all items from list'\n    },\n    schema: {}\n  }\n}\n\nexport const events = {\n  changed: {\n    alias: [],\n    info: {\n      name: 'changed',\n      description: 'Changed size'\n    },\n    schema: {}\n  },\n  replacing: {\n    alias: [],\n    info: {\n      name: 'replacing',\n      description: 'Replacing content'\n    },\n    schema: {}\n  },\n  replaced: {\n    alias: [],\n    info: {\n      name: 'replaced',\n      description: 'Replace content'\n    },\n    schema: {}\n  },\n  submitted: {\n    alias: [],\n    info: {\n      name: 'Submitted',\n      description: 'Subbited all items in list'\n    },\n    schema: {}\n  },\n  deleted: {\n    alias: [],\n    info: {\n      name: 'Deleted',\n      description: 'Deleted specified items'\n    },\n    schema: {}\n  },\n  pushing: {\n    alias: [],\n    info: {\n      name: 'Pusing',\n      description: 'Pushing item in front of list'\n    },\n    schema: {}\n  },\n  pushed: {\n    alias: [],\n    info: {\n      name: 'Pushed',\n      description: 'Pushed item in front of list'\n    },\n    schema: {}\n  },\n  selected: {\n    alias: [],\n    info: {\n      name: 'Selected',\n      description: 'Selecting item'\n    },\n    schema: { ...schema_only_id, $id: 'v1/listbase/selected' }\n  },\n  deselected: {\n    alias: [],\n    info: {\n      name: 'De-Selected',\n      description: 'Unselecting item'\n    },\n    schema: {}\n  },\n  clearing: {\n    alias: [],\n    info: {\n      name: 'Clearing',\n      description: 'Removing all items'\n    },\n    schema: {}\n  },\n  cleared: {\n    alias: [],\n    info: {\n      name: 'Cleared',\n      description: 'Removed all items'\n    },\n    schema: {}\n  }\n}\n\nexport class StateList extends StateBase.StateInstance {\n  constructor(props) {\n    super(props)\n    this.props = props\n    // ensure array\n    let _data = []\n    if (props.data) {\n      if (Array.isArray(props.data)) {\n        _data = props.data\n      } else {\n        // check if this is an empty object\n        if (typeof props.data === 'object') {\n          // objects should not be empty\n          if (props.data.length) {\n            _data = [props.data]\n          }\n        } else {\n          _data = [props.data]\n        }\n      }\n    }\n    // apply default values\n    this.state = { data: _data || [], selectedIndex: 0, selectedId: null }\n\n    if (!this.props.manager) {\n      throw new Error('Manager was not passed through StateList props')\n    }\n\n    this.eventManager = this.props.manager.getEventManager()\n  }\n\n  findItemIndexById = (id, data) => {\n    return findItemIndexById(id, data)\n  }\n\n  updateItem = (id, props) => {\n    const idx = this.findItemIndexById(id, this.state.data)\n    const updated = [...this.state.data] // copy\n    // TODO: validate props against schema\n    if (idx >= 0) {\n      for (const [key, value] of Object.entries(props)) {\n        updated[idx][key] = value\n      }\n      this.setState({ ...this.state, data: updated })\n    }\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    const dataActionHandlers = {\n      submit: {\n        schema: {},\n        handler: (objs) => {\n          // submit\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'submitted',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n        }\n      },\n      replace: {\n        schema: {},\n        handler: (objs) => {\n          // append\n          const data_state = this.state.data || []\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replacing',\n            { count: data_state.length, old: data_state, new: objs },\n            {}\n          )\n          const data = objs\n          if (this.updateView('replace', [], [], data)) {\n            this.setState({ ...this.state, data: data })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replaced',\n            { count: data.length, items: data },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data },\n            {}\n          )\n        }\n      },\n      push: {\n        schema: {},\n        handler: (objs) => {\n          // append\n          const data_added = []\n          const data_updated = [] // contains ids\n          const data_state = this.state.data || []\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, data_state)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = mergeDeep(data_state[idx], obj) // TODO: fetch from utils\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = { selectedId: obj.id, selectedIndex: idx }\n            }\n          })\n          const data = [...data_state, ...data_added]\n          // notify parent class of push event\n          try {\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(this.props.id, 'pushing', data_added, {})\n            if (this.updateView('push', data_added, data_updated, data)) {\n              this.setState({ ...this.state, ...selected, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('push', e)\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'pushed',\n            { count: data.length, items: data, added: data_added },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            {\n              count: data.length,\n              items: data,\n              added: data_added,\n              updated: data_updated\n            },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      push_front: {\n        schema: {},\n        handler: (objs) => {\n          const data_added = []\n          const data_updated = []\n          const data_state = this.state.data || []\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, this.state.data)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = obj\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = {\n                selectedId: obj.id,\n                selectedIndex: idx || data_added.length - 1\n              }\n            }\n          })\n          const data = [...data_added, ...data_state]\n          if (this.updateView('push_front', [], data_updated, data)) {\n            this.setState({ ...this.state, ...selected, data: data })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      delete: {\n        schema: {},\n        handler: (objs) => {\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          let data = this.state.data\n          const data_updated = []\n          const deleting = []\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, data)\n              if (idx !== null) {\n                deleting.push(obj.id)\n                data = removeItemIndexByIndex(idx, data)\n                data_updated.push(idx)\n              }\n            }\n          })\n          try {\n            if (this.updateView('delete', [], data_updated, data)) {\n              this.setState({ ...this.state, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('delete', e)\n          }\n\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data, deleted: deleting },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'deleted',\n            { count: deleting.length, items: data, deleted: deleting },\n            {}\n          )\n        }\n      },\n      pop: {\n        schema: {},\n        handler: (obj) => {\n          if (this.state.data.length > 0) {\n            const data = this.state.data.slice()\n            const data_removed = data.splice(data.length - 1, 1) // remove item\n            if (this.updateView('pop', [], data_removed, data)) {\n              this.setState({ ...this.state, data: data })\n              // Event.EventManager.getInstance().addEvent(\n              this.ddEvent = this.eventManager.addEvent(\n                this.props.id,\n                'changed',\n                { count: this.state.data.length, items: this.state.data },\n                {}\n              )\n            }\n          }\n        }\n      },\n      pop_front: {\n        schema: {},\n        handler: (obj) => {\n          if (this.state.data.length > 0) {\n            const data = this.state.data.slice()\n            const data_removed = data.splice(0, 1)\n            if (this.updateView('pop_front', [], data_removed, data)) {\n              this.setState({ ...this.state, data: data })\n              // Event.EventManager.getInstance().addEvent(\n              this.ddEvent = this.eventManager.addEvent(\n                this.props.id,\n                'changed',\n                { count: this.state.data.length, items: this.state.data },\n                {}\n              )\n            }\n          }\n        }\n      },\n      select: {\n        schema: {},\n        handler: (objs) => {\n          const data_updated = []\n          const selected = []\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          // allow only one selection\n          for (let i = 0; i < this.state.data.length; i++) {\n            this.state.data[i].selected = false\n          }\n          // find selected\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, this.state.data)\n              if (idx !== null) {\n                this.state.data[idx].selected = !this.state.data[idx].selected\n                this.state.selectedId = this.state.data[idx].id\n                this.state.selectedIndex = idx\n                data_updated.push(idx)\n                selected.push(this.state.data[idx])\n              }\n            }\n          })\n          // for now we just replace the state\n          this.setState({ ...this.state, data: this.state.data })\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'selecting',\n            objs,\n            null\n          )\n          if (this.updateView('select', objs, data_updated, this.state)) {\n            // Event.EventManager.getInstance().addEvent(\n            this.ddEvent = this.eventManager.addEvent(\n              this.props.id,\n              'selected',\n              selected,\n              null\n            )\n          }\n        }\n      },\n      clear: {\n        schema: {},\n        handler: (obj) => {\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'clearing',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.setState({ ...this.state, data: [] })\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'cleared',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.updateView('clear', [], [], [])\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    // this.ddEvent = Event.EventManager.getInstance().register(\n    this.ddEvent = this.eventManager.register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n\nexport class ListBase extends StateBaseComponent.StateBaseComponent {\n  /**\n   * Used to manage internal state of avatars\n   */\n  constructor(props) {\n    if (!props.config.options) {\n      props.config.options = {}\n    }\n    super(props)\n    this.props = props\n  }\n\n  updateView = (action, arr, updated, data) => {\n    // extend by parent\n    return true\n  }\n\n  exceptionCatched = (action_name, event_object) => {\n    // console.info('ListBase: ' + action_name + ' --> ', event_object)\n  }\n\n  findItemIndexById = (id, data) => {\n    if (this.stateManager) {\n      return this.stateManager.findItemIndexById(id, data)\n    }\n  }\n\n  updateItem = (id, props, silent) => {\n    if (silent) {\n      return this.updateItemSilent(id, props)\n    } else {\n      return this.triggerAction('push', { ...props, id: id })\n    }\n  }\n\n  updateItemSilent = (id, props) => {\n    if (this.stateManager) {\n      return this.stateManager.updateItem(id, props)\n    }\n  }\n\n  getData = () => {\n    return this.state.data\n  }\n\n  showSelectedRow = (row) => {\n    if (this.props.config.options.select) {\n      return row.selected\n    }\n    return false\n  }\n\n  showSelected = (id, idx) => {\n    // parent implementation to update the visual representation\n    return true // returns true to update state. Else do not update state.\n  }\n\n  setSelectedId = (id, evt, selected) => {\n    // Event.EventManager.getInstance().addAction(this.props.id, 'select', { id: id });\n    this.triggerAction('select', { id: id })\n  }\n\n  getSelectedId = () => {\n    const selected = []\n    this.state.data.forEach((itm) => {\n      if (itm.selected) {\n        selected.push(itm.id)\n      }\n    })\n    return selected\n  }\n\n  getItemTreeState = () => {\n    const selected = []\n    const expanded = []\n    this.state.data.forEach((itm) => {\n      if (itm.selected) {\n        selected.push(itm.id)\n      }\n      if (itm.expanded) {\n        expanded.push(itm.id)\n      }\n    })\n    return {\n      selected: selected,\n      expanded: expanded,\n      focused: this.state.selectedId\n    }\n  }\n\n  handleSelect = (key, data, index, evt) => {\n    if (!evt) {\n      this.setSelectedId(data.id, evt)\n    }\n  }\n\n  render() {\n    return null\n  }\n}\n/*\nmodule.exports.triggers = triggers\nmodule.exports.events = events\nmodule.exports.StateList = StateList\nmodule.exports.ListBase = ListBase\n*/\nexport default { events, triggers, StateList, ListBase }\n"],"names":["schema_only_id","$id","type","items","$ref","definitions","identifier","additionalProperties","properties","id","required","title","triggers","submit","alias","info","name","description","schema","replace","push","push_front","_objectSpread","pop","pop_front","select","clear","events","changed","replacing","replaced","submitted","deleted","pushing","pushed","selected","deselected","clearing","cleared","StateList","_StateBase$StateInsta","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","data","findItemIndexById","idx","state","updated","_toConsumableArray","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","key","value","setState","actionHandlers","eventHandlers","component_info","dataActionHandlers","handler","objs","eventManager","addEvent","count","data_state","Array","isArray","old","updateView","data_added","data_updated","forEach","obj","mergeDeep","selectedId","selectedIndex","concat","e","exceptionCatched","added","ddEvent","deleting","removeItemIndexByIndex","slice","data_removed","splice","i","register","_data","_typeof","manager","Error","getEventManager","_createClass","StateBase","StateInstance","ListBase","_StateBaseComponent$S","_super2","_this2","config","options","action","arr","action_name","event_object","stateManager","silent","updateItemSilent","triggerAction","updateItem","row","evt","itm","expanded","focused","index","setSelectedId","render","StateBaseComponent"],"mappings":"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"}