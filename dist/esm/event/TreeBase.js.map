{"version":3,"file":"TreeBase.js","sources":["../../../src/event/TreeBase.js"],"sourcesContent":["// utils\nimport { getFlatDataFromTree, getTreeFromFlatData } from '../util/TreeUtil'\n// base list\nimport {\n  StateList,\n  ListBase,\n  events as baseEvents,\n  triggers as baseTriggers\n} from './ListBase'\n\nconst treeTriggers = {\n  /*\n  expand: {\n    alias: [],\n    info: {\n      name: 'Expand',\n      description: 'Adds data at the end to component'\n    },\n    schema: {}\n  },\n  collapse: {\n    alias: [],\n    info: {\n      name: 'Collapse',\n      description: 'Adds data to the front of the component'\n    },\n    schema: {}\n  }\n  */\n}\n\nconst treeEvents = {\n  /*\n  expanded: {\n    alias: [],\n    info: {\n      name: 'Expanded',\n      description: 'Expanded item'\n    },\n    schema: {} \n  },\n  collapsed: {\n    alias: [],\n    info: {\n      name: 'Collapsed',\n      description: 'Collapsed item'\n    },\n    schema: {}\n  }\n  */\n}\n\nexport const events = {\n  ...baseEvents,\n  ...treeEvents\n}\nexport const triggers = {\n  ...baseTriggers,\n  ...treeTriggers\n}\n\nexport const StateTree = StateList\n\nexport class TreeBase extends ListBase {\n  constructor(props) {\n    super(props)\n    // add a separate tree state\n    this.state.tree = this.getTreeFromList()\n  }\n\n  getTreeFromList = (data) => {\n    let _data = data\n    if (!_data) {\n      _data = this.state.data\n    }\n    return getTreeFromFlatData({\n      flatData: _data,\n      getKey: (itm) => {\n        return itm.id\n      },\n      getParentKey: (itm) => {\n        return itm.parent\n      },\n      rootKey: this.props.config.options.rootId || null\n    })\n  }\n\n  getListFromTree = (tree) => {\n    let _tree = tree\n    if (!_tree) {\n      _tree = this.state.tree\n    }\n    const flatData = getFlatDataFromTree({\n      treeData: _tree,\n      getNodeKey: (itm) => {\n        return itm.id\n      },\n      ignoreCollapsed: false\n    })\n    const data = []\n    flatData.forEach((item) => {\n      const itm = { ...item.node }\n      if (item.parentNode === null) {\n        itm.parent = null // null;\n      } else {\n        itm.parent = item.parentNode.id\n      }\n      delete itm.children\n      data.push(itm)\n    })\n    return data\n  }\n\n  getPathToNodeById = (id) => {\n    const idx = this.findItemIndexById(id)\n    if (idx === null) {\n    } else {\n      const itm = this.state.data[idx]\n      if (itm.parent !== null) {\n        return this.getPathToNodeById(itm.parent)\n      }\n    }\n  }\n}\n\nexport const schema = {\n  $id: 'https://example.com/list.schema.json',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'List item',\n  type: 'array',\n  items: {\n    $ref: 'list.item.json'\n  }\n}\n\nexport const item = {\n  $id: 'https://example.com/list.schema.json',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'List item',\n  type: 'object',\n  required: ['text'],\n  properties: {\n    text: {\n      $ref: 'list.itemtext.json'\n    },\n    avatar: {\n      $ref: 'avatar.schema.json'\n    },\n    action: {\n      oneOf: [\n        { $ref: 'button.schema.json' },\n        { $ref: 'list.itemtext.json' }\n        // {'$ref': 'form.checkbox.json'}\n        // {'$ref': 'form.switch.json'}\n      ]\n    }\n  }\n}\n\nexport const itemtext = {\n  $id: 'https://example.com/list.itemtext.json',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'List item text',\n  type: 'object',\n  properties: {\n    title: {\n      type: 'string'\n    },\n    subtitle: {\n      type: 'string'\n    }\n  }\n}\n\nexport default { events, triggers, StateTree, TreeBase }\n"],"names":["events","_objectSpread","baseEvents","triggers","baseTriggers","StateTree","StateList","TreeBase","_ListBase","_inherits","ListBase","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","data","_data","state","getTreeFromFlatData","flatData","getKey","itm","id","getParentKey","parent","rootKey","config","options","rootId","tree","_tree","getFlatDataFromTree","treeData","getNodeKey","ignoreCollapsed","forEach","item","node","parentNode","children","push","idx","findItemIndexById","getPathToNodeById","getTreeFromList","_createClass","schema","$id","$schema","description","type","items","$ref","required","properties","text","avatar","action","oneOf","itemtext","title","subtitle","TreeBase$1"],"mappings":"4WAUA,IA0CaA,EAAMC,EAAAA,EACdC,CAAAA,EAAAA,GAtBc,CACjB,GAwBWC,EAAQF,EAAAA,EAChBG,CAAAA,EAAAA,GA/CgB,CACnB,GAkDWC,EAAYC,EAEZC,WAAQC,GAAAC,EAAAF,EAASG,GAAT,IAAAC,EAAAC,EAAAL,GACnB,SAAAA,EAAYM,GAAO,IAAAC,EAGuB,OAHvBC,OAAAR,GACjBO,EAAAH,EAAAK,UAAMH,GACNI,EAAAC,EAAAJ,GAIgB,mBAAA,SAACK,GACjB,IAAIC,EAAQD,EAIZ,OAHKC,IACHA,EAAQN,EAAKO,MAAMF,MAEdG,EAAoB,CACzBC,SAAUH,EACVI,OAAQ,SAACC,GACP,OAAOA,EAAIC,EACZ,EACDC,aAAc,SAACF,GACb,OAAOA,EAAIG,MACZ,EACDC,QAASf,EAAKD,MAAMiB,OAAOC,QAAQC,QAAU,UAEhDf,EAAAC,EAAAJ,GAEiB,mBAAA,SAACmB,GACjB,IAAIC,EAAQD,EACPC,IACHA,EAAQpB,EAAKO,MAAMY,MAErB,IAAMV,EAAWY,EAAoB,CACnCC,SAAUF,EACVG,WAAY,SAACZ,GACX,OAAOA,EAAIC,EACZ,EACDY,iBAAiB,IAEbnB,EAAO,GAWb,OAVAI,EAASgB,SAAQ,SAACC,GAChB,IAAMf,EAAGxB,KAAQuC,EAAKC,MACE,OAApBD,EAAKE,WACPjB,EAAIG,OAAS,KAEbH,EAAIG,OAASY,EAAKE,WAAWhB,UAExBD,EAAIkB,SACXxB,EAAKyB,KAAKnB,EACZ,IACON,KACRF,EAAAC,EAAAJ,GAEmB,qBAAA,SAACY,GACnB,IAAMmB,EAAM/B,EAAKgC,kBAAkBpB,GACnC,GAAY,OAARmB,OACG,CACL,IAAMpB,EAAMX,EAAKO,MAAMF,KAAK0B,GAC5B,GAAmB,OAAfpB,EAAIG,OACN,OAAOd,EAAKiC,kBAAkBtB,EAAIG,OAEtC,KAtDAd,EAAKO,MAAMY,KAAOnB,EAAKkC,kBAAiBlC,CAC1C,CAAC,OAAAmC,EAAA1C,EAAA,IAyDU2C,EAAS,CACpBC,IAAK,uCACLC,QAAS,0CACTC,YAAa,YACbC,KAAM,QACNC,MAAO,CACLC,KAAM,mBAIGhB,EAAO,CAClBW,IAAK,uCACLC,QAAS,0CACTC,YAAa,YACbC,KAAM,SACNG,SAAU,CAAC,QACXC,WAAY,CACVC,KAAM,CACJH,KAAM,sBAERI,OAAQ,CACNJ,KAAM,sBAERK,OAAQ,CACNC,MAAO,CACL,CAAEN,KAAM,sBACR,CAAEA,KAAM,0BAQHO,EAAW,CACtBZ,IAAK,yCACLC,QAAS,0CACTC,YAAa,iBACbC,KAAM,SACNI,WAAY,CACVM,MAAO,CACLV,KAAM,UAERW,SAAU,CACRX,KAAM,YAKGY,EAAA,CAAElE,OAAAA,EAAQG,SAAAA,EAAUE,UAAAA,EAAWE,SAAAA"}