{"version":3,"file":"ListSchemaBase.js","sources":["../../../src/event/ListSchemaBase.js"],"sourcesContent":["// common tools\nimport ListBase from './ListBase'\nimport StateBaseComponent from './StateBaseComponent'\nimport {\n  findItemIndexById,\n  removeItemIndexByIndex,\n  mergeDeep\n} from '../util/ObjUtil'\n// event handler\n// import Event from './Event'\n\nexport const triggers = ListBase.triggers\nexport const events = ListBase.events\n\nconst schema_with_ids = {\n  $id: 'identifiers',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'Identifiers',\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string'\n    }\n  },\n  required: ['id']\n}\nexport class StateSchemaList extends ListBase.StateList {\n  constructor(props) {\n    super(props)\n    this.props = props\n    // ensure array\n    let _data = []\n    const _schema = props.data.schema || this.props.schema || schema_with_ids // expect ids\n    if (props.data) {\n      // make sure we have at least a data property\n      if (!props.data.items) {\n        throw new Error('Expecting data property in data object')\n      }\n      if (Array.isArray(props.data.items)) {\n        _data = props.data.items\n      } else {\n        // check if this is an empty object\n        if (typeof props.data.items === 'object') {\n          // objects should not be empty\n          if (props.data.items.length) {\n            _data = [props.data.items]\n          }\n        } else {\n          _data = [props.data.items]\n        }\n      }\n    }\n    // apply default values\n    this.state = {\n      schema: _schema,\n      data: _data || [],\n      selectedIndex: 0,\n      selectedId: null\n    }\n\n    if (!this.props.manager) {\n      throw new Error('Manager was not passed through StateSchemaList props')\n    }\n\n    this.eventManager = this.props.manager.getEventManager()\n  }\n\n  findItemIndexById = (id, data) => {\n    return findItemIndexById(id, data)\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    const dataActionHandlers = {\n      submit: {\n        schema: {},\n        handler: (objs) => {\n          // submit\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'submitted',\n            {\n              count: this.state.data.length,\n              items: this.state.data,\n              schema: this.state.schema\n            },\n            {}\n          )\n        }\n      },\n      replace: {\n        // is the only way to change the schema\n        schema: {},\n        handler: (objs) => {\n          // replace content\n\n          // make sure we get items and / or schema properties\n          const data_state = this.state\n          if (objs.schema) {\n          } // TODO: validate schema\n          if (objs.items) {\n            if (!Array.isArray(objs.items)) {\n              objs.items = [objs.items]\n            }\n            // TODO: validate data (new or old) against new schema\n          }\n\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replacing',\n            { old: data_state, new: objs },\n            {}\n          )\n          const data = objs\n          if (this.updateView('replace', [], [], data.items)) {\n            this.setState({\n              ...this.state,\n              data: data.items || this.state.data,\n              schema: data.schema || this.state.schema\n            })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replaced',\n            {\n              count: this.state.data.length,\n              items: this.state.data,\n              schema: this.state.schema\n            },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            {\n              count: this.state.data.length,\n              items: this.state.data,\n              schema: this.state.schema\n            },\n            {}\n          )\n        }\n      },\n      push: {\n        schema: {},\n        handler: (objs) => {\n          // append\n          const data_added = []\n          const data_updated = [] // contains ids\n          const data_state = [...(this.state.data || [])] // FIXME: use better way\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, data_state)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = mergeDeep(data_state[idx], obj)\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = { selectedId: obj.id, selectedIndex: idx }\n            }\n          })\n          const data = [...data_state, ...data_added]\n          // notify parent class of push event\n          try {\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(this.props.id, 'pushing', data_added, {})\n            if (this.updateView('push', data_added, data_updated, data)) {\n              this.setState({ ...this.state, ...selected, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('push', e)\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'pushed',\n            { count: data.length, items: data, added: data_added },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            {\n              count: data.length,\n              items: data,\n              added: data_added,\n              updated: data_updated\n            },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      push_front: {\n        schema: {},\n        handler: (objs) => {\n          const data_added = []\n          const data_updated = []\n          const data_state = [...(this.state.data || [])] // FIXME: use better way\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, this.state.data)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = obj\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = {\n                selectedId: obj.id,\n                selectedIndex: idx || data_added.length - 1\n              }\n            }\n          })\n          const data = [...data_added, ...data_state]\n          if (this.updateView('push_front', [], data_updated, data)) {\n            this.setState({ ...this.state, ...selected, data: data })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      delete: {\n        schema: {},\n        handler: (objs) => {\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          let data = this.state.data\n          const data_updated = []\n          const deleting = []\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, data)\n              if (idx !== null) {\n                deleting.push(obj.id)\n                data = removeItemIndexByIndex(idx, data)\n                data_updated.push(idx)\n              }\n            }\n          })\n          try {\n            if (this.updateView('delete', [], data_updated, data)) {\n              this.setState({ ...this.state, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('delete', e)\n          }\n\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data, deleted: deleting },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'deleted',\n            { count: deleting.length, items: data, deleted: deleting },\n            {}\n          )\n        }\n      },\n      pop: {\n        schema: {},\n        handler: (obj) => {\n          if (this.state.data.length > 0) {\n            this.state.data.splice(this.state.data.length - 1, 1)\n            if (this.updateView('pop', [], [], this.state.data)) {\n              this.setState({ ...this.state, data: this.state.data })\n              // Event.EventManager.getInstance().addEvent(\n              this.eventManager.addEvent(\n                this.props.id,\n                'changed',\n                { count: this.state.data.length, items: this.state.data },\n                {}\n              )\n            }\n          }\n        }\n      },\n      pop_front: {\n        schema: {},\n        handler: (obj) => {\n          this.state.data.splice(0, 1)\n          if (this.updateView('pop_front', [], [], this.state.data)) {\n            this.setState({ ...this.state, data: this.state.data })\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(\n              this.props.id,\n              'changed',\n              { count: this.state.data.length, items: this.state.data },\n              {}\n            )\n          }\n        }\n      },\n      select: {\n        schema: {},\n        handler: (objs) => {\n          const data_updated = []\n          const selected = []\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          // allow only one selection\n          for (let i = 0; i < this.state.data.length; i++) {\n            this.state.data[i].selected = false\n          }\n          // find selected\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, this.state.data)\n              if (idx !== null) {\n                this.state.data[idx].selected = !this.state.data[idx].selected\n                this.state.selectedId = this.state.data[idx].id\n                this.state.selectedIndex = idx\n                data_updated.push(idx)\n                selected.push(this.state.data[idx])\n              }\n            }\n          })\n          // for now we just replace the state\n          this.setState({ ...this.state, data: this.state.data })\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(this.props.id, 'selecting', objs, null)\n          if (this.updateView('select', objs, data_updated, this.state)) {\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(\n              this.props.id,\n              'selected',\n              selected,\n              null\n            )\n          }\n        }\n      },\n      clear: {\n        schema: {},\n        handler: (obj) => {\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'clearing',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.setState({ ...this.state, data: [] })\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'cleared',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.updateView('clear', [], [], [])\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    // this.ddEvent = Event.EventManager.getInstance().register(\n    this.ddEvent = this.eventManager.register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n\nexport class ListSchemaBase extends StateBaseComponent.StateBaseComponent {\n  /**\n   * Used to manage internal state of avatars\n   */\n  constructor(props) {\n    if (!props.config.options) {\n      props.config.options = {}\n    }\n    super(props)\n    this.props = props\n  }\n\n  updateData = (change, object_id, silent) => {\n    if (silent) {\n    }\n    // debugger;\n    // const change_row_idx = this.findItemIndexById(object_id.id, this.state.data);\n    // do the update\n    this.triggerAction('push', [change])\n    // this.state.data[change_row_idx] = mergeDeep (this.state.data[change_row_idx], change)\n  }\n\n  updateView = (action, arr, updated, data) => {\n    // extend by parent\n    return true\n  }\n\n  exceptionCatched = (action_name, event_object) => {\n    // console.info('ListBase: ' + action_name + ' --> ', event_object)\n  }\n\n  findItemIndexById = (id, data) => {\n    if (this.stateManager) {\n      return this.stateManager.findItemIndexById(id, data)\n    }\n  }\n\n  getData = () => {\n    return this.state.data\n  }\n\n  showSelectedRow = (row) => {\n    if (this.props.config.options.select) {\n      return row.selected\n    }\n    return false\n  }\n\n  showSelected = (id, idx) => {\n    // parent implementation to update the visual representation\n    return true // returns true to update state. Else do not update state.\n  }\n\n  setSelectedId = (id, evt, selected) => {\n    // EventManager.getInstance().addAction(this.props.id, 'select', { id: id });\n    this.triggerAction('select', { id: id })\n  }\n\n  handleSelect = (key, data, index, evt) => {\n    if (!evt) {\n      this.setSelectedId(data.id, evt)\n    }\n  }\n\n  render() {\n    return null\n  }\n}\n\nexport default { events, triggers, StateSchemaList, ListSchemaBase }\n"],"names":["triggers","ListBase","events","schema_with_ids","$id","$schema","description","type","properties","id","required","StateSchemaList","_ListBase$StateList","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","data","findItemIndexById","actionHandlers","eventHandlers","component_info","dataActionHandlers","submit","schema","handler","objs","eventManager","addEvent","count","state","length","items","replace","data_state","Array","isArray","old","updateView","setState","_objectSpread","push","data_added","data_updated","_toConsumableArray","selected","forEach","obj","idx","mergeDeep","selectedId","selectedIndex","concat","e","exceptionCatched","added","updated","push_front","deleting","removeItemIndexByIndex","deleted","pop","splice","pop_front","select","i","clear","ddEvent","register","_data","_schema","Error","_typeof","manager","getEventManager","_createClass","StateList","ListSchemaBase","_StateBaseComponent$S","_super2","_this2","config","options","change","object_id","silent","triggerAction","action","arr","action_name","event_object","stateManager","row","evt","key","index","setSelectedId","value","render","StateBaseComponent"],"mappings":"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"}