{"version":3,"file":"TestUtil.js","sources":["../../../src/util/TestUtil.js"],"sourcesContent":["/**\n *  tests\n * Testing DD events and actions integrety\n */\n\nimport React from 'react'\n\nconst _createComponent = (\n  renderer,\n  _Component,\n  component_id,\n  data,\n  options,\n  schema_expected,\n  manager\n) => {\n  // check for component manager\n  if (!manager) {\n    throw Error(\n      'TestUtil._createComponent: Manager was not provided through props for component ' +\n        component_id\n    )\n  } else {\n    /*\n    if (manager.constructor.name !== 'ComponentManager') {\n      throw \"TestUtil._createComponent: Manager was expected to be ComponentManager. Got for '\" + manager.constructor.name + \"' \" + component_id;\n    }\n    */\n  }\n  if (renderer !== null) {\n    if (typeof renderer.create !== 'function') {\n      throw Error('_createComponent is missing renderer function')\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  let _component = null\n  if (options.render) {\n    _component = renderer.create(\n      // eslint-disable-next-line react/jsx-pascal-case\n      <_Component\n        id={component_id}\n        key={component_id}\n        data={data}\n        config={{ options: options }}\n        schema={schema_expected}\n        manager={manager}\n      />\n    )\n  } else {\n    _component = new _Component({\n      id: component_id,\n      key: component_id,\n      data: data,\n      config: { options: options },\n      schema: schema_expected,\n      manager: manager\n    })\n  }\n}\n\nexport const createComponentClassTests = (\n  componentManagerInstance,\n  registerComponents,\n  renderer,\n  config,\n  triggers_expected,\n  events_expected,\n  schema_expected,\n  data,\n  options\n) => {\n  options = options || { render: true }\n  data = data || {}\n  if (typeof registerComponents !== 'function') {\n    throw Error('createComponentClassTests is missing registerComponents')\n  }\n  if (renderer !== null) {\n    if (typeof renderer.create !== 'function') {\n      throw Error('createComponentClassTests is not a component renderer')\n    }\n  }\n  // TODO: run this before each\n  componentManagerInstance.clearAll()\n  componentManagerInstance.getStateManager().clearAll()\n  componentManagerInstance.getEventManager().clearAll()\n  registerComponents(componentManagerInstance)\n\n  const c = componentManagerInstance.getComponent(config.type)\n  const _Component = c.component\n  const triggers = c.triggers\n  const events = c.events\n  const component_id = config.type + '_id'\n  componentManagerInstance.getStateManager().clearAll()\n  componentManagerInstance.getStateManager().createState({\n    type: config.type,\n    data: data,\n    id: component_id,\n    manager: componentManagerInstance\n  })\n\n  return [\n    {\n      title:\n        component_id +\n        ' trigger registration contains same actions as in component trigger export',\n      test: () => {\n        componentManagerInstance.getStateManager().clearAll()\n        _createComponent(\n          renderer,\n          _Component,\n          component_id,\n          data,\n          options,\n          schema_expected,\n          componentManagerInstance\n        )\n        const trigger_info_events = triggers\n        const actions = componentManagerInstance\n          .getEventManager()\n          .getCopyOfActions()\n        expect(Object.keys(actions)).toEqual([component_id])\n        // check that we are registering the correct items\n        expect(Object.keys(actions[component_id])).toEqual(\n          Object.keys(trigger_info_events)\n        )\n      }\n    },\n    {\n      title:\n        component_id +\n        ' trigger export registration contains required information',\n      test: () => {\n        const trigger_info_events = triggers\n        // check that the registered event count matches the registered handler count\n        expect(Object.keys(trigger_info_events)).toEqual(triggers_expected)\n        // check that the registered events attributes are defined\n        Object.keys(trigger_info_events).forEach((trigger_event, idx) => {\n          // check info\n          expect(Object.keys(trigger_info_events[trigger_event])).toContain(\n            'info'\n          )\n          expect(\n            Object.keys(trigger_info_events[trigger_event].info)\n          ).toContain('name')\n          expect(\n            Object.keys(trigger_info_events[trigger_event].info)\n          ).toContain('description')\n          // check schema\n          expect(Object.keys(trigger_info_events[trigger_event])).toContain(\n            'schema'\n          )\n          // check alias\n          expect(Object.keys(trigger_info_events[trigger_event])).toContain(\n            'alias'\n          )\n        })\n      }\n    },\n    {\n      title:\n        component_id + ' component instance has trigger registration handlers',\n      test: () => {\n        componentManagerInstance.getStateManager().clearAll()\n        _createComponent(\n          renderer,\n          _Component,\n          component_id,\n          data,\n          options,\n          schema_expected,\n          componentManagerInstance\n        )\n        const trigger_info_events = triggers\n        const actions = componentManagerInstance\n          .getEventManager()\n          .getCopyOfActions()\n        // check that the registered events attributes are defined\n        Object.keys(trigger_info_events).forEach((trigger_event, idx) => {\n          // check handler\n          expect(Object.keys(actions[component_id][trigger_event])).toContain(\n            'handler'\n          )\n          expect(\n            typeof actions[component_id][trigger_event].handler === 'function'\n          ).toBeTruthy()\n        })\n      }\n    },\n    {\n      title: component_id + ' event registration',\n      test: () => {\n        const trigger_events = events_expected\n        const actions = events\n        expect(Object.keys(actions)).toEqual(trigger_events)\n        trigger_events.forEach((trigger_event, idx) => {\n          // check info\n          expect(Object.keys(actions[trigger_event])).toContain('info')\n          expect(Object.keys(actions[trigger_event].info)).toContain('name')\n          expect(Object.keys(actions[trigger_event].info)).toContain(\n            'description'\n          )\n          // check schema\n          expect(Object.keys(actions[trigger_event])).toContain('schema')\n          // check alias\n          expect(Object.keys(actions[trigger_event])).toContain('alias')\n        })\n      }\n    },\n    {\n      title: component_id + ' config has options',\n      test: () => {\n        expect(Object.keys(config)).toContain('options')\n        // check that we have the basics for a schema\n        const options_schema = config.options\n        expect(Object.keys(options_schema)).toContain('id')\n        expect(Object.keys(options_schema)).toContain('$schema')\n        expect(Object.keys(options_schema)).toContain('description')\n        expect(Object.keys(options_schema)).toContain('x-layout')\n        expect(Object.keys(options_schema)).toContain('type')\n        expect(Object.keys(options_schema)).toContain('version')\n        expect(Object.keys(options_schema)).toContain('properties')\n        expect(Object.keys(options_schema)).toContain('required')\n      }\n    },\n    {\n      title: component_id + ' config has basic info',\n      test: () => {\n        expect(Object.keys(config)).toContain('options')\n        // check that we have the basics for a schema\n        expect(typeof config.name).toEqual('string')\n        expect(typeof config.type).toEqual('string')\n        expect(typeof config.author).toEqual('string')\n        expect(typeof config.description).toEqual('string')\n        expect(typeof config.version).toEqual('number')\n        expect(typeof config.author).toEqual('string')\n        expect(typeof config.relation).toEqual('object')\n      }\n    },\n    {\n      title: component_id + ' config has relational info',\n      test: () => {\n        expect(Object.keys(config)).toContain('options')\n        // check that we have the basics for a schema\n        expect(typeof config.relation).toEqual('object')\n        expect(typeof config.relation.within).toEqual('string')\n      }\n    },\n    {\n      title:\n        component_id + ' option schema is accessible through buildStoreInfo',\n      test: () => {\n        /* componentManagerInstance.clearAll();\n        registerComponents();\n        */\n        _createComponent(\n          renderer,\n          _Component,\n          component_id,\n          data,\n          options,\n          schema_expected,\n          componentManagerInstance\n        )\n        // fetch result\n        const store = componentManagerInstance\n          .getEventManager()\n          .collectComponentInventory()\n        // should exist\n        expect(store).toHaveProperty(config.type)\n\n        const store_item = store[config.type]\n        // check that we have the required info\n        // as define din ui-modeler-events.js store data\n        expect(typeof store_item.id).toEqual('string')\n        expect(typeof store_item.title).toEqual('string')\n        expect(typeof store_item.type).toEqual('string')\n        expect(typeof store_item.parent).toEqual('string')\n      }\n    },\n    {\n      title:\n        component_id +\n        ' schema definition is accessible through getComponentSchema',\n      test: () => {\n        const schema = componentManagerInstance\n          .getEventManager()\n          .getComponentSchema(config.type)\n        expect(schema).toEqual(config.options)\n      }\n    },\n    {\n      title:\n        component_id +\n        ' events definition is accessible through getComponentEventsByType',\n      test: () => {\n        const component = componentManagerInstance\n          .getEventManager()\n          .getComponentByType(config.type)\n        expect(component).not.toEqual(undefined)\n        expect(component.actions).toEqual(config.actions)\n      }\n    },\n    {\n      title:\n        component_id +\n        ' actions definition is accessible through getComponentActionsByType',\n      test: () => {\n        const component = componentManagerInstance\n          .getEventManager()\n          .getComponentByType(config.type)\n        expect(component).not.toEqual(undefined)\n        expect(component.events).toEqual(config.events)\n      }\n    } /* {\n      title: component_id + ' events definition is accessible through getEvents',\n      test: () => {\n      }\n    }, {\n      title: component_id + ' action definition is accessible through getActions',\n      test: () => {\n      }\n    }\n    */\n  ]\n}\n\nexport const createComponentRegisterTests = (\n  componentManagerInstance,\n  registerComponents,\n  component_type,\n  _Component,\n  triggers,\n  events,\n  config,\n  contains\n) => {\n  return [\n    {\n      title: component_type + ' basic registration info',\n      test: () => {\n        componentManagerInstance.clearAll()\n        componentManagerInstance.getStateManager().clearAll()\n        componentManagerInstance.getEventManager().clearAll()\n        registerComponents(componentManagerInstance)\n\n        const c = componentManagerInstance.getComponent(component_type)\n        expect(c).not.toEqual(undefined)\n        expect(c.type).toEqual(component_type)\n        expect(c.component).toEqual(_Component)\n        expect(c.config).toEqual(config)\n        expect(c.events).toEqual(events)\n        expect(c.triggers).toEqual(triggers)\n      }\n    },\n    {\n      title: component_type + ' configuration registration',\n      test: () => {\n        componentManagerInstance.clearAll()\n        componentManagerInstance.getStateManager().clearAll()\n        componentManagerInstance.getEventManager().clearAll()\n        registerComponents(componentManagerInstance)\n\n        const c = componentManagerInstance.getComponent(component_type)\n        expect(c).not.toEqual(undefined)\n        const cfg = c.config\n        expect(cfg).toHaveProperty('type')\n        expect(cfg).toHaveProperty('name')\n        expect(cfg).toHaveProperty('relation')\n        expect(cfg.relation).toHaveProperty('within')\n        expect(cfg.relation).toHaveProperty('contains')\n      }\n    },\n    {\n      title: component_type + ' matches rendered type and schema',\n      test: () => {\n        componentManagerInstance.clearAll()\n        componentManagerInstance.getStateManager().clearAll()\n        componentManagerInstance.getEventManager().clearAll()\n        registerComponents(componentManagerInstance)\n\n        const c = componentManagerInstance.getComponent(component_type)\n        expect(c).not.toEqual(undefined)\n        const cfg = c.config\n        expect(cfg).toHaveProperty('type')\n        expect(cfg).toHaveProperty('options')\n        // test that the config type is the type iin our options schema\n        expect(cfg.options.id).toEqual(cfg.type)\n        // TODO: test that this is the same as in component registered\n      }\n    },\n    {\n      title: component_type + ' tests option schema',\n      test: () => {\n        if (Object.keys(contains).length) {\n          // test only if we have keys\n          componentManagerInstance.clearAll()\n          componentManagerInstance.getStateManager().clearAll()\n          componentManagerInstance.getEventManager().clearAll()\n          registerComponents(componentManagerInstance)\n\n          const c = componentManagerInstance.getComponent(component_type)\n          expect(c).not.toEqual(undefined)\n          const cfg = c.config\n          const schema_option = cfg.options\n          expect(schema_option).toHaveProperty('id')\n          expect(schema_option).toHaveProperty('$schema')\n          expect(schema_option).toHaveProperty('title')\n          expect(schema_option).toHaveProperty('description')\n          expect(schema_option).toHaveProperty('x-layout')\n          expect(schema_option).toHaveProperty('type')\n          expect(schema_option).toHaveProperty('version')\n          expect(schema_option).toHaveProperty('properties')\n          expect(schema_option).toHaveProperty('required')\n          expect(schema_option['x-layout']).toEqual('component')\n        }\n      }\n    },\n    {\n      title: component_type + ' tests containing components',\n      test: () => {\n        if (Object.keys(contains).length) {\n          // test only if we have keys\n          componentManagerInstance.clearAll()\n          componentManagerInstance.getStateManager().clearAll()\n          componentManagerInstance.getEventManager().clearAll()\n          registerComponents(componentManagerInstance)\n\n          const c = componentManagerInstance.getComponent(component_type)\n          expect(c).not.toEqual(undefined)\n          const cfg = c.config\n          expect(cfg).toHaveProperty('contains')\n          // eslint-disable-next-line no-unused-vars\n          for (const [key, val] of Object.entries(contains)) {\n            expect(cfg.contains).toHaveProperty(key)\n            // should expect to have a schema\n            const schema = cfg.contains[key]\n            expect(schema).toHaveProperty('id')\n            expect(schema).toHaveProperty('$schema')\n            expect(schema).toHaveProperty('title')\n            expect(schema).toHaveProperty('description')\n            expect(schema).toHaveProperty('x-layout')\n            expect(schema).toHaveProperty('type')\n            expect(schema).toHaveProperty('version')\n            expect(schema).toHaveProperty('properties')\n            expect(schema).toHaveProperty('required')\n\n            expect(schema.id).toEqual(key) // should be same id as the key\n            // should expect a x-layout having value \"component-item\"\n            expect(schema['x-layout']).toEqual('component-item')\n          }\n        }\n      }\n    }\n  ]\n}\n\nfunction uuidv4() {\n  // random string generator\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0\n    var v = c === 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\nexport function testEventSequence(\n  componentManagerInstance,\n  module_name,\n  event_name,\n  event_data,\n  trigger_name,\n  callback\n) {\n  const test_name = uuidv4()\n  componentManagerInstance.getEventManager().register(\n    test_name,\n    {\n      result: {\n        schema: {},\n        handler: callback\n      }\n    },\n    {},\n    {}\n  ) // event and component info not used in test\n  componentManagerInstance.getEventManager().watch([\n    {\n      component: { id: test_name, event: 'result' },\n      trigger: { id: module_name, action: event_name },\n      transform: function (data) {\n        return data\n      }\n    },\n    {\n      component: { id: module_name, event: trigger_name },\n      trigger: { id: test_name, action: 'result' },\n      transform: function (data) {\n        return data\n      }\n    }\n  ])\n  componentManagerInstance\n    .getEventManager()\n    .addEvent(test_name, 'result', event_data, {})\n}\n\nexport default {\n  createComponentClassTests,\n  createComponentRegisterTests,\n  testEventSequence\n}\n"],"names":["_createComponent","renderer","_Component","component_id","data","options","schema_expected","manager","Error","create","render","React","createElement","id","key","config","schema","createComponentClassTests","componentManagerInstance","registerComponents","triggers_expected","events_expected","clearAll","getStateManager","getEventManager","c","getComponent","type","component","triggers","events","createState","title","test","trigger_info_events","actions","getCopyOfActions","expect","Object","keys","toEqual","forEach","trigger_event","idx","toContain","info","handler","toBeTruthy","trigger_events","options_schema","_typeof","name","author","description","version","relation","within","store","collectComponentInventory","toHaveProperty","store_item","parent","getComponentSchema","getComponentByType","not","undefined","createComponentRegisterTests","component_type","contains","cfg","length","schema_option","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","val","uuidv4","replace","r","Math","random","v","toString","testEventSequence","module_name","event_name","event_data","trigger_name","callback","test_name","register","result","watch","event","trigger","action","transform","addEvent"],"mappings":"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"}