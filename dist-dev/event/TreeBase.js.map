{"version":3,"file":"TreeBase.js","sources":["../../src/event/TreeBase.js"],"sourcesContent":["// utils\nimport { getFlatDataFromTree, getTreeFromFlatData } from '../util/TreeUtil'\n// base list\nimport {\n  StateList,\n  ListBase,\n  events as baseEvents,\n  triggers as baseTriggers\n} from './ListBase'\n\nconst treeTriggers = {\n  /*\n  expand: {\n    alias: [],\n    info: {\n      name: 'Expand',\n      description: 'Adds data at the end to component'\n    },\n    schema: {}\n  },\n  collapse: {\n    alias: [],\n    info: {\n      name: 'Collapse',\n      description: 'Adds data to the front of the component'\n    },\n    schema: {}\n  }\n  */\n}\n\nconst treeEvents = {\n  /*\n  expanded: {\n    alias: [],\n    info: {\n      name: 'Expanded',\n      description: 'Expanded item'\n    },\n    schema: {} \n  },\n  collapsed: {\n    alias: [],\n    info: {\n      name: 'Collapsed',\n      description: 'Collapsed item'\n    },\n    schema: {}\n  }\n  */\n}\n\nexport const events = {\n  ...baseEvents,\n  ...treeEvents\n}\nexport const triggers = {\n  ...baseTriggers,\n  ...treeTriggers\n}\n\nexport const StateTree = StateList\n\nexport class TreeBase extends ListBase {\n  constructor(props) {\n    super(props)\n    // add a separate tree state\n    this.state.tree = this.getTreeFromList()\n  }\n\n  getTreeFromList = (data) => {\n    let _data = data\n    if (!_data) {\n      _data = this.state.data\n    }\n    return getTreeFromFlatData({\n      flatData: _data,\n      getKey: (itm) => {\n        return itm.id\n      },\n      getParentKey: (itm) => {\n        return itm.parent\n      },\n      rootKey: this.props.config.options.rootId || null\n    })\n  }\n\n  getListFromTree = (tree) => {\n    let _tree = tree\n    if (!_tree) {\n      _tree = this.state.tree\n    }\n    const flatData = getFlatDataFromTree({\n      treeData: _tree,\n      getNodeKey: (itm) => {\n        return itm.id\n      },\n      ignoreCollapsed: false\n    })\n    const data = []\n    flatData.forEach((item) => {\n      const itm = { ...item.node }\n      if (item.parentNode === null) {\n        itm.parent = null // null;\n      } else {\n        itm.parent = item.parentNode.id\n      }\n      delete itm.children\n      data.push(itm)\n    })\n    return data\n  }\n\n  getPathToNodeById = (id) => {\n    const idx = this.findItemIndexById(id)\n    if (idx === null) {\n    } else {\n      const itm = this.state.data[idx]\n      if (itm.parent !== null) {\n        return this.getPathToNodeById(itm.parent)\n      }\n    }\n  }\n}\n\nexport const schema = {\n  $id: 'https://example.com/list.schema.json',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'List item',\n  type: 'array',\n  items: {\n    $ref: 'list.item.json'\n  }\n}\n\nexport const item = {\n  $id: 'https://example.com/list.schema.json',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'List item',\n  type: 'object',\n  required: ['text'],\n  properties: {\n    text: {\n      $ref: 'list.itemtext.json'\n    },\n    avatar: {\n      $ref: 'avatar.schema.json'\n    },\n    action: {\n      oneOf: [\n        { $ref: 'button.schema.json' },\n        { $ref: 'list.itemtext.json' }\n        // {'$ref': 'form.checkbox.json'}\n        // {'$ref': 'form.switch.json'}\n      ]\n    }\n  }\n}\n\nexport const itemtext = {\n  $id: 'https://example.com/list.itemtext.json',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'List item text',\n  type: 'object',\n  properties: {\n    title: {\n      type: 'string'\n    },\n    subtitle: {\n      type: 'string'\n    }\n  }\n}\n\nexport default { events, triggers, StateTree, TreeBase }\n"],"names":["events","_objectSpread","_objectSpread2","baseEvents","triggers","baseTriggers","StateTree","StateList","TreeBase","_ListBase","_inherits","_super","_createSuper","props","_this","_classCallCheck","this","call","_defineProperty","_assertThisInitialized","data","_data","state","getTreeFromFlatData","flatData","getKey","itm","id","getParentKey","parent","rootKey","config","options","rootId","tree","_tree","getFlatDataFromTree","treeData","getNodeKey","ignoreCollapsed","forEach","item","node","parentNode","children","push","idx","findItemIndexById","getPathToNodeById","getTreeFromList","_createClass","ListBase","TreeBase$1","$id","$schema","description","type","required","properties","text","$ref","avatar","action","oneOf","title","subtitle","items"],"mappings":"wTAUA,IA0CaA,EAAMC,EAAAC,eAAAD,EAAAC,eAAA,CAAA,EACdC,EAAUH,QAtBI,CACjB,GAwBWI,EAAQH,EAAAC,eAAAD,EAAAC,eAAA,CAAA,EAChBG,EAAYD,UA/CI,CACnB,GAkDWE,EAAYC,EAASA,UAErBC,EAAQ,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,eAAAJ,GACnB,SAAAA,EAAYK,GAAO,IAAAC,EAGuB,OAHvBC,kBAAAC,KAAAR,GACjBM,EAAAH,EAAAM,KAAAD,KAAMH,GACNK,EAAAA,gBAIgBC,EAAAA,uBAAAL,GAAA,mBAAA,SAACM,GACjB,IAAIC,EAAQD,EAIZ,OAHKC,IACHA,EAAQP,EAAKQ,MAAMF,MAEdG,sBAAoB,CACzBC,SAAUH,EACVI,OAAQ,SAACC,GACP,OAAOA,EAAIC,EACZ,EACDC,aAAc,SAACF,GACb,OAAOA,EAAIG,MACZ,EACDC,QAAShB,EAAKD,MAAMkB,OAAOC,QAAQC,QAAU,UAEhDf,EAAAA,gBAEiBC,EAAAA,uBAAAL,GAAA,mBAAA,SAACoB,GACjB,IAAIC,EAAQD,EACPC,IACHA,EAAQrB,EAAKQ,MAAMY,MAErB,IAAMV,EAAWY,EAAAA,oBAAoB,CACnCC,SAAUF,EACVG,WAAY,SAACZ,GACX,OAAOA,EAAIC,EACZ,EACDY,iBAAiB,IAEbnB,EAAO,GAWb,OAVAI,EAASgB,SAAQ,SAACC,GAChB,IAAMf,EAAGzB,EAAAC,eAAA,CAAA,EAAQuC,EAAKC,MACE,OAApBD,EAAKE,WACPjB,EAAIG,OAAS,KAEbH,EAAIG,OAASY,EAAKE,WAAWhB,UAExBD,EAAIkB,SACXxB,EAAKyB,KAAKnB,EACZ,IACON,KACRF,EAAAA,gBAEmBC,EAAAA,uBAAAL,GAAA,qBAAA,SAACa,GACnB,IAAMmB,EAAMhC,EAAKiC,kBAAkBpB,GACnC,GAAY,OAARmB,OACG,CACL,IAAMpB,EAAMZ,EAAKQ,MAAMF,KAAK0B,GAC5B,GAAmB,OAAfpB,EAAIG,OACN,OAAOf,EAAKkC,kBAAkBtB,EAAIG,OAEtC,KAtDAf,EAAKQ,MAAMY,KAAOpB,EAAKmC,kBAAiBnC,CAC1C,CAAC,OAAAoC,EAAAA,aAAA1C,EAAA,CALkB,CAAS2C,YA+GfC,EAAA,CAAEpD,OAAAA,EAAQI,SAAAA,EAAUE,UAAAA,EAAWE,SAAAA,0FAvC1B,CAClB6C,IAAK,uCACLC,QAAS,0CACTC,YAAa,YACbC,KAAM,SACNC,SAAU,CAAC,QACXC,WAAY,CACVC,KAAM,CACJC,KAAM,sBAERC,OAAQ,CACND,KAAM,sBAERE,OAAQ,CACNC,MAAO,CACL,CAAEH,KAAM,sBACR,CAAEA,KAAM,2CAQQ,CACtBP,IAAK,yCACLC,QAAS,0CACTC,YAAa,iBACbC,KAAM,SACNE,WAAY,CACVM,MAAO,CACLR,KAAM,UAERS,SAAU,CACRT,KAAM,2BA5CU,CACpBH,IAAK,uCACLC,QAAS,0CACTC,YAAa,YACbC,KAAM,QACNU,MAAO,CACLN,KAAM"}