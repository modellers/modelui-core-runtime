{"version":3,"file":"ListBase.js","sources":["../../src/event/ListBase.js"],"sourcesContent":["// common tools\nimport StateBase from './StateBase'\nimport StateBaseComponent from './StateBaseComponent'\nimport {\n  findItemIndexById,\n  removeItemIndexByIndex,\n  mergeDeep\n} from '../util/ObjUtil'\n// event handler\n// import Event from './Event'\n\nconst schema_only_id = {\n  // \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  $id: 'v1/listbase/..',\n  type: 'array',\n  items: {\n    $ref: '#/definitions/identifier'\n  },\n  definitions: {\n    identifier: {\n      type: 'object',\n      additionalProperties: true,\n      properties: {\n        id: {\n          type: 'string'\n        }\n      },\n      required: ['id'],\n      title: 'Identifier with additional properties'\n    }\n  }\n}\n\nexport const triggers = {\n  submit: {\n    alias: [],\n    info: {\n      name: 'Submit',\n      description: 'Submit entire list'\n    },\n    schema: {}\n  },\n  replace: {\n    alias: [],\n    info: {\n      name: 'Replace',\n      description: 'Replace data'\n    },\n    schema: {}\n  },\n  push: {\n    alias: [],\n    info: {\n      name: 'Push',\n      description: 'Adds data at the end to component'\n    },\n    schema: {}\n  },\n  push_front: {\n    alias: [],\n    info: {\n      name: 'Push front',\n      description: 'Adds data to the front of the component'\n    },\n    schema: {}\n  },\n  delete: {\n    alias: [],\n    info: {\n      name: 'Delete data instance',\n      description: 'Removes data from the component'\n    },\n    schema: { ...schema_only_id, $id: 'v1/listbase/delete' }\n  },\n  pop: {\n    alias: [],\n    info: {\n      name: 'Pop back item',\n      description: 'Deletes / removes back data item'\n    },\n    schema: {}\n  },\n  pop_front: {\n    alias: [],\n    info: {\n      name: 'Pop front item',\n      description: 'Deletes / removes front data item'\n    },\n    schema: {}\n  },\n  select: {\n    alias: [],\n    info: {\n      name: 'Select item',\n      description: 'Selects the data item'\n    },\n    schema: { ...schema_only_id, $id: 'v1/listbase/select' }\n  },\n  clear: {\n    alias: [],\n    info: {\n      name: 'Clear items',\n      description: 'Removes all items from list'\n    },\n    schema: {}\n  }\n}\n\nexport const events = {\n  changed: {\n    alias: [],\n    info: {\n      name: 'changed',\n      description: 'Changed size'\n    },\n    schema: {}\n  },\n  replacing: {\n    alias: [],\n    info: {\n      name: 'replacing',\n      description: 'Replacing content'\n    },\n    schema: {}\n  },\n  replaced: {\n    alias: [],\n    info: {\n      name: 'replaced',\n      description: 'Replace content'\n    },\n    schema: {}\n  },\n  submitted: {\n    alias: [],\n    info: {\n      name: 'Submitted',\n      description: 'Subbited all items in list'\n    },\n    schema: {}\n  },\n  deleted: {\n    alias: [],\n    info: {\n      name: 'Deleted',\n      description: 'Deleted specified items'\n    },\n    schema: {}\n  },\n  pushing: {\n    alias: [],\n    info: {\n      name: 'Pusing',\n      description: 'Pushing item in front of list'\n    },\n    schema: {}\n  },\n  pushed: {\n    alias: [],\n    info: {\n      name: 'Pushed',\n      description: 'Pushed item in front of list'\n    },\n    schema: {}\n  },\n  selected: {\n    alias: [],\n    info: {\n      name: 'Selected',\n      description: 'Selecting item'\n    },\n    schema: { ...schema_only_id, $id: 'v1/listbase/selected' }\n  },\n  deselected: {\n    alias: [],\n    info: {\n      name: 'De-Selected',\n      description: 'Unselecting item'\n    },\n    schema: {}\n  },\n  clearing: {\n    alias: [],\n    info: {\n      name: 'Clearing',\n      description: 'Removing all items'\n    },\n    schema: {}\n  },\n  cleared: {\n    alias: [],\n    info: {\n      name: 'Cleared',\n      description: 'Removed all items'\n    },\n    schema: {}\n  }\n}\n\nexport class StateList extends StateBase.StateInstance {\n  constructor(props) {\n    super(props)\n    this.props = props\n    // ensure array\n    let _data = []\n    if (props.data) {\n      if (Array.isArray(props.data)) {\n        _data = props.data\n      } else {\n        // check if this is an empty object\n        if (typeof props.data === 'object') {\n          // objects should not be empty\n          if (props.data.length) {\n            _data = [props.data]\n          }\n        } else {\n          _data = [props.data]\n        }\n      }\n    }\n    // apply default values\n    this.state = { data: _data || [], selectedIndex: 0, selectedId: null }\n\n    if (!this.props.manager) {\n      throw new Error('Manager was not passed through StateList props')\n    }\n\n    this.eventManager = this.props.manager.getEventManager()\n  }\n\n  findItemIndexById = (id, data) => {\n    return findItemIndexById(id, data)\n  }\n\n  updateItem = (id, props) => {\n    const idx = this.findItemIndexById(id, this.state.data)\n    const updated = [...this.state.data] // copy\n    // TODO: validate props against schema\n    if (idx >= 0) {\n      for (const [key, value] of Object.entries(props)) {\n        updated[idx][key] = value\n      }\n      this.setState({ ...this.state, data: updated })\n    }\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    const dataActionHandlers = {\n      submit: {\n        schema: {},\n        handler: (objs) => {\n          // submit\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'submitted',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n        }\n      },\n      replace: {\n        schema: {},\n        handler: (objs) => {\n          // append\n          const data_state = this.state.data || []\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replacing',\n            { count: data_state.length, old: data_state, new: objs },\n            {}\n          )\n          const data = objs\n          if (this.updateView('replace', [], [], data)) {\n            this.setState({ ...this.state, data: data })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replaced',\n            { count: data.length, items: data },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data },\n            {}\n          )\n        }\n      },\n      push: {\n        schema: {},\n        handler: (objs) => {\n          // append\n          const data_added = []\n          const data_updated = [] // contains ids\n          const data_state = this.state.data || []\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, data_state)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = mergeDeep(data_state[idx], obj) // TODO: fetch from utils\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = { selectedId: obj.id, selectedIndex: idx }\n            }\n          })\n          const data = [...data_state, ...data_added]\n          // notify parent class of push event\n          try {\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(this.props.id, 'pushing', data_added, {})\n            if (this.updateView('push', data_added, data_updated, data)) {\n              this.setState({ ...this.state, ...selected, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('push', e)\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'pushed',\n            { count: data.length, items: data, added: data_added },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            {\n              count: data.length,\n              items: data,\n              added: data_added,\n              updated: data_updated\n            },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      push_front: {\n        schema: {},\n        handler: (objs) => {\n          const data_added = []\n          const data_updated = []\n          const data_state = this.state.data || []\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, this.state.data)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = obj\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = {\n                selectedId: obj.id,\n                selectedIndex: idx || data_added.length - 1\n              }\n            }\n          })\n          const data = [...data_added, ...data_state]\n          if (this.updateView('push_front', [], data_updated, data)) {\n            this.setState({ ...this.state, ...selected, data: data })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      delete: {\n        schema: {},\n        handler: (objs) => {\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          let data = this.state.data\n          const data_updated = []\n          const deleting = []\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, data)\n              if (idx !== null) {\n                deleting.push(obj.id)\n                data = removeItemIndexByIndex(idx, data)\n                data_updated.push(idx)\n              }\n            }\n          })\n          try {\n            if (this.updateView('delete', [], data_updated, data)) {\n              this.setState({ ...this.state, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('delete', e)\n          }\n\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data, deleted: deleting },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'deleted',\n            { count: deleting.length, items: data, deleted: deleting },\n            {}\n          )\n        }\n      },\n      pop: {\n        schema: {},\n        handler: (obj) => {\n          if (this.state.data.length > 0) {\n            this.state.data.splice(this.state.data.length - 1, 1)\n            if (this.updateView('pop', [], [], this.state.data)) {\n              this.setState({ ...this.state, data: this.state.data })\n              // Event.EventManager.getInstance().addEvent(\n              this.ddEvent = this.eventManager.addEvent(\n                this.props.id,\n                'changed',\n                { count: this.state.data.length, items: this.state.data },\n                {}\n              )\n            }\n          }\n        }\n      },\n      pop_front: {\n        schema: {},\n        handler: (obj) => {\n          this.state.data.splice(0, 1)\n          if (this.updateView('pop_front', [], [], this.state.data)) {\n            this.setState({ ...this.state, data: this.state.data })\n            // Event.EventManager.getInstance().addEvent(\n            this.ddEvent = this.eventManager.addEvent(\n              this.props.id,\n              'changed',\n              { count: this.state.data.length, items: this.state.data },\n              {}\n            )\n          }\n        }\n      },\n      select: {\n        schema: {},\n        handler: (objs) => {\n          const data_updated = []\n          const selected = []\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          // allow only one selection\n          for (let i = 0; i < this.state.data.length; i++) {\n            this.state.data[i].selected = false\n          }\n          // find selected\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, this.state.data)\n              if (idx !== null) {\n                this.state.data[idx].selected = !this.state.data[idx].selected\n                this.state.selectedId = this.state.data[idx].id\n                this.state.selectedIndex = idx\n                data_updated.push(idx)\n                selected.push(this.state.data[idx])\n              }\n            }\n          })\n          // for now we just replace the state\n          this.setState({ ...this.state, data: this.state.data })\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'selecting',\n            objs,\n            null\n          )\n          if (this.updateView('select', objs, data_updated, this.state)) {\n            // Event.EventManager.getInstance().addEvent(\n            this.ddEvent = this.eventManager.addEvent(\n              this.props.id,\n              'selected',\n              selected,\n              null\n            )\n          }\n        }\n      },\n      clear: {\n        schema: {},\n        handler: (obj) => {\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'clearing',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.setState({ ...this.state, data: [] })\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'cleared',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.ddEvent = this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.updateView('clear', [], [], [])\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    // this.ddEvent = Event.EventManager.getInstance().register(\n    this.ddEvent = this.eventManager.register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n\nexport class ListBase extends StateBaseComponent.StateBaseComponent {\n  /**\n   * Used to manage internal state of avatars\n   */\n  constructor(props) {\n    if (!props.config.options) {\n      props.config.options = {}\n    }\n    super(props)\n    this.props = props\n  }\n\n  updateView = (action, arr, updated, data) => {\n    // extend by parent\n    return true\n  }\n\n  exceptionCatched = (action_name, event_object) => {\n    console.info('ListBase: ' + action_name + ' --> ', event_object)\n  }\n\n  findItemIndexById = (id, data) => {\n    if (this.stateManager) {\n      return this.stateManager.findItemIndexById(id, data)\n    }\n  }\n\n  updateItem = (id, props, silent) => {\n    if (silent) {\n      return this.updateItemSilent(id, props)\n    } else {\n      return this.triggerAction('push', { ...props, id: id })\n    }\n  }\n\n  updateItemSilent = (id, props) => {\n    if (this.stateManager) {\n      return this.stateManager.updateItem(id, props)\n    }\n  }\n\n  getData = () => {\n    return this.state.data\n  }\n\n  showSelectedRow = (row) => {\n    if (this.props.config.options.select) {\n      return row.selected\n    }\n    return false\n  }\n\n  showSelected = (id, idx) => {\n    // parent implementation to update the visual representation\n    return true // returns true to update state. Else do not update state.\n  }\n\n  setSelectedId = (id, evt, selected) => {\n    // Event.EventManager.getInstance().addAction(this.props.id, 'select', { id: id });\n    this.triggerAction('select', { id: id })\n  }\n\n  getSelectedId = () => {\n    const selected = []\n    this.state.data.forEach((itm) => {\n      if (itm.selected) {\n        selected.push(itm.id)\n      }\n    })\n    return selected\n  }\n\n  getItemTreeState = () => {\n    const selected = []\n    const expanded = []\n    this.state.data.forEach((itm) => {\n      if (itm.selected) {\n        selected.push(itm.id)\n      }\n      if (itm.expanded) {\n        expanded.push(itm.id)\n      }\n    })\n    return {\n      selected: selected,\n      expanded: expanded,\n      focused: this.state.selectedId\n    }\n  }\n\n  handleSelect = (key, data, index, evt) => {\n    if (!evt) {\n      this.setSelectedId(data.id, evt)\n    }\n  }\n\n  render() {\n    return null\n  }\n}\n/*\nmodule.exports.triggers = triggers\nmodule.exports.events = events\nmodule.exports.StateList = StateList\nmodule.exports.ListBase = ListBase\n*/\nexport default { events, triggers, StateList, ListBase }\n"],"names":["schema_only_id","$id","type","items","$ref","definitions","identifier","additionalProperties","properties","id","required","title","triggers","submit","alias","info","name","description","schema","replace","push","push_front","delete","pop","pop_front","select","clear","events","changed","replacing","replaced","submitted","deleted","pushing","pushed","selected","deselected","clearing","cleared","StateList","_StateBase$StateInsta","_inherits","_super","_createSuper","props","_this","_classCallCheck","this","call","_defineProperty","_assertThisInitialized","data","findItemIndexById","idx","state","updated","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","key","value","setState","_objectSpread","_objectSpread2","actionHandlers","eventHandlers","component_info","dataActionHandlers","handler","objs","eventManager","addEvent","count","data_state","Array","isArray","old","new","updateView","data_added","data_updated","forEach","obj","mergeDeep","selectedId","selectedIndex","e","exceptionCatched","added","ddEvent","concat","_toConsumableArray","deleting","removeItemIndexByIndex","splice","i","register","_data","_typeof","manager","Error","getEventManager","_createClass","StateBase","StateInstance","ListBase","_StateBaseComponent$S","_super2","_this2","config","options","action","arr","action_name","event_object","console","stateManager","silent","updateItemSilent","triggerAction","updateItem","row","evt","itm","expanded","focused","index","setSelectedId","StateBaseComponent","ListBase$1"],"mappings":"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"}