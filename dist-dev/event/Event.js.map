{"version":3,"file":"Event.js","sources":["../../src/event/Event.js"],"sourcesContent":["/***\nhttps://stackoverflow.com/questions/44719103/singleton-object-in-react-native\n\nimport EventManager from './EventManager';\n\n// When storing data.\nlet commonData = EventManager.getInstance();\ncommonData.setUserID(\"User1\");\n\n// When retrieving stored data.\nlet commonData = EventManager.getInstance();\nlet userId = commonData.getUserID();\nconsole.log(userId);\n\n*/\nclass EventManager {\n  static _instance = null\n\n  _events = {}\n  _watching = {}\n  _actions = {}\n  _components = {}\n  _component_instance_type = {}\n\n  /**\n   * @returns {EventManager}\n   */\n  static getInstance() {\n    if (EventManager._instance === null) {\n      EventManager._instance = new EventManager()\n    }\n\n    return this._instance\n  }\n\n  /// //////////////////////////////////////////////\n  /// Utility functions\n  /// //////////////////////////////////////////////\n\n  getType(oObj) {\n    let res = false\n    if (typeof oObj === 'object') {\n      res =\n        oObj === null\n          ? 'null'\n          : // Check if it is an alien object, for example created as {world:'hello'}\n          typeof oObj.constructor !== 'function'\n          ? 'object'\n          : // else return object name (string)\n            oObj.constructor.name\n    } else {\n      // Test simple types (not constructed types)\n      res =\n        typeof oObj === 'boolean'\n          ? 'boolean'\n          : typeof oObj === 'number'\n          ? 'number'\n          : typeof oObj === 'string'\n          ? 'string'\n          : typeof oObj === 'function'\n          ? 'function'\n          : false\n    }\n    return (res + '').toLowerCase()\n  }\n\n  clearAll() {\n    this._events = {}\n    this._watching = {}\n    this._actions = {}\n    this._component_instance_type = {}\n  }\n\n  warnRegistration(input_type, component_id, event_name, msg) {\n    const newLocal =\n      'Update registration for ' +\n      input_type +\n      ' ' +\n      component_id +\n      '.' +\n      event_name +\n      ' : ' +\n      msg\n    console.warn(newLocal)\n    // TODO: should notify the UI\n  }\n\n  warnInfoRegistration(component_id, msg) {\n    console.warn('Update registration for ' + component_id + ': ' + msg)\n    // TODO: should notify the UI\n  }\n\n  valid(obj, attr, type, default_value, component_id, key, input_type) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (!obj.hasOwnProperty(attr)) {\n      obj[attr] = default_value\n      this.warnRegistration(\n        input_type,\n        component_id,\n        key,\n        'Attribute ' + attr + ' missing. Using default value.'\n      )\n    }\n    if (this.getType(obj[attr]) !== type) {\n      this.warnRegistration(\n        input_type,\n        component_id,\n        key,\n        `Attribute ${attr} should be of type ${type} but is ${this.getType(\n          obj[attr]\n        )} using default values.`\n      )\n    }\n  }\n\n  validInputsForUI(obj, input_type, component_id, key) {\n    // check if schema is specified. Used by UI and validating inputs during runtime\n    this.valid(\n      obj,\n      'schema',\n      'object',\n      {\n        type: 'object',\n        title: component_id + '-' + key,\n        description: 'Auto generated'\n      },\n      component_id,\n      key,\n      input_type\n    )\n  }\n\n  capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n  }\n\n  /// //////////////////////////////////////////////\n  /// Component self registering (is called in component)\n  /// //////////////////////////////////////////////\n\n  register(component_id, actions, events, component_info) {\n    // TODO: validate input action\n    if (!component_info) {\n      console.warn('Component info is missing for ' + component_id) // throw \"Component info is missing\";\n    } else {\n      this._components[component_info.type] = component_info\n      this._components[component_info.type].actions = actions\n      this._components[component_info.type].events = events\n      this._component_instance_type[component_id] = component_info.type\n    }\n\n    this._actions[component_id] = {}\n    this._events[component_id] = events || {}\n    // lets save our actions\n    Object.keys(actions).forEach((key) => {\n      // validate the action registration\n      let action = actions[key]\n      // if we only specify function, lets refactor\n      if (typeof action === 'function') {\n        action = { handler: action }\n        this.warnRegistration(\n          component_id,\n          key,\n          'Function handler should be defined as handler in an object. Auto refactoring done.'\n        )\n      }\n      this.validInputsForUI(action, 'action', component_id, key)\n      this._actions[component_id][key] = action\n    })\n\n    const event_map = {} // used to return the event mapping id\n\n    // lets assign ids to the events\n    Object.keys(this._events[component_id]).forEach((key) => {\n      const key_id = key // TODO: should be random\n      if (!this._events[component_id][key].id) {\n        // if undefined, null or 0\n        this._events[component_id][key].id = key_id\n        event_map[key] = { id: key_id } // REMOVE ME when refactoring this\n      } else {\n        event_map[key] = { id: this._events[component_id][key].id } // TODO: EVENT HAS CALLABLE HANDLER\n      }\n      this.validInputsForUI(\n        this._events[component_id][key],\n        'event',\n        component_id,\n        key\n      )\n    })\n\n    return event_map\n  }\n\n  /// //////////////////////////////////////////////\n  /// modelui core functions\n  /// //////////////////////////////////////////////\n\n  addToWatchList(cid, evt, trigger_id, trigger_action, transform) {\n    if (!this._watching[cid]) {\n      this._watching[cid] = {}\n    }\n    if (this._watching[cid][evt] === undefined) {\n      this._watching[cid][evt] = [] // add a trigger array for component\n    }\n\n    // add to trigger array an action to perform\n    this._watching[cid][evt].push({\n      tid: trigger_id, // trigger id\n      act: trigger_action, // trigger event\n      transf: transform // transformation function (TODO: if not set find one!!!)\n    })\n  }\n\n  watch(W) {\n    // TODO: validate W against registered\n    if (Array.isArray(W) === false) {\n      W = [W]\n    }\n\n    for (let i = 0; i < W.length; i++) {\n      const w = W[i]\n      const cid = w.component.id\n      const evt = w.component.event\n      if (w.component.filter) {\n        // if this is a filtered watch\n        if (!w.component.regex) {\n          // only compile expression if missing\n          w.component.regex = new RegExp(w.component.filter)\n        }\n        Object.entries(this._actions).forEach(([cid_key, value]) => {\n          if (w.component.regex.exec(cid_key)) {\n            this.addToWatchList(\n              cid_key,\n              evt,\n              w.trigger.id,\n              w.trigger.action,\n              w.transform\n            )\n          }\n        })\n      } else {\n        // lets add the id to watch list instead\n        if (cid) {\n          this.addToWatchList(\n            cid,\n            evt,\n            w.trigger.id,\n            w.trigger.action,\n            w.transform\n          )\n        }\n      }\n    }\n  }\n\n  addEvent(cid, event_name, data, evt) {\n    // are we watching this component\n    if (this._watching[cid]) {\n      console.info('--> event ' + cid + ' :' + event_name)\n      // are we watching this component event\n      const actions = this._watching[cid][event_name] || []\n      for (const a in actions) {\n        const act = actions[a]\n        this.addAction(act.tid, act.act, data, act.transf, evt)\n      }\n    }\n  }\n\n  addAction(component_id, action_name, data, transform, evt) {\n    if (this._actions[component_id]) {\n      console.info('--> action ' + component_id + ' :' + action_name)\n      if (this._actions[component_id][action_name]) {\n        console.info('--> xx ')\n        let transformed_data = data\n        if (transform) {\n          try {\n            transformed_data = transform(data)\n          } catch (e) {\n            console.error('Transform failed', e)\n          }\n        }\n        if (transformed_data) {\n          // only apply action if data is available\n          this._actions[component_id][action_name].handler(\n            transformed_data,\n            evt\n          )\n        }\n      }\n    }\n  }\n\n  /// //////////////////////////////////////////////\n  /// Debugging\n  /// //////////////////////////////////////////////\n\n  getCopyOfEvents() {\n    return Object.assign({}, this._events)\n  }\n\n  getCopyOfWatchers() {\n    return Object.assign({}, this._watching)\n  }\n\n  getCopyOfActions() {\n    return Object.assign({}, this._actions)\n  }\n\n  /// //////////////////////////////////////////////\n  /// Modeller UI related functions\n  /// //////////////////////////////////////////////\n\n  collectComponentInventory() {\n    const store = {}\n\n    for (const [key, comp] of Object.entries(this._components)) {\n      let parents = ''\n      if (comp.relation) {\n        parents = comp.relation.within\n      }\n      store[key] = {\n        id: comp.type,\n        title: comp.name,\n        type: comp.type,\n        parent: parents\n      }\n    }\n    return store\n  }\n\n  getComponentSchema(type) {\n    return this._components[type].options\n  }\n\n  getComponentByType(type) {\n    return this._components[type]\n  }\n\n  getComponentsRegistered() {\n    return Object.keys(this._component_instance_type)\n  }\n\n  getComponentType(component_id) {\n    return this._component_instance_type[component_id]\n  }\n}\n\nconst getTransformFunction = (evt) => {\n  // the event has .transform as attribute\n  if (typeof (evt.transform || evt.code) !== 'string') {\n    return 'Event code attribute is missing'\n  }\n  try {\n    // TODO: support more params\n    // eslint-disable-next-line no-new-func\n    const fn = Function('data', evt.transform || evt.code)\n    return fn\n  } catch (e) {\n    return e + ''\n  }\n}\n\nexport default { EventManager, getTransformFunction }\n"],"names":["EventManager","_classCallCheck","this","_defineProperty","_createClass","key","value","oObj","_typeof","constructor","name","toLowerCase","_events","_watching","_actions","_component_instance_type","input_type","component_id","event_name","msg","newLocal","console","warn","obj","attr","type","default_value","hasOwnProperty","warnRegistration","getType","concat","valid","title","description","str","charAt","toUpperCase","slice","actions","events","component_info","_this","_components","Object","keys","forEach","action","handler","validInputsForUI","event_map","key_id","id","cid","evt","trigger_id","trigger_action","transform","undefined","push","tid","act","transf","W","_this2","Array","isArray","_loop","w","i","component","event","filter","regex","RegExp","entries","_ref","_ref2","_slicedToArray","cid_key","exec","addToWatchList","trigger","length","data","info","a","addAction","action_name","transformed_data","e","error","assign","store","_i","_Object$entries","_Object$entries$_i","comp","parents","relation","within","parent","options","_instance","Event","getTransformFunction","code","Function"],"mappings":"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"}