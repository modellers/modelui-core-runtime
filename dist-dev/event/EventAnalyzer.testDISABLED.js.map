{"version":3,"file":"EventAnalyzer.testDISABLED.js","sources":["../../src/event/EventAnalyzer.testDISABLED.js"],"sourcesContent":["/* eslint-disable no-const-assign */\n/* eslint-disable no-unused-vars */\nimport EventAnalyzer from './EventAnalyzer'\nimport StateManager from './StateManager'\nimport Manager from '../layout/Manager'\n// FIXME: import { registerList } from '../components/List/List'\nimport CommonEvents from './CommonEvents'\n\nconst simple_schema = {\n  $id: 'simple_schema',\n  type: 'object',\n  properties: {\n    foo: { type: 'integer' },\n    bar: { type: 'string' }\n  },\n  required: ['foo'],\n  additionalProperties: false\n}\n\nconst simple_data_ok = {\n  foo: 1,\n  bar: 'abc'\n}\n\nconst simple_data_bad = {\n  foo: '1',\n  bar: 999\n}\n\nconst schema_only_id = {\n  // \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  $id: 'v1/listbase/..',\n  type: 'array',\n  items: {\n    $ref: '#/definitions/identifier'\n  },\n  definitions: {\n    identifier: {\n      type: 'object',\n      additionalProperties: true,\n      properties: {\n        id: {\n          type: 'string'\n        }\n      },\n      required: ['id'],\n      title: 'Identifier with additional properties'\n    }\n  }\n}\n\nconst array_of_ids = [{ id: 'myfirst_id_item' }, { id: 'mysecond_id_item' }]\n\n/// event tests\n\nconst event_simple_event = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_allowing_none_state = {\n  output: [],\n  input: [],\n  component: { id: 'app', event: 'ready' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_missing_event = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'missing_event' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_missing_action = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'missing_action' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_bad_input_data = {\n  output: [array_of_ids],\n  input: [[{ noid: 1 }, { noid: 2 }]],\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_bad_ouput_data = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return [{ noid: 1 }, { noid: 2 }]\n  }\n}\nconst event_bad_transfrom = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    const a = 2\n    a = 3 // not allowed to reasign const\n    return data\n  }\n}\nconst event_skip_whitetesting = {\n  output: [undefined], // undefined output skips whitebox testing and only performs blackbox testing\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_bad_whitetesting = {\n  output: [[{ id: 666 }]], // white box test expected other result\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_missing_inputdata = {\n  output: [], // no outputs\n  input: [], // no inputs\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_missing_compnent_section = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_missing_compnent_id = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  component: { id: 'component-missing_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_missing_compnent_type = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\n\nconst event_missing_trigger_section = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'selected' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_missing_trigger_id = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger-missing_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_missing_trigger_type = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'delete' },\n  transform: function (data) {\n    return data\n  }\n}\nconst event_missing_transform_section = {\n  output: [array_of_ids],\n  input: [array_of_ids],\n  component: { id: 'component_id', event: 'selected' },\n  trigger: { id: 'trigger_id', action: 'delete' }\n}\nconst event_tests = [\n  event_simple_event,\n  event_allowing_none_state,\n  event_missing_event,\n  event_missing_event, // test avoid dupl\n  event_missing_event, // test avoid dupl\n  event_missing_action,\n  event_bad_input_data,\n  event_bad_ouput_data,\n  event_bad_transfrom,\n  event_skip_whitetesting,\n  event_bad_whitetesting,\n  event_missing_inputdata,\n  event_missing_compnent_section,\n  event_missing_compnent_id,\n  event_missing_compnent_type,\n  event_missing_trigger_section,\n  event_missing_trigger_id,\n  event_missing_trigger_type,\n  event_missing_transform_section\n]\n\ndescribe('EventAnalyzer.EventAnalyzer', () => {\n  it('is exported', () => {\n    expect(EventAnalyzer.EventAnalyzer).toBeTruthy()\n  })\n})\n/*\ndescribe('EventAnalyzer.EventAnalyzer test', () => {\n  beforeEach(() => {\n    Manager.ComponentManager.getInstance().clearAll()\n    EventAnalyzer.EventAnalyzer.getInstance().clearAll()\n    // register components\n    registerList(Manager.ComponentManager.getInstance())\n    CommonEvents.registerEventApp(Manager.ComponentManager.getInstance())\n    // prepare state manager\n    StateManager.StateManager.getInstance().clearAll()\n    StateManager.StateManager.getInstance().createState({\n      id: 'component_id',\n      type: 'list',\n      config: {\n        options: {}\n      },\n      data: [],\n      schema: {}\n    })\n\n    StateManager.StateManager.getInstance().createState({\n      id: 'trigger_id',\n      type: 'list',\n      config: {\n        options: {}\n      },\n      data: [],\n      schema: {}\n    })\n  })\n\n  test('registerSchema with callback test', (done) => {\n    EventAnalyzer.EventAnalyzer.getInstance().registerSchema(simple_schema, (result) => {\n      expect(result.success).toBeTruthy()\n      done()\n    })\n  })\n\n  test('registerSchema without callback test', (done) => {\n    EventAnalyzer.EventAnalyzer.getInstance().registerSchema(simple_schema)\n    done()\n  })\n\n  test('registerSchema with definition test', (done) => {\n    EventAnalyzer.EventAnalyzer.getInstance().registerSchema(schema_only_id, (result) => {\n      expect(result.success).toBeTruthy()\n      done()\n    })\n  })\n\n  test('getSchema that is cached test', (done) => {\n    const compiled_schema = EventAnalyzer.EventAnalyzer.getInstance().getSchema(simple_schema)\n    expect(compiled_schema.schema.$id).toEqual('simple_schema')\n    done()\n  })\n\n  test('getSchema that is not cached test', (done) => {\n    const notcache_schema = {\n      $id: 'notcache_schema',\n      type: 'object',\n      properties: {\n        foo: { type: 'integer' },\n        bar: { type: 'string' }\n      },\n      required: ['foo'],\n      additionalProperties: false\n    }\n    const compiled_schema =\n      EventAnalyzer.EventAnalyzer.getInstance().getSchema(notcache_schema)\n    expect(compiled_schema.schema.$id).toEqual('notcache_schema')\n    done()\n  })\n\n  test('getSchema that is not cached (x2) test', (done) => {\n    const notcache_schema = {\n      $id: 'notcache_schemax2',\n      type: 'object',\n      properties: {\n        foo: { type: 'integer' },\n        bar: { type: 'string' }\n      },\n      required: ['foo'],\n      additionalProperties: false\n    }\n    EventAnalyzer.EventAnalyzer.getInstance().getSchema(notcache_schema)\n    const compiled_schema =\n      EventAnalyzer.EventAnalyzer.getInstance().getSchema(notcache_schema)\n    expect(compiled_schema.schema.$id).toEqual('notcache_schemax2')\n    done()\n  })\n\n  test('validateData valid data test', (done) => {\n    EventAnalyzer.EventAnalyzer.getInstance().registerSchema(\n      simple_schema,\n      (register_result) => {\n        const result = EventAnalyzer.EventAnalyzer.getInstance().validateData(\n          simple_schema,\n          simple_data_ok\n        )\n        expect(result.valid).toBeTruthy()\n        expect(result.error).toEqual(null)\n        done()\n      }\n    )\n  })\n\n  test('validateData bad data test', (done) => {\n    EventAnalyzer.EventAnalyzer.getInstance().registerSchema(\n      simple_schema,\n      (register_result) => {\n        const result = EventAnalyzer.EventAnalyzer.getInstance().validateData(\n          simple_schema,\n          simple_data_bad\n        )\n        expect(result.valid).toBeFalsy()\n        expect(result.error.length).toEqual(1)\n        done()\n      }\n    )\n  })\n\n  test('getSchemaDefaults empty schema test', () => {\n    const empty_result = EventAnalyzer.EventAnalyzer.getInstance().getSchemaDefaults({})\n    expect(empty_result).toEqual({})\n  })\n\n  test('validateEventAction simple event test', (done) => {\n    const report =\n      EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(event_simple_event)\n    expect(report.error_detail).toEqual(undefined)\n    expect(report.error_resolve).toEqual(undefined)\n    done()\n  })\n\n  test('validateEventAction missing transform section test', (done) => {\n    const report = EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(\n      event_missing_transform_section\n    )\n    expect(report.error_detail).toEqual('Transform section is required')\n    expect(report.error_resolve).toEqual('Add transform section to event')\n    done()\n  })\n\n  test('validateEventAction missing event test', (done) => {\n    const report =\n      EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(event_missing_event)\n    expect(report.error_detail).toEqual(\n      \"Component 'component_id' does not have event 'missing_event'\"\n    )\n    expect(report.error_resolve).toEqual(\n      'Use one of these changed,replacing,replaced,submitted,deleted,pushing,pushed,selected,deselected,clearing,cleared'\n    )\n    done()\n  })\n\n  test('validateEventAction missing action test', (done) => {\n    const report =\n      EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(event_missing_action)\n    expect(report.error_detail).toEqual(\n      \"Component 'trigger_id' does not have action 'missing_action'\"\n    )\n    expect(report.error_resolve).toEqual(\n      'Use one of these submit,replace,push,push_front,delete,pop,pop_front,select,clear'\n    )\n    done()\n  })\n\n  test('validateEventAction bad input data test', (done) => {\n    const report =\n      EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(event_bad_input_data)\n    expect(report.error_detail).toEqual(\n      'Component \\'component_id\\' event \\'selected\\' was provided with bad input data [{\"noid\":1},{\"noid\":2}]'\n    )\n    expect(report.error_resolve).toEqual(\n      'Must conform to schema \"v1/listbase/selected\"'\n    )\n    done()\n  })\n\n  test('validateEventAction bad output data test', (done) => {\n    const report =\n      EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(event_bad_ouput_data)\n    expect(report.error_detail).toEqual(\n      'Component \\'trigger_id\\' action \\'delete\\' was provided with bad input data [{\"noid\":1},{\"noid\":2}]'\n    )\n    expect(report.error_resolve).toEqual(\n      'Must conform to schema \"v1/listbase/delete\"'\n    )\n    done()\n  })\n\n  test('validateEventAction bad transform test', (done) => {\n    const report =\n      EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(event_bad_transfrom)\n    expect(report.error_detail).toEqual(\n      \"Component 'component_id' transform 'delete' failed executing. Error given: TypeError: \\\"a\\\" is read-only\"\n    )\n    expect(report.error_resolve).toEqual('Fix transform code')\n    done()\n  })\n\n  test('validateEventAction skip whitebox test', (done) => {\n    const report = EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(\n      event_skip_whitetesting\n    )\n    expect(report.error_detail).toEqual(undefined)\n    expect(report.error_resolve).toEqual(undefined)\n    done()\n  })\n\n  test('validateEventAction bad whitebox test', (done) => {\n    const report = EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(\n      event_bad_whitetesting\n    )\n    expect(report.error_detail).toEqual(\n      \"Whitebox 'component_id' testing got unexpected result with regard to input\"\n    )\n    expect(report.error_resolve).toEqual(\n      'Fix transform code or re-evaluate expected result'\n    )\n    done()\n  })\n\n  test('validateEventAction missing input data creates default input values test', (done) => {\n    const report = EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(\n      event_missing_inputdata\n    )\n    expect(report.error_detail).toEqual(undefined)\n    expect(report.error_resolve).toEqual(undefined)\n    done()\n  })\n\n  test('validateEventActions test', (done) => {\n    const reports =\n      EventAnalyzer.EventAnalyzer.getInstance().validateEventActions(event_tests)\n    expect(reports.length).toEqual(14)\n    // expect(reports[reports.length - 1]).toEqual({})\n    done()\n  })\n\n  // Tests for missing component section\n  test('validateEventAction missing component section test', (done) => {\n    const report = EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(\n      event_missing_compnent_section\n    )\n    expect(report.error_detail).toEqual('Component section is required')\n    expect(report.error_resolve).toEqual('Add component section to event')\n    done()\n  })\n\n  // Tests for missing trigger section\n  test('validateEventAction missing trigger section test', (done) => {\n    const report = EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(\n      event_missing_trigger_section\n    )\n    expect(report.error_detail).toEqual('Trigger section is required')\n    expect(report.error_resolve).toEqual('Add trigger section to event')\n    done()\n  })\n\n  //  Tests for missing component id\n  test('validateEventAction missing component id test', (done) => {\n    const report = EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(\n      event_missing_compnent_id\n    )\n    expect(report.error_detail).toEqual(\n      \"Component 'component-missing_id' was not registered with state manager\"\n    )\n    expect(report.error_resolve).toEqual(\n      \"Make sure state manager registers 'component-missing_id'\"\n    )\n    done()\n  })\n\n  // Tests for missing trigger id\n  test('validateEventAction missing trigger id test', (done) => {\n    const report = EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(\n      event_missing_trigger_id\n    )\n    expect(report.error_detail).toEqual(\n      \"Trigger 'trigger-missing_id' was not registered with state manager\"\n    )\n    expect(report.error_resolve).toEqual(\n      \"Make sure state manager registers 'trigger-missing_id'\"\n    )\n    done()\n  })\n\n  // Tests for missing component type\n  test('validateEventAction missing component type test', (done) => {\n    const comp = StateManager.getInstance().getManager('component_id')\n    comp.props.type = comp.type = 'no_such_type' // remove the registration\n    const x = StateManager.getInstance().getManager('component_id')\n    const report = EventAnalyzer.EventAnalyzer.getInstance().validateEventAction(\n      event_missing_compnent_type\n    )\n    expect(report.error_detail).toEqual(\n      \"Component type 'no_such_type' is not supported\"\n    )\n    expect(report.error_resolve).toEqual('Use one of these: list')\n    done()\n  })\n\n})\n*/\n"],"names":["describe","it","expect","EventAnalyzer","toBeTruthy"],"mappings":"mRAoOAA,SAAS,+BAA+B,WACtCC,GAAG,eAAe,WAChBC,OAAOC,EAAcA,eAAeC,YACrC,GACF"}