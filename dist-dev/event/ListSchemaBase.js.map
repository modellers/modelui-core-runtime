{"version":3,"file":"ListSchemaBase.js","sources":["../../src/event/ListSchemaBase.js"],"sourcesContent":["// common tools\nimport ListBase from './ListBase'\nimport StateBaseComponent from './StateBaseComponent'\nimport {\n  findItemIndexById,\n  removeItemIndexByIndex,\n  mergeDeep\n} from '../util/ObjUtil'\n// event handler\n// import Event from './Event'\n\nexport const triggers = ListBase.triggers\nexport const events = ListBase.events\n\nconst schema_with_ids = {\n  $id: 'identifiers',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'Identifiers',\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string'\n    }\n  },\n  required: ['id']\n}\nexport class StateSchemaList extends ListBase.StateList {\n  constructor(props) {\n    super(props)\n    this.props = props\n    // ensure array\n    let _data = []\n    const _schema = props.data.schema || this.props.schema || schema_with_ids // expect ids\n    if (props.data) {\n      // make sure we have at least a data property\n      if (!props.data.items) {\n        throw new Error('Expecting data property in data object')\n      }\n      if (Array.isArray(props.data.items)) {\n        _data = props.data.items\n      } else {\n        // check if this is an empty object\n        if (typeof props.data.items === 'object') {\n          // objects should not be empty\n          if (props.data.items.length) {\n            _data = [props.data.items]\n          }\n        } else {\n          _data = [props.data.items]\n        }\n      }\n    }\n    // apply default values\n    this.state = {\n      schema: _schema,\n      data: _data || [],\n      selectedIndex: 0,\n      selectedId: null\n    }\n\n    if (!this.props.manager) {\n      throw new Error('Manager was not passed through StateSchemaList props')\n    }\n\n    this.eventManager = this.props.manager.getEventManager()\n  }\n\n  findItemIndexById = (id, data) => {\n    return findItemIndexById(id, data)\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    const dataActionHandlers = {\n      submit: {\n        schema: {},\n        handler: (objs) => {\n          // submit\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'submitted',\n            {\n              count: this.state.data.length,\n              items: this.state.data,\n              schema: this.state.schema\n            },\n            {}\n          )\n        }\n      },\n      replace: {\n        // is the only way to change the schema\n        schema: {},\n        handler: (objs) => {\n          // replace content\n\n          // make sure we get items and / or schema properties\n          const data_state = this.state\n          if (objs.schema) {\n          } // TODO: validate schema\n          if (objs.items) {\n            if (!Array.isArray(objs.items)) {\n              objs.items = [objs.items]\n            }\n            // TODO: validate data (new or old) against new schema\n          }\n\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replacing',\n            { old: data_state, new: objs },\n            {}\n          )\n          const data = objs\n          if (this.updateView('replace', [], [], data.items)) {\n            this.setState({\n              ...this.state,\n              data: data.items || this.state.data,\n              schema: data.schema || this.state.schema\n            })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replaced',\n            {\n              count: this.state.data.length,\n              items: this.state.data,\n              schema: this.state.schema\n            },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            {\n              count: this.state.data.length,\n              items: this.state.data,\n              schema: this.state.schema\n            },\n            {}\n          )\n        }\n      },\n      push: {\n        schema: {},\n        handler: (objs) => {\n          // append\n          const data_added = []\n          const data_updated = [] // contains ids\n          const data_state = [...(this.state.data || [])] // FIXME: use better way\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, data_state)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = mergeDeep(data_state[idx], obj)\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = { selectedId: obj.id, selectedIndex: idx }\n            }\n          })\n          const data = [...data_state, ...data_added]\n          // notify parent class of push event\n          try {\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(this.props.id, 'pushing', data_added, {})\n            if (this.updateView('push', data_added, data_updated, data)) {\n              this.setState({ ...this.state, ...selected, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('push', e)\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'pushed',\n            { count: data.length, items: data, added: data_added },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            {\n              count: data.length,\n              items: data,\n              added: data_added,\n              updated: data_updated\n            },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      push_front: {\n        schema: {},\n        handler: (objs) => {\n          const data_added = []\n          const data_updated = []\n          const data_state = [...(this.state.data || [])] // FIXME: use better way\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, this.state.data)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = obj\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = {\n                selectedId: obj.id,\n                selectedIndex: idx || data_added.length - 1\n              }\n            }\n          })\n          const data = [...data_added, ...data_state]\n          if (this.updateView('push_front', [], data_updated, data)) {\n            this.setState({ ...this.state, ...selected, data: data })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      delete: {\n        schema: {},\n        handler: (objs) => {\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          let data = this.state.data\n          const data_updated = []\n          const deleting = []\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, data)\n              if (idx !== null) {\n                deleting.push(obj.id)\n                data = removeItemIndexByIndex(idx, data)\n                data_updated.push(idx)\n              }\n            }\n          })\n          try {\n            if (this.updateView('delete', [], data_updated, data)) {\n              this.setState({ ...this.state, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('delete', e)\n          }\n\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data, deleted: deleting },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'deleted',\n            { count: deleting.length, items: data, deleted: deleting },\n            {}\n          )\n        }\n      },\n      pop: {\n        schema: {},\n        handler: (obj) => {\n          if (this.state.data.length > 0) {\n            this.state.data.splice(this.state.data.length - 1, 1)\n            if (this.updateView('pop', [], [], this.state.data)) {\n              this.setState({ ...this.state, data: this.state.data })\n              // Event.EventManager.getInstance().addEvent(\n              this.eventManager.addEvent(\n                this.props.id,\n                'changed',\n                { count: this.state.data.length, items: this.state.data },\n                {}\n              )\n            }\n          }\n        }\n      },\n      pop_front: {\n        schema: {},\n        handler: (obj) => {\n          this.state.data.splice(0, 1)\n          if (this.updateView('pop_front', [], [], this.state.data)) {\n            this.setState({ ...this.state, data: this.state.data })\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(\n              this.props.id,\n              'changed',\n              { count: this.state.data.length, items: this.state.data },\n              {}\n            )\n          }\n        }\n      },\n      select: {\n        schema: {},\n        handler: (objs) => {\n          const data_updated = []\n          const selected = []\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          // allow only one selection\n          for (let i = 0; i < this.state.data.length; i++) {\n            this.state.data[i].selected = false\n          }\n          // find selected\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, this.state.data)\n              if (idx !== null) {\n                this.state.data[idx].selected = !this.state.data[idx].selected\n                this.state.selectedId = this.state.data[idx].id\n                this.state.selectedIndex = idx\n                data_updated.push(idx)\n                selected.push(this.state.data[idx])\n              }\n            }\n          })\n          // for now we just replace the state\n          this.setState({ ...this.state, data: this.state.data })\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(this.props.id, 'selecting', objs, null)\n          if (this.updateView('select', objs, data_updated, this.state)) {\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(\n              this.props.id,\n              'selected',\n              selected,\n              null\n            )\n          }\n        }\n      },\n      clear: {\n        schema: {},\n        handler: (obj) => {\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'clearing',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.setState({ ...this.state, data: [] })\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'cleared',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.updateView('clear', [], [], [])\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    // this.ddEvent = Event.EventManager.getInstance().register(\n    this.ddEvent = this.eventManager.register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n\nexport class ListSchemaBase extends StateBaseComponent.StateBaseComponent {\n  /**\n   * Used to manage internal state of avatars\n   */\n  constructor(props) {\n    if (!props.config.options) {\n      props.config.options = {}\n    }\n    super(props)\n    this.props = props\n  }\n\n  updateData = (change, object_id, silent) => {\n    if (silent) {\n    }\n    // debugger;\n    // const change_row_idx = this.findItemIndexById(object_id.id, this.state.data);\n    // do the update\n    this.triggerAction('push', [change])\n    // this.state.data[change_row_idx] = mergeDeep (this.state.data[change_row_idx], change)\n  }\n\n  updateView = (action, arr, updated, data) => {\n    // extend by parent\n    return true\n  }\n\n  exceptionCatched = (action_name, event_object) => {\n    // console.info('ListBase: ' + action_name + ' --> ', event_object)\n  }\n\n  findItemIndexById = (id, data) => {\n    if (this.stateManager) {\n      return this.stateManager.findItemIndexById(id, data)\n    }\n  }\n\n  getData = () => {\n    return this.state.data\n  }\n\n  showSelectedRow = (row) => {\n    if (this.props.config.options.select) {\n      return row.selected\n    }\n    return false\n  }\n\n  showSelected = (id, idx) => {\n    // parent implementation to update the visual representation\n    return true // returns true to update state. Else do not update state.\n  }\n\n  setSelectedId = (id, evt, selected) => {\n    // EventManager.getInstance().addAction(this.props.id, 'select', { id: id });\n    this.triggerAction('select', { id: id })\n  }\n\n  handleSelect = (key, data, index, evt) => {\n    if (!evt) {\n      this.setSelectedId(data.id, evt)\n    }\n  }\n\n  render() {\n    return null\n  }\n}\n\nexport default { events, triggers, StateSchemaList, ListSchemaBase }\n"],"names":["triggers","ListBase","events","schema_with_ids","$id","$schema","description","type","properties","id","required","StateSchemaList","_ListBase$StateList","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","data","findItemIndexById","actionHandlers","eventHandlers","component_info","dataActionHandlers","submit","schema","handler","objs","eventManager","addEvent","count","state","length","items","replace","data_state","Array","isArray","old","new","updateView","setState","_objectSpread","_objectSpread2","push","data_added","data_updated","_toConsumableArray","selected","forEach","obj","idx","mergeDeep","selectedId","selectedIndex","concat","e","exceptionCatched","added","updated","push_front","delete","deleting","removeItemIndexByIndex","deleted","pop","splice","pop_front","select","i","clear","ddEvent","register","_data","_schema","Error","_typeof","manager","getEventManager","_createClass","StateList","ListSchemaBase","_StateBaseComponent$S","_super2","_this2","config","options","change","object_id","silent","triggerAction","action","arr","action_name","event_object","stateManager","row","evt","key","index","setSelectedId","value","StateBaseComponent","ListSchemaBase$1"],"mappings":"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"}