{"version":3,"file":"ListSchemaBase.js","sources":["../../src/event/ListSchemaBase.js"],"sourcesContent":["// common tools\nimport ListBase from './ListBase'\nimport StateBaseComponent from './StateBaseComponent'\nimport {\n  findItemIndexById,\n  removeItemIndexByIndex,\n  mergeDeep\n} from '../util/ObjUtil'\n// event handler\n// import Event from './Event'\n\nexport const triggers = ListBase.triggers\nexport const events = ListBase.events\n\nconst schema_with_ids = {\n  $id: 'identifiers',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  description: 'Identifiers',\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string'\n    }\n  },\n  required: ['id']\n}\nexport class StateSchemaList extends ListBase.StateList {\n  constructor(props) {\n    super(props)\n    this.props = props\n    // ensure array\n    let _data = []\n    const _schema = props.data.schema || this.props.schema || schema_with_ids // expect ids\n    if (props.data) {\n      // make sure we have at least a data property\n      if (!props.data.items) {\n        throw new Error('Expecting data property in data object')\n      }\n      if (Array.isArray(props.data.items)) {\n        _data = props.data.items\n      } else {\n        // check if this is an empty object\n        if (typeof props.data.items === 'object') {\n          // objects should not be empty\n          if (props.data.items.length) {\n            _data = [props.data.items]\n          }\n        } else {\n          _data = [props.data.items]\n        }\n      }\n    }\n    // apply default values\n    this.state = {\n      schema: _schema,\n      data: _data || [],\n      selectedIndex: 0,\n      selectedId: null\n    }\n\n    if (!this.props.manager) {\n      throw new Error('Manager was not passed through StateSchemaList props')\n    }\n\n    this.eventManager = this.props.manager.getEventManager()\n  }\n\n  findItemIndexById = (id, data) => {\n    return findItemIndexById(id, data)\n  }\n\n  registerComponent = (actionHandlers, eventHandlers, component_info) => {\n    actionHandlers = actionHandlers || {}\n    eventHandlers = eventHandlers || {}\n    // add our known handlers\n    const dataActionHandlers = {\n      submit: {\n        schema: {},\n        handler: (objs) => {\n          // submit\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'submitted',\n            {\n              count: this.state.data.length,\n              items: this.state.data,\n              schema: this.state.schema\n            },\n            {}\n          )\n        }\n      },\n      replace: {\n        // is the only way to change the schema\n        schema: {},\n        handler: (objs) => {\n          // replace content\n\n          // make sure we get items and / or schema properties\n          const data_state = this.state\n          if (objs.schema) {\n          } // TODO: validate schema\n          if (objs.items) {\n            if (!Array.isArray(objs.items)) {\n              objs.items = [objs.items]\n            }\n            // TODO: validate data (new or old) against new schema\n          }\n\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replacing',\n            { old: data_state, new: objs },\n            {}\n          )\n          const data = objs\n          if (this.updateView('replace', [], [], data.items)) {\n            this.setState({\n              ...this.state,\n              data: data.items || this.state.data,\n              schema: data.schema || this.state.schema\n            })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'replaced',\n            {\n              count: this.state.data.length,\n              items: this.state.data,\n              schema: this.state.schema\n            },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            {\n              count: this.state.data.length,\n              items: this.state.data,\n              schema: this.state.schema\n            },\n            {}\n          )\n        }\n      },\n      push: {\n        schema: {},\n        handler: (objs) => {\n          // append\n          const data_added = []\n          const data_updated = [] // contains ids\n          const data_state = [...(this.state.data || [])] // FIXME: use better way\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, data_state)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = mergeDeep(data_state[idx], obj)\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = { selectedId: obj.id, selectedIndex: idx }\n            }\n          })\n          const data = [...data_state, ...data_added]\n          // notify parent class of push event\n          try {\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(this.props.id, 'pushing', data_added, {})\n            if (this.updateView('push', data_added, data_updated, data)) {\n              this.setState({ ...this.state, ...selected, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('push', e)\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'pushed',\n            { count: data.length, items: data, added: data_added },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            {\n              count: data.length,\n              items: data,\n              added: data_added,\n              updated: data_updated\n            },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      push_front: {\n        schema: {},\n        handler: (objs) => {\n          const data_added = []\n          const data_updated = []\n          const data_state = [...(this.state.data || [])] // FIXME: use better way\n          let selected = {}\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          objs.forEach((obj) => {\n            const idx = this.findItemIndexById(obj.id, this.state.data)\n            if (idx === null) {\n              data_added.push(obj)\n            } else {\n              // update the index\n              data_state[idx] = obj\n              data_updated.push(idx)\n            }\n            if (obj.selected) {\n              // TODO: test that we can push items that are selected\n              selected = {\n                selectedId: obj.id,\n                selectedIndex: idx || data_added.length - 1\n              }\n            }\n          })\n          const data = [...data_added, ...data_state]\n          if (this.updateView('push_front', [], data_updated, data)) {\n            this.setState({ ...this.state, ...selected, data: data })\n          }\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data },\n            {}\n          )\n          // FIXME: this.showSelected(selected.selectedId, selected.selectedIndex || -1);\n        }\n      },\n      delete: {\n        schema: {},\n        handler: (objs) => {\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          let data = this.state.data\n          const data_updated = []\n          const deleting = []\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, data)\n              if (idx !== null) {\n                deleting.push(obj.id)\n                data = removeItemIndexByIndex(idx, data)\n                data_updated.push(idx)\n              }\n            }\n          })\n          try {\n            if (this.updateView('delete', [], data_updated, data)) {\n              this.setState({ ...this.state, data: data })\n            }\n          } catch (e) {\n            this.exceptionCatched('delete', e)\n          }\n\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: data.length, items: data, deleted: deleting },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'deleted',\n            { count: deleting.length, items: data, deleted: deleting },\n            {}\n          )\n        }\n      },\n      pop: {\n        schema: {},\n        handler: (obj) => {\n          if (this.state.data.length > 0) {\n            this.state.data.splice(this.state.data.length - 1, 1)\n            if (this.updateView('pop', [], [], this.state.data)) {\n              this.setState({ ...this.state, data: this.state.data })\n              // Event.EventManager.getInstance().addEvent(\n              this.eventManager.addEvent(\n                this.props.id,\n                'changed',\n                { count: this.state.data.length, items: this.state.data },\n                {}\n              )\n            }\n          }\n        }\n      },\n      pop_front: {\n        schema: {},\n        handler: (obj) => {\n          this.state.data.splice(0, 1)\n          if (this.updateView('pop_front', [], [], this.state.data)) {\n            this.setState({ ...this.state, data: this.state.data })\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(\n              this.props.id,\n              'changed',\n              { count: this.state.data.length, items: this.state.data },\n              {}\n            )\n          }\n        }\n      },\n      select: {\n        schema: {},\n        handler: (objs) => {\n          const data_updated = []\n          const selected = []\n          // want an array\n          if (!Array.isArray(objs)) {\n            objs = [objs]\n          }\n          // allow only one selection\n          for (let i = 0; i < this.state.data.length; i++) {\n            this.state.data[i].selected = false\n          }\n          // find selected\n          objs.forEach((obj) => {\n            if (obj.id) {\n              // requires array\n              const idx = this.findItemIndexById(obj.id, this.state.data)\n              if (idx !== null) {\n                this.state.data[idx].selected = !this.state.data[idx].selected\n                this.state.selectedId = this.state.data[idx].id\n                this.state.selectedIndex = idx\n                data_updated.push(idx)\n                selected.push(this.state.data[idx])\n              }\n            }\n          })\n          // for now we just replace the state\n          this.setState({ ...this.state, data: this.state.data })\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(this.props.id, 'selecting', objs, null)\n          if (this.updateView('select', objs, data_updated, this.state)) {\n            // Event.EventManager.getInstance().addEvent(\n            this.eventManager.addEvent(\n              this.props.id,\n              'selected',\n              selected,\n              null\n            )\n          }\n        }\n      },\n      clear: {\n        schema: {},\n        handler: (obj) => {\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'clearing',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.setState({ ...this.state, data: [] })\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'cleared',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          // Event.EventManager.getInstance().addEvent(\n          this.eventManager.addEvent(\n            this.props.id,\n            'changed',\n            { count: this.state.data.length, items: this.state.data },\n            {}\n          )\n          this.updateView('clear', [], [], [])\n        }\n      }\n    }\n\n    // register componenet overiding or adding new event handlers\n    // this.ddEvent = Event.EventManager.getInstance().register(\n    this.ddEvent = this.eventManager.register(\n      this.props.id,\n      { ...dataActionHandlers, ...actionHandlers },\n      { ...events, ...eventHandlers },\n      component_info\n    )\n    return this.ddEvent\n  }\n}\n\nexport class ListSchemaBase extends StateBaseComponent.StateBaseComponent {\n  /**\n   * Used to manage internal state of avatars\n   */\n  constructor(props) {\n    if (!props.config.options) {\n      props.config.options = {}\n    }\n    super(props)\n    this.props = props\n  }\n\n  updateData = (change, object_id, silent) => {\n    if (silent) {\n    }\n    // debugger;\n    // const change_row_idx = this.findItemIndexById(object_id.id, this.state.data);\n    // console.info(change_row_idx);\n    // do the update\n    this.triggerAction('push', [change])\n    // this.state.data[change_row_idx] = mergeDeep (this.state.data[change_row_idx], change)\n  }\n\n  updateView = (action, arr, updated, data) => {\n    // extend by parent\n    return true\n  }\n\n  exceptionCatched = (action_name, event_object) => {\n    console.info('ListBase: ' + action_name + ' --> ', event_object)\n  }\n\n  findItemIndexById = (id, data) => {\n    if (this.stateManager) {\n      return this.stateManager.findItemIndexById(id, data)\n    }\n  }\n\n  getData = () => {\n    return this.state.data\n  }\n\n  showSelectedRow = (row) => {\n    if (this.props.config.options.select) {\n      return row.selected\n    }\n    return false\n  }\n\n  showSelected = (id, idx) => {\n    // parent implementation to update the visual representation\n    return true // returns true to update state. Else do not update state.\n  }\n\n  setSelectedId = (id, evt, selected) => {\n    // EventManager.getInstance().addAction(this.props.id, 'select', { id: id });\n    this.triggerAction('select', { id: id })\n  }\n\n  handleSelect = (key, data, index, evt) => {\n    if (!evt) {\n      this.setSelectedId(data.id, evt)\n    }\n  }\n\n  render() {\n    return null\n  }\n}\n\nexport default { events, triggers, StateSchemaList, ListSchemaBase }\n"],"names":["triggers","ListBase","events","schema_with_ids","$id","$schema","description","type","properties","id","required","StateSchemaList","_ListBase$StateList","_inherits","_super","_createSuper","props","_this","_classCallCheck","this","call","_defineProperty","_assertThisInitialized","data","findItemIndexById","actionHandlers","eventHandlers","component_info","dataActionHandlers","submit","schema","handler","objs","eventManager","addEvent","count","state","length","items","replace","data_state","Array","isArray","old","new","updateView","setState","_objectSpread","_objectSpread2","push","data_added","data_updated","_toConsumableArray","selected","forEach","obj","idx","mergeDeep","selectedId","selectedIndex","e","exceptionCatched","added","updated","push_front","concat","delete","deleting","removeItemIndexByIndex","deleted","pop","splice","pop_front","select","i","clear","ddEvent","register","_data","_schema","Error","_typeof","manager","getEventManager","_createClass","StateList","ListSchemaBase","_StateBaseComponent$S","_super2","_this2","config","options","change","object_id","silent","triggerAction","action","arr","action_name","event_object","console","info","stateManager","row","evt","key","index","setSelectedId","value","StateBaseComponent","ListSchemaBase$1"],"mappings":"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"}