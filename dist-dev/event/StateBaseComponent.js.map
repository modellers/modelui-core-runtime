{"version":3,"file":"StateBaseComponent.js","sources":["../../src/event/StateBaseComponent.js"],"sourcesContent":["import { Component } from 'react'\n\nclass StateBaseComponent extends Component {\n  /**\n   * Used to manage internal state of avatars\n   */\n  constructor(props) {\n    super(props)\n    this.props = props\n\n    // check for component manager\n    if (!this.props.manager) {\n      const newLocal =\n        'Manager was not provided through props for component ' + this.props.id\n      throw newLocal\n    }\n    /*\n    // make sure the manager is of correct type\n    if (this.props.manager.constructor.name !== 'ComponentManager') {\n      // eslint-disable-next-line no-throw-literal\n      throw (\n        \"Constructor must be component manager. Got '\" +\n        this.props.manager.constructor.name +\n        \"' for component \" +\n        this.props.id\n      )\n    }\n    */\n    // get the state memory manager\n    this.stateManager = this.props.manager\n      .getStateFactory()\n      .getManager(this.props.id)\n    if (!this.stateManager) {\n      throw new Error(\n        \"State manager is missing for component '\" +\n          this.props.id +\n          \"'. Should have been created by traversing layout tree\"\n      )\n    }\n\n    if (this.stateManager) {\n      // apply initial state\n      this.state = this.stateManager.getState()\n    }\n\n    this.eventManager = this.props.manager.getEventManager()\n  }\n\n  componentDidMount = () => {\n    if (this.stateManager) {\n      this.stateManager.doMount(this)\n    }\n  }\n\n  componentWillUnmount = () => {\n    if (this.stateManager) {\n      this.stateManager.unMount(this)\n    }\n  }\n\n  updateView = (action, arr, updated, data) => {\n    // extend by parent\n    return true\n  }\n\n  triggerEvent(event, data, evt) {\n    this.props.manager\n      .getEventManager()\n      .addEvent(this.props.id, event, data, evt)\n  }\n\n  triggerAction(action, data, evt) {\n    this.props.manager\n      .getEventManager()\n      .addAction(this.props.id, action, data, null, evt)\n  }\n\n  register(actions, events, component_info) {\n    this.props.manager\n      .getEventManager()\n      .register(this.props.id, actions, events, component_info)\n  }\n\n  setInstanceState(state) {\n    if (this.stateManager) {\n      this.stateManager.setState(state)\n    }\n  }\n}\n\nexport default { StateBaseComponent }\n"],"names":["StateBaseComponent$1","StateBaseComponent","props","_this","_classCallCheck","this","_super","call","_defineProperty","_assertThisInitialized","stateManager","doMount","unMount","action","arr","updated","data","manager","id","getStateFactory","getManager","Error","state","getState","eventManager","getEventManager","value","event","evt","addEvent","addAction","actions","events","component_info","register","setState"],"mappings":"uEA0FeA,EAAA,CAAEC,wEApFf,SAAAA,EAAYC,GAAO,IAAAC,EAKjB,GALiBC,kBAAAC,KAAAJ,GACjBE,EAAAG,EAAAC,KAAAF,KAAMH,GADWM,EAAAA,gBAAAC,EAAAA,uBAAAN,GAAA,qBA0CC,WACdA,EAAKO,cACPP,EAAKO,aAAaC,QAAlBF,EAAAA,uBAAAN,OA5CeK,EAAAA,gBAAAC,EAAAA,uBAAAN,GAAA,wBAgDI,WACjBA,EAAKO,cACPP,EAAKO,aAAaE,QAAlBH,EAAAA,uBAAAN,OAlDeK,kBAsDNC,EAAAA,uBAAAN,GAAA,cAAA,SAACU,EAAQC,EAAKC,EAASC,GAElC,OAAO,KAtDPb,EAAKD,MAAQA,GAGRC,EAAKD,MAAMe,QAGd,KADE,wDAA0Dd,EAAKD,MAAMgB,GAmBzE,GAHAf,EAAKO,aAAeP,EAAKD,MAAMe,QAC5BE,kBACAC,WAAWjB,EAAKD,MAAMgB,KACpBf,EAAKO,aACR,MAAM,IAAIW,MACR,2CACElB,EAAKD,MAAMgB,GACX,yDA9BW,OAkCbf,EAAKO,eAEPP,EAAKmB,MAAQnB,EAAKO,aAAaa,YAGjCpB,EAAKqB,aAAerB,EAAKD,MAAMe,QAAQQ,kBAvCtBtB,CAwClB,8CAmBDuB,MAAA,SAAaC,EAAOX,EAAMY,GACxBvB,KAAKH,MAAMe,QACRQ,kBACAI,SAASxB,KAAKH,MAAMgB,GAAIS,EAAOX,EAAMY,EACzC,wBAEDF,MAAA,SAAcb,EAAQG,EAAMY,GAC1BvB,KAAKH,MAAMe,QACRQ,kBACAK,UAAUzB,KAAKH,MAAMgB,GAAIL,EAAQG,EAAM,KAAMY,EACjD,mBAEDF,MAAA,SAASK,EAASC,EAAQC,GACxB5B,KAAKH,MAAMe,QACRQ,kBACAS,SAAS7B,KAAKH,MAAMgB,GAAIa,EAASC,EAAQC,EAC7C,2BAEDP,MAAA,SAAiBJ,GACXjB,KAAKK,cACPL,KAAKK,aAAayB,SAASb,EAE9B"}