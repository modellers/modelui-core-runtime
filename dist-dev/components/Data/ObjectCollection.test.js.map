{"version":3,"file":"ObjectCollection.test.js","sources":["../../../src/components/Data/ObjectCollection.test.js"],"sourcesContent":["/**\n * MenuComponent tests\n * Testing DD events and actions integrety\n */\n\nimport { MemoryManager } from './MemoryManager'\nimport { ObjectCollection, events, triggers, config } from './ObjectCollection'\nimport {\n  createComponentClassTests,\n  createComponentRegisterTests,\n  testEventSequence\n} from '../../util/TestUtil'\nimport Manager from '../../layout/Manager'\nimport registerComponents from '../Components'\nimport Event from '../../event/Event'\n\ndescribe('ObjectCollection protocol', () => {\n  const tests = createComponentClassTests(\n    Manager.ComponentManager.getInstance(),\n    registerComponents,\n    null,\n    config,\n    ['insert', 'read', 'update', 'upsert', 'delete'],\n    [\n      'invalid',\n      'failure',\n      'inserting',\n      'inserted',\n      'reading',\n      'read',\n      'upserting',\n      'upserted',\n      'updating',\n      'updated',\n      'deleting',\n      'deleted',\n      'missing'\n    ],\n    {},\n    undefined,\n    { render: false }\n  )\n  tests.forEach((t) => {\n    test(t.title, t.test)\n  })\n})\n\ndescribe('ObjectCollection register', () => {\n  const tests = createComponentRegisterTests(\n    Manager.ComponentManager.getInstance(),\n    registerComponents,\n    'object',\n    ObjectCollection,\n    triggers,\n    events,\n    config,\n    {}\n  )\n  tests.forEach((t) => {\n    test(t.title, t.test)\n  })\n})\n\ndescribe('ObjectCollection memory test', () => {\n  beforeEach(() => {\n    Event.EventManager.getInstance().clearAll()\n    // eslint-disable-next-line no-unused-vars\n    const objectCollection = new ObjectCollection({\n      id: 'test_collection',\n      type: 'object',\n      schema: {},\n      data: {\n        1: { id: '1', ok: 1 },\n        '1d': { father: { daugther: 8, son: 5 } }\n      },\n      manager: Manager.ComponentManager.getInstance()\n    })\n  })\n\n  test('Initiated data exists', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'read',\n      '1',\n      'read',\n      (obj) => {\n        expect(obj.id).toEqual('1')\n        expect(obj.ok).toEqual(1)\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['1']).toEqual({ id: '1', ok: 1 })\n        expect(mm.docs['1d']).toEqual({ father: { daugther: 8, son: 5 } })\n        done()\n      }\n    )\n  })\n\n  test('Inserting data', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'insert',\n      { id: '2', ok: 2 },\n      'inserted',\n      (obj) => {\n        expect(obj.id).toEqual('2')\n        expect(obj.ok).toEqual(2)\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['2']).toEqual({ id: '2', ok: 2 })\n        done()\n      }\n    )\n  })\n\n  // TODO: add more of these tests for delete, get, read ...\n  test('Updating missing data results in missing', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'update',\n      { id: 'MISSING-ID', OK: 'Ok value 2' },\n      'missing',\n      (obj) => {\n        expect(obj.id).toEqual('MISSING-ID')\n        done()\n      }\n    )\n  })\n\n  test('Updating shallow object', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'update',\n      { id: '1', ok: 'FINE' },\n      'updated',\n      (obj) => {\n        expect(obj).toEqual({ id: '1', ok: 'FINE' })\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['1']).toEqual({ id: '1', ok: 'FINE' })\n        done()\n      }\n    )\n  })\n\n  test('Updating deep object', (done) => {\n    // increase age of daugther to 9\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'update',\n      { id: '1d', father: { daughter: 9 } },\n      'updated',\n      (obj) => {\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['1d']).toEqual({\n          father: { daugther: 8, son: 5, daughter: 9 },\n          id: '1d'\n        })\n        done()\n      }\n    )\n  })\n\n  /*\n  test('Upsert data', (done) => {\n\n    // \"insert\"  { \"id\": \"1\", \"ok\": 1 } -> \"inserted\" -> { \"id\": \"1\", \"ok\": 1 }\n    // \"read\"  { \"id\": \"1\" } -> \"read\" -> { \"id\": \"1\", \"ok\": 1 }\n    // \"update\"  { \"id\": \"1\", \"ok\": 2 } -> \"updated\" -> { \"id\": \"1\", \"ok\": 2 }\n    // \"read\"  { \"id\": \"1\" } -> \"updated\" -> { \"id\": \"1\", \"ok\": 2 }\n\n    EventManager.getInstance().register(\n      'test',\n      {\n        result: {\n          schema: {},\n          handler: (obj) => {\n            expect(obj.id).toEqual('1')\n            expect(obj.ok).toEqual(1)\n            // check global shared memeory\n            const mm = MemoryManager.getInstance()\n              .getMemory('test_collection')\n              .getData()\n            expect(mm.docs['1']).toEqual({ id: '1', ok: 1 })\n            done()\n          }\n        }\n      },\n      {},\n      {}\n    )\n    EventManager.getInstance().watch([\n      {\n        component: { id: 'test', event: 'result' },\n        trigger: { id: 'test_collection', action: 'upsert' },\n        transform: function (data) {\n          return data\n        }\n      },\n      {\n        component: { id: 'test_collection', event: 'upserted' },\n        trigger: { id: 'test', action: 'result' },\n        transform: function (data) {\n          return data\n        }\n      }\n    ])\n    EventManager.getInstance().addEvent(\n      'test',\n      'result',\n      { id: '1', ok: 1 },\n      {}\n    )\n  })\n  */\n})\n"],"names":["describe","createComponentClassTests","Manager","ComponentManager","getInstance","registerComponents","config","undefined","render","forEach","t","test","title","createComponentRegisterTests","ObjectCollection","triggers","events","beforeEach","Event","EventManager","clearAll","id","type","schema","data","ok","father","daugther","son","manager","done","testEventSequence","obj","expect","toEqual","mm","MemoryManager","getMemory","getData","docs","OK","daughter"],"mappings":"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"}