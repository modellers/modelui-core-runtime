{"version":3,"file":"WebJSONRequest.js","sources":["../../../src/components/Network/WebJSONRequest.js"],"sourcesContent":["import axios from 'axios'\n// event handler\nimport EventManager from '../../event/Event'\n/*\n{\n    schema:\n    url: url, -- require\n    body: object, -- optional\n    query: object -- optional\n}\n*/\nexport function WebJSONRequest(props) {\n  const collection_name = props.id\n  const schema = props.schema\n  /*\n    const data = props.data;\n    const options = props.options;\n    */\n\n  const raiseSuccessEvent = (event_name, data, evt) => {\n    EventManager.getInstance().addEvent(collection_name, event_name, data, evt)\n  }\n\n  const raiseFailureEvent = (event_name, data, evt) => {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\n    EventManager.getInstance().addEvent(collection_name, event_name, data, evt)\n  }\n\n  const isValidDocumentSchema = (obj, schema) => {\n    // returns true if doc validates against schema\n    return true\n  }\n\n  EventManager.getInstance().register(collection_name, {\n    get: (obj) => {\n      // Validate schema\n      const schema_validation = isValidDocumentSchema(obj, schema)\n      if (schema_validation) {\n        // Create query parameter\n        let query_param = ''\n        if (obj.query) {\n          query_param = '?'\n          for (const p in obj.query) {\n            query_param = query_param + p + '=' + obj.query[p] + '&'\n          }\n        }\n        // Do api rest call\n        axios\n          .get(obj.url + query_param)\n          .then((result) => {\n            const data = result.data\n            if (result.status === 200) {\n              raiseSuccessEvent('got', data, result)\n            } else {\n              raiseFailureEvent('' + result.status, data, result)\n            }\n          })\n          .catch(function (error) {\n            console.log(error)\n            raiseFailureEvent('failure', obj, error)\n          })\n      } else {\n        raiseFailureEvent('invalid', obj, {\n          message: 'Invalid object',\n          code: 501,\n          data: { document: obj, schema: schema, reason: schema_validation }\n        })\n      }\n    }\n  })\n}\n"],"names":["props","collection_name","id","schema","raiseFailureEvent","event_name","data","evt","EventManager","getInstance","addEvent","register","get","obj","query_param","query","p","axios","url","then","result","status","raiseSuccessEvent","error","console","log"],"mappings":"8RAWO,SAAwBA,GAC7B,IAAMC,EAAkBD,EAAME,GACfF,EAAMG,OAMrB,IAIMC,EAAoB,SAACC,EAAYC,EAAMC,GAE3CC,EAAaC,cAAcC,SAAST,EAAiBI,EAAYC,EAAMC,IAQzEC,EAAaC,cAAcE,SAASV,EAAiB,CACnDW,IAAK,SAACC,GAKF,IAAIC,EAAc,GAClB,GAAID,EAAIE,MAEN,IAAK,IAAMC,KADXF,EAAc,IACED,EAAIE,MAClBD,EAAcA,EAAcE,EAAI,IAAMH,EAAIE,MAAMC,GAAK,IAIzDC,EAAK,QACFL,IAAIC,EAAIK,IAAMJ,GACdK,MAAK,SAACC,GACL,IAAMd,EAAOc,EAAOd,KACE,MAAlBc,EAAOC,OAhCK,SAAChB,EAAYC,EAAMC,GAC3CC,EAAaC,cAAcC,SAAST,EAAiBI,EAAYC,EAAMC,GAgC7De,CAAkB,MAAOhB,EAAMc,GAE/BhB,EAAkB,GAAKgB,EAAOC,OAAQf,EAAMc,EAEhD,IAAE,OACK,SAAUG,GACfC,QAAQC,IAAIF,GACZnB,EAAkB,UAAWS,EAAKU,EACpC,GAQN,GAEJ"}