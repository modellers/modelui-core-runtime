{"version":3,"file":"RequestObject.test.js","sources":["../../../src/components/Network/RequestObject.test.js"],"sourcesContent":["/**\n * RequestObject tests\n */\n\nimport { RequestObject, events, triggers, config } from './RequestObject'\nimport {\n  createComponentClassTests,\n  createComponentRegisterTests // ,\n  // testEventSequence\n} from '../../util/TestUtil'\nimport Manager from '../../layout/Manager'\nimport registerComponents from '../Components'\n\ndescribe('RequestObject protocol', () => {\n  const tests = createComponentClassTests(\n    Manager.ComponentManager.getInstance(),\n    registerComponents,\n    null,\n    config,\n    ['read', 'convert'],\n    [\n      'reading',\n      'read',\n      'failure_reading',\n      'converting',\n      'converted',\n      'failure_converting'\n    ],\n    {},\n    undefined,\n    { render: false }\n  )\n  tests.forEach((t) => {\n    test(t.title, t.test)\n  })\n})\n\ndescribe('RequestObject register', () => {\n  const tests = createComponentRegisterTests(\n    Manager.ComponentManager.getInstance(),\n    registerComponents,\n    'object-request',\n    RequestObject,\n    triggers,\n    events,\n    config,\n    {}\n  )\n  tests.forEach((t) => {\n    test(t.title, t.test)\n  })\n})\n/*\nhttp://www.jsontest.com/\n\nhttps://run.mocky.io/v3/513e6daa-641d-4505-b891-c2996fadd694\nhttps://designer.mocky.io/manage/delete/513e6daa-641d-4505-b891-c2996fadd694/1nm9ex3oPihQVbfGlLo4sqEKeTlZNLDaAaJM\n\ndescribe('RequestObject memory test', () => {\n  beforeEach(() => {\n    Event.EventManager.getInstance().clearAll()\n    // eslint-disable-next-line no-unused-vars\n    const requestObject = new RequestObject({\n      id: 'test_collection',\n      type: 'object_request',\n      schema: {},\n      data: {\n        1: { id: '1', ok: 1 },\n        '1d': { father: { daugther: 8, son: 5 } }\n      },\n      manager: Manager.ComponentManager.getInstance()\n    })\n  })\n\n  test('Initiated data exists', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'read',\n      '1',\n      'read',\n      (obj) => {\n        expect(obj.id).toEqual('1')\n        expect(obj.ok).toEqual(1)\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['1']).toEqual({ id: '1', ok: 1 })\n        expect(mm.docs['1d']).toEqual({ father: { daugther: 8, son: 5 } })\n        done()\n      }\n    )\n  })\n\n  test('Inserting data', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'insert',\n      { id: '2', ok: 2 },\n      'inserted',\n      (obj) => {\n        expect(obj.id).toEqual('2')\n        expect(obj.ok).toEqual(2)\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['2']).toEqual({ id: '2', ok: 2 })\n        done()\n      }\n    )\n  })\n\n  // TODO: add more of these tests for delete, get, read ...\n  test('Updating missing data results in missing', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'update',\n      { id: 'MISSING-ID', OK: 'Ok value 2' },\n      'missing',\n      (obj) => {\n        expect(obj.id).toEqual('MISSING-ID')\n        done()\n      }\n    )\n  })\n\n  test('Updating shallow object', (done) => {\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'update',\n      { id: '1', ok: 'FINE' },\n      'updated',\n      (obj) => {\n        expect(obj).toEqual({ id: '1', ok: 'FINE' })\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['1']).toEqual({ id: '1', ok: 'FINE' })\n        done()\n      }\n    )\n  })\n\n  test('Updating deep object', (done) => {\n    // increase age of daugther to 9\n    testEventSequence(\n      Manager.ComponentManager.getInstance(),\n      'test_collection',\n      'update',\n      { id: '1d', father: { daughter: 9 } },\n      'updated',\n      (obj) => {\n        // check global shared memeory\n        const mm = MemoryManager.getInstance()\n          .getMemory('test_collection')\n          .getData()\n        expect(mm.docs['1d']).toEqual({\n          father: { daugther: 8, son: 5, daughter: 9 },\n          id: '1d'\n        })\n        done()\n      }\n    )\n  })\n})\n*/\n"],"names":["describe","createComponentClassTests","Manager","ComponentManager","getInstance","registerComponents","config","undefined","render","forEach","t","test","title","createComponentRegisterTests","RequestObject","triggers","events"],"mappings":"8iBAaAA,SAAS,0BAA0B,WACnBC,4BACZC,EAAAA,QAAQC,iBAAiBC,cACzBC,EACA,KACAC,EAAAA,OACA,CAAC,OAAQ,WACT,CACE,UACA,OACA,kBACA,aACA,YACA,sBAEF,CAAE,OACFC,EACA,CAAEC,QAAQ,IAENC,SAAQ,SAACC,GACbC,KAAKD,EAAEE,MAAOF,EAAEC,KAClB,GACF,IAEAX,SAAS,0BAA0B,WACnBa,EAA4BA,6BACxCX,EAAO,QAACC,iBAAiBC,cACzBC,EACA,iBACAS,EAAaA,cACbC,EAAQA,SACRC,EAAMA,OACNV,EAAMA,OACN,CAAE,GAEEG,SAAQ,SAACC,GACbC,KAAKD,EAAEE,MAAOF,EAAEC,KAClB,GACF"}