{"version":3,"file":"StateManager-1ac08b35.js","sources":["../src/layout/Manager.js","../src/event/StateManager.js"],"sourcesContent":["import Event from '../event/Event'\nimport StateManager from '../event/StateManager'\n\nclass ComponentManager {\n  static _instance = null\n\n  _components = {}\n\n  /**\n   * @returns {ComponentManager}\n   */\n  static getInstance() {\n    if (ComponentManager._instance === null) {\n      ComponentManager._instance = new ComponentManager()\n      ComponentManager._instance._event_manager =\n        Event.EventManager.getInstance()\n      ComponentManager._instance._state_factory =\n        StateManager.StateManager.getInstance()\n    }\n\n    return this._instance\n  }\n\n  getEventManager() {\n    return this._event_manager\n  }\n\n  getStateFactory() {\n    return this._state_factory\n  }\n\n  getStateManager() {\n    return this._state_factory\n  }\n\n  clearAll() {\n    this._components = {}\n  }\n\n  registerComponent(component) {\n    /**\n     * Adds component to layout manager of any type.\n     * Specific types in TYPES are specifically used when automatically generating the layout using AI.\n     */\n\n    // attach managers and factory\n    component.manager = this\n\n    if (typeof component.component === 'function') {\n      this._components[component.type] = component\n    } else {\n      console.error(\n        'Could not register ' + component.type + ' since it was not a function'\n      )\n    }\n  }\n\n  getComponentTypes() {\n    return Object.keys(this._components)\n  }\n\n  getComponents() {\n    return this._components\n  }\n\n  getComponent(component_type) {\n    return this._components[component_type]\n  }\n\n  getComponentInstance(component_type, parameters) {\n    // validate parameter inputs\n    console.info(component_type, parameters)\n    // paramters\n    parameters.manager = this\n    // create component\n    const c = this._components[component_type]\n    if (c) {\n      // if React component is of type class\n      if (c.is_withclass) {\n        return c.component\n      } else {\n        // if React component is of type function\n        // eslint-disable-next-line new-cap\n        return new c.component(parameters)\n      }\n    } else {\n      console.warn(\n        'Component instance not registered of type: ' + component_type\n      )\n    }\n  }\n\n  collectComponentInventory() {\n    const store = {}\n    for (const [key, comp] of Object.entries(this._components)) {\n      const cfg = comp.config\n      if (cfg && key && cfg.type) {\n        let parents = ''\n        if (cfg.relation) {\n          parents = cfg.relation.within\n        }\n        store[cfg.type] = {\n          id: cfg.type,\n          title: cfg.name,\n          type: cfg.type,\n          events: comp.events,\n          actions: comp.triggers,\n          category: 'TBD',\n          parent: parents,\n          schema: cfg.options\n        }\n        // also add the children\n        if (cfg.contains) {\n          for (const [key_itm, comp] of Object.entries(cfg.contains)) {\n            const itm = cfg.contains[key_itm]\n            store[key_itm] = {\n              id: key_itm,\n              title: itm.title || itm.id,\n              category: 'TBD',\n              type: key_itm,\n              parent: cfg.type,\n              schema: comp\n            }\n          }\n        }\n      }\n    }\n    return store\n  }\n}\n\nwindow.componentManager = ComponentManager\nexport default { ComponentManager }\n","import Manager from '../layout/Manager'\n\nclass StateManager {\n  static _instance = null\n\n  _states = {}\n\n  /**\n   * @returns {StateManager}\n   */\n  static getInstance() {\n    if (StateManager._instance === null) {\n      StateManager._instance = new StateManager()\n    }\n\n    return this._instance\n  }\n\n  getManager(state_id) {\n    return this._states[state_id]\n  }\n\n  clearAll() {}\n\n  createState(props) {\n    return this.createManager(props.id, props)\n  }\n\n  createStates(props_array) {\n    for (const props of props_array) {\n      this.createManager(props.id, props)\n    }\n  }\n\n  createManager(state_id, props) {\n    const componentManagerInstance = Manager.ComponentManager.getInstance()\n    const _component = componentManagerInstance.getComponent(props.type)\n    if (_component) {\n      const config = _component.config\n      let state_inst = this.getManager(state_id)\n      if (state_inst) {\n        // TODO: warn that we are trying to create a manager that exists\n        return state_inst\n      } else {\n        if (config.state) {\n          // make sure to pass component manager\n          if (!props.manager) {\n            props.manager = componentManagerInstance\n          }\n          // create the class\n          state_inst = this.createStateByClass(config.state, props)\n          if (state_inst.registerComponent) {\n            state_inst.registerComponent({}, {}, config)\n          }\n          this._states[state_id] = state_inst\n        }\n        return state_inst\n      }\n    } else {\n      throw new Error('Component type does not exist: ' + props.type)\n    }\n  }\n\n  createStateByClass(StateClass, props) {\n    if (StateClass) {\n      return new StateClass(props)\n    }\n    return null\n  }\n\n  // TODO: create state statemanagers from layout tree\n  createLayoutState(layout_tree) {\n    walkLayout(layout_tree, (props) => {\n      if (\n        props.type &&\n        props.id &&\n        props.config &&\n        (props.data || props.content || props.actions)\n      ) {\n        this.createState(props)\n      }\n    })\n  }\n}\n\nexport const walkLayout = (layt, callback) => {\n  const _walk = (_layt) => {\n    for (const d in _layt) {\n      if (callback && _layt[d]) {\n        callback(_layt[d])\n      }\n      if (_layt[d].data) {\n        _walk(_layt[d].data)\n      }\n      if (_layt[d].content) {\n        _walk([_layt[d].content])\n      }\n      if (_layt[d].actions) {\n        _walk([_layt[d].actions])\n      }\n    }\n  }\n  _walk(layt)\n}\n\nexport default { StateManager, walkLayout }\n"],"names":["ComponentManager","this","_event_manager","_state_factory","_components","value","component","manager","type","console","error","Object","keys","component_type","parameters","info","c","is_withclass","warn","store","_i","_Object$entries","entries","length","_Object$entries$_i","_slicedToArray","key","comp","cfg","config","parents","relation","within","id","title","name","events","actions","triggers","category","parent","schema","options","contains","_i2","_Object$entries2","_Object$entries2$_i","key_itm","itm","_instance","Event","EventManager","getInstance","StateManager","window","componentManager","Manager","state_id","_states","props","createManager","props_array","_step","_iterator","_createForOfIteratorHelper","s","n","done","err","e","f","componentManagerInstance","_component","getComponent","state_inst","getManager","state","createStateByClass","registerComponent","Error","StateClass","layout_tree","_this","walkLayout","data","content","createState","layt","callback","_walk","_layt","d","StateManager$1"],"mappings":"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"}