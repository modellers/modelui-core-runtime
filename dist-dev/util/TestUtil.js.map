{"version":3,"file":"TestUtil.js","sources":["../../src/util/TestUtil.js"],"sourcesContent":["/**\n *  tests\n * Testing DD events and actions integrety\n */\n\nimport React from 'react'\n\nconst _createComponent = (\n  renderer,\n  _Component,\n  component_id,\n  data,\n  options,\n  schema_expected,\n  manager\n) => {\n  // check for component manager\n  if (!manager) {\n    throw Error(\n      'TestUtil._createComponent: Manager was not provided through props for component ' +\n        component_id\n    )\n  } else {\n    /*\n    if (manager.constructor.name !== 'ComponentManager') {\n      throw \"TestUtil._createComponent: Manager was expected to be ComponentManager. Got for '\" + manager.constructor.name + \"' \" + component_id;\n    }\n    */\n  }\n\n  if (typeof renderer.create !== 'function') {\n    throw Error('_createComponent is missing renderer function')\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  let _component = null\n  if (options.render) {\n    _component = renderer.create(\n      // eslint-disable-next-line react/jsx-pascal-case\n      <_Component\n        id={component_id}\n        key={component_id}\n        data={data}\n        config={{ options: options }}\n        schema={schema_expected}\n        manager={manager}\n      />\n    )\n  } else {\n    _component = new _Component({\n      id: component_id,\n      key: component_id,\n      data: data,\n      config: { options: options },\n      schema: schema_expected,\n      manager: manager\n    })\n  }\n}\n\nexport const createComponentClassTests = (\n  componentManagerInstance,\n  registerComponents,\n  renderer,\n  config,\n  triggers_expected,\n  events_expected,\n  schema_expected,\n  data,\n  options\n) => {\n  options = options || { render: true }\n  data = data || {}\n  if (typeof registerComponents !== 'function') {\n    throw Error('createComponentClassTests is missing registerComponents')\n  }\n  if (typeof renderer.create !== 'function') {\n    throw Error('createComponentClassTests is missing renderer')\n  }\n  // TODO: run this before each\n  componentManagerInstance.clearAll()\n  componentManagerInstance.getStateManager().clearAll()\n  componentManagerInstance.getEventManager().clearAll()\n  registerComponents(componentManagerInstance)\n\n  const c = componentManagerInstance.getComponent(config.type)\n  const _Component = c.component\n  const triggers = c.triggers\n  const events = c.events\n  const component_id = config.type + '_id'\n  componentManagerInstance.getStateManager().clearAll()\n  componentManagerInstance.getStateManager().createState({\n    type: config.type,\n    data: data,\n    id: component_id,\n    manager: componentManagerInstance\n  })\n\n  return [\n    {\n      title:\n        component_id +\n        ' trigger registration contains same actions as in component trigger export',\n      test: () => {\n        componentManagerInstance.getStateManager().clearAll()\n        _createComponent(\n          renderer,\n          _Component,\n          component_id,\n          data,\n          options,\n          schema_expected,\n          componentManagerInstance\n        )\n        const trigger_info_events = triggers\n        const actions = componentManagerInstance\n          .getEventManager()\n          .getCopyOfActions()\n        expect(Object.keys(actions)).toEqual([component_id])\n        // check that we are registering the correct items\n        expect(Object.keys(actions[component_id])).toEqual(\n          Object.keys(trigger_info_events)\n        )\n      }\n    },\n    {\n      title:\n        component_id +\n        ' trigger export registration contains required information',\n      test: () => {\n        const trigger_info_events = triggers\n        // check that the registered event count matches the registered handler count\n        expect(Object.keys(trigger_info_events)).toEqual(triggers_expected)\n        // check that the registered events attributes are defined\n        Object.keys(trigger_info_events).forEach((trigger_event, idx) => {\n          // check info\n          expect(Object.keys(trigger_info_events[trigger_event])).toContain(\n            'info'\n          )\n          expect(\n            Object.keys(trigger_info_events[trigger_event].info)\n          ).toContain('name')\n          expect(\n            Object.keys(trigger_info_events[trigger_event].info)\n          ).toContain('description')\n          // check schema\n          expect(Object.keys(trigger_info_events[trigger_event])).toContain(\n            'schema'\n          )\n          // check alias\n          expect(Object.keys(trigger_info_events[trigger_event])).toContain(\n            'alias'\n          )\n        })\n      }\n    },\n    {\n      title:\n        component_id + ' component instance has trigger registration handlers',\n      test: () => {\n        componentManagerInstance.getStateManager().clearAll()\n        _createComponent(\n          renderer,\n          _Component,\n          component_id,\n          data,\n          options,\n          schema_expected,\n          componentManagerInstance\n        )\n        const trigger_info_events = triggers\n        const actions = componentManagerInstance\n          .getEventManager()\n          .getCopyOfActions()\n        // check that the registered events attributes are defined\n        Object.keys(trigger_info_events).forEach((trigger_event, idx) => {\n          // check handler\n          expect(Object.keys(actions[component_id][trigger_event])).toContain(\n            'handler'\n          )\n          expect(\n            typeof actions[component_id][trigger_event].handler === 'function'\n          ).toBeTruthy()\n        })\n      }\n    },\n    {\n      title: component_id + ' event registration',\n      test: () => {\n        const trigger_events = events_expected\n        const actions = events\n        expect(Object.keys(actions)).toEqual(trigger_events)\n        trigger_events.forEach((trigger_event, idx) => {\n          // check info\n          expect(Object.keys(actions[trigger_event])).toContain('info')\n          expect(Object.keys(actions[trigger_event].info)).toContain('name')\n          expect(Object.keys(actions[trigger_event].info)).toContain(\n            'description'\n          )\n          // check schema\n          expect(Object.keys(actions[trigger_event])).toContain('schema')\n          // check alias\n          expect(Object.keys(actions[trigger_event])).toContain('alias')\n        })\n      }\n    },\n    {\n      title: component_id + ' config has options',\n      test: () => {\n        expect(Object.keys(config)).toContain('options')\n        // check that we have the basics for a schema\n        const options_schema = config.options\n        expect(Object.keys(options_schema)).toContain('id')\n        expect(Object.keys(options_schema)).toContain('$schema')\n        expect(Object.keys(options_schema)).toContain('description')\n        expect(Object.keys(options_schema)).toContain('x-layout')\n        expect(Object.keys(options_schema)).toContain('type')\n        expect(Object.keys(options_schema)).toContain('version')\n        expect(Object.keys(options_schema)).toContain('properties')\n        expect(Object.keys(options_schema)).toContain('required')\n      }\n    },\n    {\n      title: component_id + ' config has basic info',\n      test: () => {\n        expect(Object.keys(config)).toContain('options')\n        // check that we have the basics for a schema\n        expect(typeof config.name).toEqual('string')\n        expect(typeof config.type).toEqual('string')\n        expect(typeof config.author).toEqual('string')\n        expect(typeof config.description).toEqual('string')\n        expect(typeof config.version).toEqual('number')\n        expect(typeof config.author).toEqual('string')\n        expect(typeof config.relation).toEqual('object')\n      }\n    },\n    {\n      title: component_id + ' config has relational info',\n      test: () => {\n        expect(Object.keys(config)).toContain('options')\n        // check that we have the basics for a schema\n        expect(typeof config.relation).toEqual('object')\n        expect(typeof config.relation.within).toEqual('string')\n      }\n    },\n    {\n      title:\n        component_id + ' option schema is accessible through buildStoreInfo',\n      test: () => {\n        /* componentManagerInstance.clearAll();\n        registerComponents();\n        */\n        _createComponent(\n          renderer,\n          _Component,\n          component_id,\n          data,\n          options,\n          schema_expected,\n          componentManagerInstance\n        )\n        // fetch result\n        const store = componentManagerInstance\n          .getEventManager()\n          .collectComponentInventory()\n        // should exist\n        expect(store).toHaveProperty(config.type)\n\n        const store_item = store[config.type]\n        // check that we have the required info\n        // as define din ui-modeler-events.js store data\n        expect(typeof store_item.id).toEqual('string')\n        expect(typeof store_item.title).toEqual('string')\n        expect(typeof store_item.type).toEqual('string')\n        expect(typeof store_item.parent).toEqual('string')\n      }\n    },\n    {\n      title:\n        component_id +\n        ' schema definition is accessible through getComponentSchema',\n      test: () => {\n        const schema = componentManagerInstance\n          .getEventManager()\n          .getComponentSchema(config.type)\n        expect(schema).toEqual(config.options)\n      }\n    },\n    {\n      title:\n        component_id +\n        ' events definition is accessible through getComponentEventsByType',\n      test: () => {\n        const component = componentManagerInstance\n          .getEventManager()\n          .getComponentByType(config.type)\n        expect(component).not.toEqual(undefined)\n        expect(component.actions).toEqual(config.actions)\n      }\n    },\n    {\n      title:\n        component_id +\n        ' actions definition is accessible through getComponentActionsByType',\n      test: () => {\n        const component = componentManagerInstance\n          .getEventManager()\n          .getComponentByType(config.type)\n        expect(component).not.toEqual(undefined)\n        expect(component.events).toEqual(config.events)\n      }\n    } /* {\n      title: component_id + ' events definition is accessible through getEvents',\n      test: () => {\n      }\n    }, {\n      title: component_id + ' action definition is accessible through getActions',\n      test: () => {\n      }\n    }\n    */\n  ]\n}\n\nexport const createComponentRegisterTests = (\n  componentManagerInstance,\n  registerComponents,\n  component_type,\n  _Component,\n  triggers,\n  events,\n  config,\n  contains\n) => {\n  return [\n    {\n      title: component_type + ' basic registration info',\n      test: () => {\n        componentManagerInstance.clearAll()\n        componentManagerInstance.getStateManager().clearAll()\n        componentManagerInstance.getEventManager().clearAll()\n        registerComponents(componentManagerInstance)\n\n        const c = componentManagerInstance.getComponent(component_type)\n        expect(c).not.toEqual(undefined)\n        expect(c.type).toEqual(component_type)\n        expect(c.component).toEqual(_Component)\n        expect(c.config).toEqual(config)\n        expect(c.events).toEqual(events)\n        expect(c.triggers).toEqual(triggers)\n      }\n    },\n    {\n      title: component_type + ' configuration registration',\n      test: () => {\n        componentManagerInstance.clearAll()\n        componentManagerInstance.getStateManager().clearAll()\n        componentManagerInstance.getEventManager().clearAll()\n        registerComponents(componentManagerInstance)\n\n        const c = componentManagerInstance.getComponent(component_type)\n        expect(c).not.toEqual(undefined)\n        const cfg = c.config\n        expect(cfg).toHaveProperty('type')\n        expect(cfg).toHaveProperty('name')\n        expect(cfg).toHaveProperty('relation')\n        expect(cfg.relation).toHaveProperty('within')\n        expect(cfg.relation).toHaveProperty('contains')\n      }\n    },\n    {\n      title: component_type + ' matches rendered type and schema',\n      test: () => {\n        componentManagerInstance.clearAll()\n        componentManagerInstance.getStateManager().clearAll()\n        componentManagerInstance.getEventManager().clearAll()\n        registerComponents(componentManagerInstance)\n\n        const c = componentManagerInstance.getComponent(component_type)\n        expect(c).not.toEqual(undefined)\n        const cfg = c.config\n        expect(cfg).toHaveProperty('type')\n        expect(cfg).toHaveProperty('options')\n        // test that the config type is the type iin our options schema\n        expect(cfg.options.id).toEqual(cfg.type)\n        // TODO: test that this is the same as in component registered\n      }\n    },\n    {\n      title: component_type + ' tests option schema',\n      test: () => {\n        if (Object.keys(contains).length) {\n          // test only if we have keys\n          componentManagerInstance.clearAll()\n          componentManagerInstance.getStateManager().clearAll()\n          componentManagerInstance.getEventManager().clearAll()\n          registerComponents(componentManagerInstance)\n\n          const c = componentManagerInstance.getComponent(component_type)\n          expect(c).not.toEqual(undefined)\n          const cfg = c.config\n          const schema_option = cfg.options\n          expect(schema_option).toHaveProperty('id')\n          expect(schema_option).toHaveProperty('$schema')\n          expect(schema_option).toHaveProperty('title')\n          expect(schema_option).toHaveProperty('description')\n          expect(schema_option).toHaveProperty('x-layout')\n          expect(schema_option).toHaveProperty('type')\n          expect(schema_option).toHaveProperty('version')\n          expect(schema_option).toHaveProperty('properties')\n          expect(schema_option).toHaveProperty('required')\n          expect(schema_option['x-layout']).toEqual('component')\n        }\n      }\n    },\n    {\n      title: component_type + ' tests containing components',\n      test: () => {\n        if (Object.keys(contains).length) {\n          // test only if we have keys\n          componentManagerInstance.clearAll()\n          componentManagerInstance.getStateManager().clearAll()\n          componentManagerInstance.getEventManager().clearAll()\n          registerComponents(componentManagerInstance)\n\n          const c = componentManagerInstance.getComponent(component_type)\n          expect(c).not.toEqual(undefined)\n          const cfg = c.config\n          expect(cfg).toHaveProperty('contains')\n          // eslint-disable-next-line no-unused-vars\n          for (const [key, val] of Object.entries(contains)) {\n            expect(cfg.contains).toHaveProperty(key)\n            // should expect to have a schema\n            const schema = cfg.contains[key]\n            expect(schema).toHaveProperty('id')\n            expect(schema).toHaveProperty('$schema')\n            expect(schema).toHaveProperty('title')\n            expect(schema).toHaveProperty('description')\n            expect(schema).toHaveProperty('x-layout')\n            expect(schema).toHaveProperty('type')\n            expect(schema).toHaveProperty('version')\n            expect(schema).toHaveProperty('properties')\n            expect(schema).toHaveProperty('required')\n\n            expect(schema.id).toEqual(key) // should be same id as the key\n            // should expect a x-layout having value \"component-item\"\n            expect(schema['x-layout']).toEqual('component-item')\n          }\n        }\n      }\n    }\n  ]\n}\n\nfunction uuidv4() {\n  // random string generator\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0\n    var v = c === 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\nexport function testEventSequence(\n  componentManagerInstance,\n  module_name,\n  event_name,\n  event_data,\n  trigger_name,\n  callback\n) {\n  const test_name = uuidv4()\n  componentManagerInstance.getEventManager().register(\n    test_name,\n    {\n      result: {\n        schema: {},\n        handler: callback\n      }\n    },\n    {},\n    {}\n  ) // event and component info not used in test\n  componentManagerInstance.getEventManager().watch([\n    {\n      component: { id: test_name, event: 'result' },\n      trigger: { id: module_name, action: event_name },\n      transform: function (data) {\n        return data\n      }\n    },\n    {\n      component: { id: module_name, event: trigger_name },\n      trigger: { id: test_name, action: 'result' },\n      transform: function (data) {\n        return data\n      }\n    }\n  ])\n  componentManagerInstance\n    .getEventManager()\n    .addEvent(test_name, 'result', event_data, {})\n}\n\nexport default {\n  createComponentClassTests,\n  createComponentRegisterTests,\n  testEventSequence\n}\n"],"names":["_createComponent","renderer","_Component","component_id","data","options","schema_expected","manager","Error","create","render","React","createElement","id","key","config","schema","createComponentClassTests","componentManagerInstance","registerComponents","triggers_expected","events_expected","clearAll","getStateManager","getEventManager","c","getComponent","type","component","triggers","events","createState","title","test","trigger_info_events","actions","getCopyOfActions","expect","Object","keys","toEqual","forEach","trigger_event","idx","toContain","info","handler","toBeTruthy","trigger_events","options_schema","_typeof","name","author","description","version","relation","within","store","collectComponentInventory","toHaveProperty","store_item","parent","getComponentSchema","getComponentByType","not","undefined","createComponentRegisterTests","component_type","contains","cfg","length","schema_option","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","testEventSequence","module_name","event_name","event_data","trigger_name","callback","test_name","replace","r","Math","random","toString","register","result","watch","event","trigger","action","transform","addEvent","TestUtil"],"mappings":"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"}